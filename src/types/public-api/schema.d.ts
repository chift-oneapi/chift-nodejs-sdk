/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    '/token': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Get access token
         * @description This endpoint allows you to get an access token that can be used as a BEARER token to access the protected endpoints of this APIs. The token is valid for 30 minutes. You can refresh the token by requesting a new token.
         */
        post: operations['generate_access_token_token_post'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/consumers': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get consumers
         * @description Returns the list of consumers linked to your account.
         */
        get: operations['consumers_get_consumers'];
        put?: never;
        /**
         * Create new consumer
         * @description Create a new consumer that will have the possibility to use the enabled integrations
         */
        post: operations['consumers_create_consumer'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/consumers/{consumerid}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get one consumer
         * @description Returns the specified consumer
         */
        get: operations['consumers_get_consumer'];
        put?: never;
        post?: never;
        /**
         * Delete one consumer
         * @description Endpoint that deletes one consumer in Chift
         */
        delete: operations['consumers_delete_consumer'];
        options?: never;
        head?: never;
        /**
         * Update one consumer
         * @description Update one consumer in Chift
         */
        patch: operations['consumers_update_consumer'];
        trace?: never;
    };
    '/consumers/{consumerid}/connections': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get connections
         * @description Returns a list of the connections (active or inactive) linked to your consumer
         */
        get: operations['connections_get_connections'];
        put?: never;
        /**
         * Add new connection
         * @description Returns the url that can be used by your client to enable his integrations.
         */
        post: operations['connections_create_connection'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/consumers/{consumerid}/connections/{connectionid}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Delete one connection
         * @description Endpoint that deletes one connection of a consumer in Chift
         */
        delete: operations['connections_delete_connection'];
        options?: never;
        head?: never;
        /**
         * Update an existing connection
         * @description Returns the url that can be used by your client to update the connection
         */
        patch: operations['connections_update_connection'];
        trace?: never;
    };
    '/integrations': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get list of integrations
         * @description Returns a list of integrations (active and inactive) available for your account
         */
        get: operations['integrations_get_integrations'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/integrations/{integrationid}/{image_type}.json': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Returns a logo/icon of an integration (as base64) */
        get: operations['integrations_get_integration_logo_json'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/webhooks/list': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get list of possible webhooks
         * @description Returns a list of webhook that are available for your account
         */
        get: operations['webhooks_get_webhook_types'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/webhooks': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get list of webhook instances
         * @description Returns a list of webhook instances (active/inactive) for your account
         */
        get: operations['webhooks_get_webhooks'];
        put?: never;
        /**
         * Add new webhook instance
         * @description Returns the created webhook instance
         */
        post: operations['webhooks_create_webhook'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/webhooks/{webhookid}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get one webhook instance
         * @description Returns one webhook instance
         */
        get: operations['webhooks_get_webhook'];
        put?: never;
        post?: never;
        /**
         * Delete one webhook
         * @description Endpoint that deletes one existing webhook
         */
        delete: operations['webhooks_delete_webhook'];
        options?: never;
        head?: never;
        /**
         * Update one webhook
         * @description Update one webhook in Chift
         */
        patch: operations['webhooks_update_webhook'];
        trace?: never;
    };
    '/webhooks/{webhookid}/logs': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get list of webhook logs for one webhook
         * @description Returns a list of webhook logs for one webhook for your account
         */
        get: operations['webhooks_get_webhook_logs'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/syncs': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get syncs
         * @description Returns the syncs
         */
        get: operations['syncs_get_syncs'];
        put?: never;
        /**
         * Create sync
         * @description Returns the created sync
         */
        post: operations['syncs_post_sync'];
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Update existing sync
         * @description Update existing sync & related flows and mappings
         */
        patch: operations['syncs_update_sync'];
        trace?: never;
    };
    '/syncs/{syncid}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get sync
         * @description Returns a sync by id
         */
        get: operations['syncs_get_sync'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/syncs/{syncid}/flows/{flowid}/event': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Send a custom event for a specific flow
         * @description Route that can be used to send a specific event for a flow
         */
        post: operations['syncs_send_custom_event'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/consumers/{consumerid}/syncs/{syncid}/flows/{flowid}/executions': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get executions information for one consumer/flow/sync
         * @description Returns executions information for one consumer/flow/sync
         */
        get: operations['syncs_get_consumer_executions'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/syncs/{syncid}/flows/{flowid}/executions/{executionid}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get execution start/end timestamp
         * @description Get execution start/end timestamp
         */
        get: operations['syncs_get_execution'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/consumers/{consumerid}/syncs': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Retrieve the url of a sync for a specific consumer
         * @description This route can be used to retrieve the url that can be shared with your clients to allow them to connect as specified in a sync
         */
        post: operations['syncs_create_synctoconsumer'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/consumers/{consumerid}/syncs/{syncid}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get sync information for one consumer
         * @description Returns sync information (creation date, mapping) related to a specific consumer
         */
        get: operations['syncs_get_syncconsumer'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Update flow mappings for a specific consumer
         * @description Route that can be used to update the flow mappings for a specific consumer. It will replace the existing configuration with the provided one.
         */
        patch: operations['syncs_update_synctoconsumer'];
        trace?: never;
    };
    '/consumers/{consumerid}/syncs/{syncid}/flows/{flowid}/enable': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Enable a flow for a specific consumer
         * @description Route that can be used to enable a flow for a specific consumer
         */
        post: operations['syncs_enable_syncconsumer'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/consumers/{consumerid}/syncs/{syncid}/flows/{flowid}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Update flow settings for a specific consumer
         * @description Route that can be used to update the flow configuration for a specific consumer. It will merge the new configuration with the existing one.
         */
        patch: operations['syncs_update_flowtoconsumer'];
        trace?: never;
    };
    '/datastores': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get list of datastores
         * @description Returns a list of datastores (active and inactive) available for your account
         */
        get: operations['datastores_get_datastores'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/consumers/{consumerid}/datastore/{datastoreid}/data': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get execution data for a specific consumer and a specific datastore
         * @description Returns execution data related to a consumer and a datastore. Queryparams can be used to filter the restuls by datastore column or by executionid
         */
        get: operations['datastores_get_consumer_and_datastoredata'];
        put?: never;
        /**
         * Add data into a datastore for a consumer
         * @description Endpoint that can be used to add data into a datastore for a specific consumer
         */
        post: operations['datastores_create_consumer_datastoredata'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/consumers/{consumerid}/datastore/{datastoreid}/data/{datastoredataid}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Delete execution data for a specific consumer and a specific datastore
         * @description Delete execution data related to a consumer and a datastore
         */
        delete: operations['datastores_delete_consumer_datastoredata'];
        options?: never;
        head?: never;
        /**
         * Update execution data for a specific consumer and a specific datastore
         * @description Update and returns execution data related to a consumer and a datastore
         */
        patch: operations['datastores_update_consumer_datastoredata'];
        trace?: never;
    };
    '/issues': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get issues
         * @description Returns a list of the issues of your account. Filters can be used to query specific results. Filters can be combined and are inclusive.
         */
        get: operations['issues_get_issues'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/consumers/{consumer_id}/issues': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get issues by consumer id
         * @description Returns a list of the issues linked to specific consumer. Filters can be used to query specific results. Filters can be combined and are inclusive.
         */
        get: operations['issues_get_issues_by_consumer_id'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/consumers/{consumer_id}/accounting/folders': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Folders */
        get: operations['accounting_get_folders'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/consumers/{consumer_id}/accounting/bookyears': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Bookyears */
        get: operations['accounting_get_bookyears'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/consumers/{consumer_id}/accounting/analytic-plans': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Analytic Plans */
        get: operations['accounting_get_analytic_plans'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/consumers/{consumer_id}/accounting/clients': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get clients
         * @description Returns a list of accounting clients
         */
        get: operations['accounting_get_clients'];
        put?: never;
        /**
         * Create client
         * @description Create a new client
         */
        post: operations['accounting_create_client'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/consumers/{consumer_id}/accounting/clients/{client_id}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get one client
         * @description Returns a specific accounting client
         */
        get: operations['accounting_get_client'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Update client
         * @description Endpoint that gives the possibility to update an accounting client
         */
        patch: operations['accounting_update_client'];
        trace?: never;
    };
    '/consumers/{consumer_id}/accounting/suppliers': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get suppliers
         * @description Returns a list of accounting suppliers
         */
        get: operations['accounting_get_suppliers'];
        put?: never;
        /**
         * Create supplier
         * @description Create a new supplier
         */
        post: operations['accounting_create_supplier'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/consumers/{consumer_id}/accounting/suppliers/{supplier_id}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get one supplier
         * @description Returns one accounting supplier
         */
        get: operations['accounting_get_supplier'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Update one supplier
         * @description Update an accounting supplier
         */
        patch: operations['accounting_update_supplier'];
        trace?: never;
    };
    '/consumers/{consumer_id}/accounting/invoices': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create sale/purchase entry
         * @description Create a new sale/purchase accounting entry
         */
        post: operations['accounting_create_invoice'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/consumers/{consumer_id}/accounting/invoices/multi-analytic-plans': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create sale/purchase entry (Multiple plans)
         * @description Create a new sale/purchase entry with multiple analytic plans in the accounting
         */
        post: operations['accounting_create_invoice_multiple_plans'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/consumers/{consumer_id}/accounting/invoices/type/{invoice_type}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get invoices by type (sale/purchase entries)
         * @description Returns a list of invoices by a specific type (=sale/purchase entries). Each line of the invoice will include the analytic account linked to default analytic plan. Optionally dates can be defined to retrieve invoice from a certain date to another date
         */
        get: operations['accounting_get_invoices_by_type'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/consumers/{consumer_id}/accounting/invoices/multi-analytic-plans/type/{invoice_type}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get invoices by type (sale/purchase entries - Multiple Analytic Plans)
         * @description Returns a list of invoices by a specific type (=sale/purchase entries) with invoice lines including multiple analytic plans. Optionally dates can be defined to retrieve invoice from a certain date to another date
         */
        get: operations['accounting_get_invoices_by_type_multi_analytic_plans'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/consumers/{consumer_id}/accounting/invoices/{invoice_id}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get one invoice (sale/purchase entry)
         * @description Returns a specific invoice (sale/purchase entry). Each line will include the analytic account linked to default analytic plan
         */
        get: operations['accounting_get_invoice'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/consumers/{consumer_id}/accounting/invoices/multi-analytic-plans/{invoice_id}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get one invoice (sale/purchase entry - Multiple Analytic Plans)
         * @description Returns a specific invoice (=sale/purchase entry) with invoice lines /oincluding multiple analytic plans
         */
        get: operations['accounting_get_invoice_multi_analytic_plans'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/consumers/{consumer_id}/accounting/accounts': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create ledger account
         * @description Create a new ledger account in the chart of accounts
         */
        post: operations['accounting_create_ledger_account'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/consumers/{consumer_id}/accounting/bank-accounts': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create bank account
         * @description Create a new bank account in the accounting system
         */
        post: operations['accounting_create_bank_account'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/consumers/{consumer_id}/accounting/analytic-accounts': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get analytic accounts
         * @description Returns all analytic accounts of the default analytic plan
         */
        get: operations['accounting_get_analytic_accounts'];
        put?: never;
        /**
         * Create analytic account
         * @description Create a new analytic account in the default analytic plan
         */
        post: operations['accounting_create_analytic_account'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/consumers/{consumer_id}/accounting/analytic-accounts/multi-analytic-plans/{analytic_plan}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create analytic account (Multiple Analytic Plans)
         * @description Create a new analytic account in a specific analytic plan
         */
        post: operations['accounting_create_analytic_account_multi_plans'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/consumers/{consumer_id}/accounting/analytic-accounts/{analytic_account_id}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get analytic account
         * @description Returns one specific analytic account of the default analytic plan
         */
        get: operations['accounting_get_analytic_account'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Update analytic account
         * @description Update one specific analytic account in the default analytic plan
         */
        patch: operations['accounting_update_analytic_account'];
        trace?: never;
    };
    '/consumers/{consumer_id}/accounting/analytic-accounts/{analytic_account_id}/multi-analytic-plans/{analytic_plan}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get analytic account (Multiple Analytic Plans)
         * @description Returns one specific analytic account of a specific analytic plan
         */
        get: operations['accounting_get_analytic_account_multi_plans'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Update analytic account (Multiple Analytic Plans)
         * @description Update one specific analytic account in a specific analytic plan
         */
        patch: operations['accounting_update_analytic_account_multi_plans'];
        trace?: never;
    };
    '/consumers/{consumer_id}/accounting/analytic-accounts/multi-analytic-plans': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get analytic accounts (Multiple Analytic Plans)
         * @description Returns all analytic accounts of all analytic plans
         */
        get: operations['accounting_get_analytic_accounts_multi_plans'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/consumers/{consumer_id}/accounting/journal/entries': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get journal entries
         * @description Returns a list of journal entries. Each item will include the analytic account linked to default analytic plan. Optionally, you can retrieve journal entries linked to a specific client/supplier using the partner_id parameter. When retrieving entries linked to a specific client/supplier, some journal items of an entry (e.g. a miscellaneous operation) could be excluding resulting in an unbalanced journal entry.
         */
        get: operations['accounting_get_journal_entries'];
        put?: never;
        /**
         * Create Journal Entry [Deprecated]
         * @description Create a new Journal Entry in the accounting system
         */
        post: operations['accounting_create_journal_entry'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/consumers/{consumer_id}/accounting/journal/entries/multi-analytic-plans': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get journal entries (Multiple Analytic Plans)
         * @description Returns a list of journal entries with invoice items including multiple analytic plan.Optionally, you can retrieve journal entries linked to a specific client/supplier using the partner_id parameter. When retrieving entries linked to a specific client/supplier, some journal items of an entry (e.g. a miscellaneous operation) could be excluding resulting in an unbalanced journal entry.
         */
        get: operations['accounting_get_journal_entries_multi_plan'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/consumers/{consumer_id}/accounting/journal/entries/{journal_entry_id}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get one journal entry
         * @description Returns a single journal entry by ID.
         */
        get: operations['accounting_get_journal_entry'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/consumers/{consumer_id}/accounting/journal-entries': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create Journal Entry
         * @description Create a new Journal Entry in the accounting system
         */
        post: operations['accounting_create_generic_journal_entry'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/consumers/{consumer_id}/accounting/invoices/id/{invoice_id}/payments': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get payments by invoice ID
         * @description Get payments of a specific invoice based on its ID
         */
        get: operations['accounting_get_payments_by_invoice'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/consumers/{consumer_id}/accounting/journals': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get journals
         * @description Get journals existing in the accounting system
         */
        get: operations['accounting_get_journals'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/consumers/{consumer_id}/accounting/journal': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create journal
         * @description Create a journal in the accounting system
         */
        post: operations['accounting_create_journal'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/consumers/{consumer_id}/accounting/vat-codes': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get vat codes
         * @description Get vat codes existing in the accounting system
         */
        get: operations['accounting_get_vat_codes'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/consumers/{consumer_id}/accounting/miscellaneous-operation': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get miscellaneous operations
         * @description Get miscellaneous operations from the the accounting system
         */
        get: operations['accounting_get_miscellaneous_operations'];
        put?: never;
        /**
         * Create miscellaneous operation
         * @description Create a new miscellaneous operation
         */
        post: operations['accounting_create_miscellaneous_operation'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/consumers/{consumer_id}/accounting/miscellaneous-operation/{operation_id}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get one miscellaneous operation
         * @description Get a specific miscellaneous operation from the the accounting system
         */
        get: operations['accounting_get_miscellaneous_operation'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/consumers/{consumer_id}/accounting/matching': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Match entries
         * @description Match existing entries in the accounting system
         */
        post: operations['accounting_match_entries'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/consumers/{consumer_id}/accounting/matching-multiple': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Match multiple entries
         * @description Match existing entries in the accounting system
         */
        post: operations['accounting_match_entries_multiple'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/consumers/{consumer_id}/accounting/invoices/pdf/{invoice_id}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Attach a document (PDF)
         * @description Attach a document (PDF) to the invoice entry
         */
        post: operations['accounting_add_attachment'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/consumers/{consumer_id}/accounting/attachments': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get attachments
         * @description Returns a list of all attachments linked to an accounting entry
         */
        get: operations['accounting_get_attachments'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/consumers/{consumer_id}/accounting/chart-of-accounts': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get chart of accounts
         * @description Get all accounts in the chart of accounts
         */
        get: operations['accounting_get_chart_of_accounts'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/consumers/{consumer_id}/accounting/chart-of-accounts/balance': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Get the balance of accounts
         * @description Get the balance of accounts in the accounting plan (chart of accounts) between specific months
         */
        post: operations['accounting_get_accounts_balances'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/consumers/{consumer_id}/accounting/employees': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get employees
         * @description Returns a list of the employees linked to the company
         */
        get: operations['accounting_get_employees'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/consumers/{consumer_id}/accounting/financial-entry': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create a financial entry [Deprecated]
         * @description Create a new financial entry (Bank or Cash operation)
         */
        post: operations['accounting_create_financial_entry'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/consumers/{consumer_id}/accounting/financial-entries': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create a financial entry
         * @description Create a new financial entry (Bank or Cash operation)
         */
        post: operations['accounting_create_financial_entries'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/consumers/{consumer_id}/accounting/outstandings': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get clients/suppliers outstanding items
         * @description Returns a list of all clients/suppliers outstanding items
         */
        get: operations['accounting_get_outstandings'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/consumers/{consumer_id}/accounting/export-fec': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Export entries in FEC format
         * @description Returns accounting entries according to the FEC format
         */
        get: operations['accounting_export_fec'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/consumers/{consumer_id}/pos/orders': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get orders
         * @description Returns a list of the orders
         */
        get: operations['pos_get_orders'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/consumers/{consumer_id}/pos/orders/{order_id}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get one order
         * @description Returns a single order
         */
        get: operations['pos_get_order'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Update order
         * @description Update one order
         */
        patch: operations['pos_update_pos_customer'];
        trace?: never;
    };
    '/consumers/{consumer_id}/pos/locations': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get locations
         * @description Returns a list of the locations
         */
        get: operations['pos_get_locations'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/consumers/{consumer_id}/pos/payments': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get payments
         * @description Returns a list of payments
         */
        get: operations['pos_get_payments'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/consumers/{consumer_id}/pos/sales': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get sales
         * @description Returns the summary of the sales
         */
        get: operations['pos_get_sales'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/consumers/{consumer_id}/pos/payment-methods': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get payment methods
         * @description Returns the list of payment methods
         */
        get: operations['pos_get_payments_methods'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/consumers/{consumer_id}/pos/customers': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get customers
         * @description Returns the list of customers
         */
        get: operations['pos_get_customers'];
        put?: never;
        /**
         * Create one customer
         * @description Create a customer
         */
        post: operations['pos_create_pos_customer'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/consumers/{consumer_id}/pos/customers/{customer_id}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get one customer
         * @description Returns a specific customer
         */
        get: operations['pos_get_customer'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/consumers/{consumer_id}/pos/product-categories': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get product categories
         * @description Returns a list of product categories
         */
        get: operations['pos_get_product_categories'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/consumers/{consumer_id}/pos/products': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get products
         * @description Returns a list of products
         */
        get: operations['pos_get_products'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/consumers/{consumer_id}/pos/accounting-categories': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get accounting categories
         * @description Returns a list of accounting categories. When not available for a specific POS, it will return the same values as the product categories.
         */
        get: operations['pos_get_accounting_categories'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/consumers/{consumer_id}/pos/closures/{date}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get closure info for a specific day
         * @description Returns whether the closure was already done for a specific day or not
         */
        get: operations['pos_get_closure'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/consumers/{consumer_id}/pos/objectives': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get objectives
         * @description Return the total amount and the tax amount for a specific period
         */
        get: operations['pos_get_objectives'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/consumers/{consumer_id}/commerce/customers': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all customers
         * @description Returns a list of all the customers
         */
        get: operations['ecommerce_get_customers'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/consumers/{consumer_id}/commerce/customers/{customer_id}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get one specific customer
         * @description Returns a specific customer
         */
        get: operations['ecommerce_get_customer'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/consumers/{consumer_id}/commerce/products': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all products
         * @description Returns a list of all the products
         */
        get: operations['ecommerce_get_products'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/consumers/{consumer_id}/commerce/products/{product_id}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get one specific product
         * @description Returns a specific product
         */
        get: operations['ecommerce_get_product'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/consumers/{consumer_id}/commerce/variants/{variant_id}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get one specific product variant
         * @description Returns a specific product variant
         */
        get: operations['ecommerce_get_variant'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/consumers/{consumer_id}/commerce/variants/set_quantity/{variant_id}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Update available quantity
         * @description Update available quantity of a product variant in a specific location
         */
        post: operations['ecommerce_update_variant_quantity'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/consumers/{consumer_id}/commerce/locations': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all locations
         * @description Returns a list of all locations
         */
        get: operations['ecommerce_get_locations'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/consumers/{consumer_id}/commerce/orders': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all orders
         * @description Returns a list of all the orders
         */
        get: operations['ecommerce_get_orders'];
        put?: never;
        /**
         * Create an order
         * @description Create a new order
         */
        post: operations['ecommerce_create_order'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/consumers/{consumer_id}/commerce/orders/{order_id}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get one specific order
         * @description Returns a specific order
         */
        get: operations['ecommerce_get_order'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/consumers/{consumer_id}/commerce/payment-methods': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all payment methods
         * @description Returns the list of the payment methods
         */
        get: operations['ecommerce_get_payments_methods'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/consumers/{consumer_id}/commerce/product-categories': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all product categories
         * @description Returns the list of the product categories
         */
        get: operations['ecommerce_get_product_categories'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/consumers/{consumer_id}/commerce/taxes': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all tax rates
         * @description Returns the list of all tax rates
         */
        get: operations['ecommerce_get_taxes'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/consumers/{consumer_id}/commerce/countries': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all countries
         * @description Returns the list of all activated countries
         */
        get: operations['ecommerce_get_countries'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/consumers/{consumer_id}/invoicing/invoices': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve all invoices
         * @description Returns a list of invoices. Optionally invoice type and dates can be defined to retrieve invoices of a certain type from a certain date to another date
         */
        get: operations['invoicing_get_invoices'];
        put?: never;
        /**
         * Create an invoice
         * @description Create a new invoice.
         */
        post: operations['invoicing_post_invoices'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/consumers/{consumer_id}/invoicing/invoices/{invoice_id}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve one invoice
         * @description Returns a invoice
         */
        get: operations['invoicing_get_invoice'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/consumers/{consumer_id}/invoicing/taxes': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve all taxes
         * @description Returns a list of all the taxes
         */
        get: operations['invoicing_get_taxes'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/consumers/{consumer_id}/invoicing/taxes/{tax_id}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve one tax
         * @description Returns a tax
         */
        get: operations['invoicing_get_tax'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/consumers/{consumer_id}/invoicing/products': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve all products
         * @description Returns a list of all the products
         */
        get: operations['invoicing_get_products'];
        put?: never;
        /**
         * Create a product
         * @description Create a new product.
         */
        post: operations['invoicing_post_products'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/consumers/{consumer_id}/invoicing/products/{product_id}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve one product
         * @description Returns a product
         */
        get: operations['invoicing_get_product'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/consumers/{consumer_id}/invoicing/opportunities': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve all opportunities
         * @description Returns a list of all the opportunities
         */
        get: operations['invoicing_get_opportunities'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/consumers/{consumer_id}/invoicing/opportunities/{opportunity_id}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve one opportunity
         * @description Returns an opportunity
         */
        get: operations['invoicing_get_opportunity'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/consumers/{consumer_id}/invoicing/contacts': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve all contacts
         * @description Returns a list of all the contacts. Optionally contact type can be defined to retrieve contact from a certain type.
         */
        get: operations['invoicing_get_contacts'];
        put?: never;
        /**
         * Create a contact
         * @description Create a new contact.
         */
        post: operations['invoicing_post_contacts'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/consumers/{consumer_id}/invoicing/contacts/{contact_id}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve one contact
         * @description Returns a contact
         */
        get: operations['invoicing_get_contact'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/consumers/{consumer_id}/invoicing/payments': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve all payments
         * @description Returns a list of payments
         */
        get: operations['invoicing_get_payments'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/consumers/{consumer_id}/invoicing/payment-methods': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve all payment methods
         * @description Returns the list of payment methods
         */
        get: operations['invoicing_get_payments_methods'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/consumers/{consumer_id}/banking/financial-institutions': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get list of financial institutions
         * @description Returns the list of financial institutions the user consent access to
         */
        get: operations['banking_get_financial_institutions'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/consumers/{consumer_id}/banking/accounts': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get list of banking accounts
         * @description Returns the list of banking accounts
         */
        get: operations['banking_get_accounts'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/consumers/{consumer_id}/banking/{account_id}/transactions': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get list of financial transactions
         * @description Returns the list of transactions of an account
         */
        get: operations['banking_get_account_transactions'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/consumers/{consumer_id}/banking/counterparts': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get aggregated list of account counterparts found in transactions
         * @description Returns the aggregated list of account counterpats found in transactions. Useful for categorisation.
         */
        get: operations['banking_get_account_counterparts'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/consumers/{consumer_id}/payment/balances': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve all Balances
         * @description Returns a list of balances.
         */
        get: operations['payment_get_balances'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/consumers/{consumer_id}/payment/transactions': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve all Transactions
         * @description Returns a list of transactions. Optionally transaction type and dates can be defined to retrieve transactions of a certain type from a certain date to another date
         */
        get: operations['payment_get_transaction'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/consumers/{consumer_id}/payment/payments': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve all Payments
         * @description Returns a list of payments.
         */
        get: operations['payment_get_payments'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/consumers/{consumer_id}/payment/payments/{payment_id}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a Payment
         * @description Returns a specific payment.
         */
        get: operations['payment_get_payment'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/consumers/{consumer_id}/payment/refunds': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve all Refunds
         * @description Returns a list of refunds.
         */
        get: operations['payment_get_refunds'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/consumers/{consumer_id}/pms/orders': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get orders (PMS)
         * @description Returns a list of the orders
         */
        get: operations['pms_get_orders'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/consumers/{consumer_id}/pms/invoices': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get invoices (PMS)
         * @description Returns a list of the invoices
         */
        get: operations['pms_get_invoices'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/consumers/{consumer_id}/pms/customers': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get customers (PMS)
         * @description Returns a list of all the customers
         */
        get: operations['pms_get_customers'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/consumers/{consumer_id}/pms/customers/{customer_id}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get one customer (PMS)
         * @description Returns a specific customer
         */
        get: operations['pms_get_customer'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/consumers/{consumer_id}/pms/locations': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get locations (PMS)
         * @description Returns a list of the locations
         */
        get: operations['pms_get_locations'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/consumers/{consumer_id}/pms/payments': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get payments (PMS)
         * @description Returns a list of payments
         */
        get: operations['pms_get_payments'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/consumers/{consumer_id}/pms/payment-methods': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get payment methods (PMS)
         * @description Returns the list of payment methods
         */
        get: operations['pms_get_payments_methods'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/consumers/{consumer_id}/pms/accounting-categories': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get accounting categories (PMS)
         * @description Returns a list of accounting categories. When not available for a specific PMS,it will return the same values as the product categories.
         */
        get: operations['pms_get_accounting_categories'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/consumers/{consumer_id}/pms/closures/{date}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get closure info for a specific day (PMS)
         * @description Returns whether the closure was already done for a specific day or not
         */
        get: operations['pms_get_closure'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/consumers/{consumer_id}/pms/taxes': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get tax rates (PMS)
         * @description Returns a list of the tax rates
         */
        get: operations['pms_get_taxes'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** AccountBalance */
        AccountBalance: {
            /**
             * Account Number
             * @description Number of the account
             */
            account_number: string;
            /**
             * Account Name
             * @description Display name of the account
             */
            account_name?: string | null;
            /**
             * Debit
             * @description Debit at end date. When debit and credit are equal to 0 and balance is different from 0 then the debit and credit cannot be determined, only the balance can be calculated in those cases.
             */
            debit: number;
            /**
             * Credit
             * @description Credit at end date. When debit and credit are equal to 0 and balance is different from 0 then the debit and credit cannot be determined, only the balance can be calculated in those cases.
             */
            credit: number;
            /** Balance */
            balance: number;
            /**
             * Period Debit
             * @description Debit at end date beginning from the given start date. When debit and credit are equal to 0 and balance is different from 0 then the debit and credit cannot be determined, only the balance can be calculated in those cases.
             */
            period_debit: number;
            /**
             * Period Credit
             * @description Credit at end date beginning from the given start date. When debit and credit are equal to 0 and balance is different from 0 then the debit and credit cannot be determined, only the balance can be calculated in those cases.
             */
            period_credit: number;
            /** Period Balance */
            period_balance: number;
        };
        /** AccountBalanceFilter */
        AccountBalanceFilter: {
            /**
             * Accounts
             * @description Array/list containing the account numbers/classes to include in the response. E.g. ["601", "7"] to retrieve all account in the class 7 and accounts with an account number beginning with 601
             */
            accounts: string[];
            /**
             * Start
             * @description Start month (included, e.g. 202302 for february 2023)
             */
            start?: string | null;
            /**
             * End
             * @description End month (included, e.g. 202312 for december 2023)
             */
            end: string;
        };
        /** AccountItem */
        AccountItem: {
            /** Number */
            number: string;
            /** Name */
            name: string;
            /**
             * Active
             * @default true
             */
            active: boolean | null;
            type?: components['schemas']['AccountItemType'] | null;
        };
        /**
         * AccountItemType
         * @enum {string}
         */
        AccountItemType:
            | 'bank'
            | 'cash'
            | 'other_financial'
            | 'receivable'
            | 'payable'
            | 'income'
            | 'expense'
            | 'vat'
            | 'other';
        /** AccountToCreate */
        AccountToCreate: {
            /** Account Number */
            account_number: string;
            /** Account Name */
            account_name: string;
        };
        /**
         * AccountTypeFilter
         * @enum {string}
         */
        AccountTypeFilter: 'bank' | 'cash' | 'income' | 'expense' | 'vat';
        /** AccountingCategoryItem */
        AccountingCategoryItem: {
            /**
             * Id
             * @description Unique identifier of the accounting category
             */
            id: string;
            /**
             * Name
             * @description Name given to the accounting category
             */
            name: string;
            /**
             * Code
             * @description Code assigned to the category
             */
            code?: string | null;
            /**
             * Ledger Account Code
             * @description Ledger account code assigned to the category
             */
            ledger_account_code?: string | null;
            /**
             * Posting Account Code
             * @description Posting account code assigned to the category
             */
            posting_account_code?: string | null;
        };
        /** AccountingVatCode */
        AccountingVatCode: {
            /** Id */
            id: string;
            /** Code */
            code?: string | null;
            /** Label */
            label: string;
            /** @default unknown */
            scope: components['schemas']['VatCodeScope'] | null;
            /** Rate */
            rate: number;
            type: components['schemas']['VatCodeType'];
            /** Deductible Account */
            deductible_account?: string | null;
            /** Payable Account */
            payable_account?: string | null;
            /**
             * Reversed
             * @default false
             */
            reversed: boolean | null;
        };
        /** AddressItem */
        AddressItem: {
            /**
             * Address Type
             * @description Type of the address
             */
            address_type?: string | null;
            /**
             * Name
             * @description Name given to the address (e.g. 'home')
             */
            name?: string | null;
            /**
             * Street
             * @description Street name
             */
            street?: string | null;
            /**
             * Number
             * @description Number of the address
             */
            number?: string | null;
            /**
             * Box
             * @description Box of the address
             */
            box?: string | null;
            /**
             * City
             * @description City name
             */
            city?: string | null;
            /**
             * Postal Code
             * @description Postal code of the address
             */
            postal_code?: string | null;
            /**
             * Country
             * @description Country, format: ISO 3166-1 codes.
             */
            country?: string | null;
        };
        /** AddressItemInInvoicing */
        AddressItemInInvoicing: {
            address_type: components['schemas']['AddressTypeInvoicing'];
            /** Name */
            name?: string | null;
            /** Number */
            number?: string | null;
            /** Box */
            box?: string | null;
            /** Phone */
            phone?: string | null;
            /** Mobile */
            mobile?: string | null;
            /** Email */
            email?: string | null;
            /** Street */
            street: string;
            /** City */
            city: string;
            /** Postal Code */
            postal_code: string;
            /**
             * Country
             * @description Format: ISO 3166-1 codes.
             */
            country: string;
        };
        /** AddressItemOut */
        'AddressItemOut-Input': {
            address_type: components['schemas']['AddressType'];
            /** Name */
            name?: string | null;
            /** Number */
            number?: string | null;
            /** Box */
            box?: string | null;
            /** Phone */
            phone?: string | null;
            /** Mobile */
            mobile?: string | null;
            /** Email */
            email?: string | null;
            /** Street */
            street?: string | null;
            /** City */
            city?: string | null;
            /** Postal Code */
            postal_code?: string | null;
            /**
             * Country
             * @description Format: ISO 3166-1 codes.
             */
            country?: string | null;
        };
        /** AddressItemOutInvoicing */
        AddressItemOutInvoicing: {
            address_type: components['schemas']['AddressTypeInvoicing'];
            /** Name */
            name?: string | null;
            /** Number */
            number?: string | null;
            /** Box */
            box?: string | null;
            /** Phone */
            phone?: string | null;
            /** Mobile */
            mobile?: string | null;
            /** Email */
            email?: string | null;
            /** Street */
            street?: string | null;
            /** City */
            city?: string | null;
            /** Postal Code */
            postal_code?: string | null;
            /**
             * Country
             * @description Format: ISO 3166-1 codes.
             */
            country?: string | null;
        };
        /**
         * AddressType
         * @enum {string}
         */
        AddressType: 'main' | 'delivery' | 'invoice';
        /**
         * AddressTypeInvoicing
         * @enum {string}
         */
        AddressTypeInvoicing: 'main' | 'delivery' | 'invoice' | 'other';
        /** AnalyticAccountItemIn */
        AnalyticAccountItemIn: {
            /**
             * Active
             * @default true
             */
            active: boolean | null;
            /** Code */
            code: string;
            /** Name */
            name: string;
            /**
             * Currency
             * @description Indicates the currency of the analytic account (e.g. EUR).
             */
            currency: string;
        };
        /** AnalyticAccountItemOut */
        AnalyticAccountItemOut: {
            /** Id */
            id: string;
            /** Active */
            active: boolean;
            /** Code */
            code?: string | null;
            /** Name */
            name: string;
            /**
             * Currency
             * @description Indicates the currency of the analytic account (e.g. EUR).
             */
            currency?: string | null;
            /**
             * Balance
             * @default 0
             */
            balance: number | null;
            /**
             * Credit
             * @default 0
             */
            credit: number | null;
            /**
             * Debit
             * @default 0
             */
            debit: number | null;
        };
        /** AnalyticAccountItemOutMultiAnalyticPlans */
        AnalyticAccountItemOutMultiAnalyticPlans: {
            /** Id */
            id: string;
            /** Active */
            active: boolean;
            /** Code */
            code?: string | null;
            /** Name */
            name: string;
            /**
             * Currency
             * @description Indicates the currency of the analytic account (e.g. EUR).
             */
            currency?: string | null;
            /**
             * Balance
             * @default 0
             */
            balance: number | null;
            /**
             * Credit
             * @default 0
             */
            credit: number | null;
            /**
             * Debit
             * @default 0
             */
            debit: number | null;
            /** Analytic Plan */
            analytic_plan: string;
        };
        /** AnalyticAccountItemUpdate */
        AnalyticAccountItemUpdate: {
            /**
             * Active
             * @default true
             */
            active: boolean | null;
            /** Code */
            code?: string | null;
            /** Name */
            name?: string | null;
            /**
             * Currency
             * @description Indicates the currency of the analytic account (e.g. EUR).
             */
            currency?: string | null;
        };
        /** AnalyticDistribution */
        AnalyticDistribution: {
            /** Analytic Plan */
            analytic_plan: string;
            /** Analytic Accounts */
            analytic_accounts: components['schemas']['AnalyticDistributionDetail'][];
        };
        /** AnalyticDistributionDetail */
        AnalyticDistributionDetail: {
            /** Analytic Account */
            analytic_account: string;
            /**
             * Percentage
             * @description Indicates the percentage of the untaxed amount to attribute to the given analytic account (Only percentages without decimals are allowed).
             */
            percentage: number;
        };
        /** AnalyticPlanItem */
        AnalyticPlanItem: {
            /** Id */
            id: string;
            /** Name */
            name: string;
            /**
             * Active
             * @default true
             */
            active: boolean | null;
            /** Parent Id */
            parent_id?: string | null;
        };
        /**
         * Api
         * @enum {string}
         */
        Api:
            | 'Point of Sale'
            | 'eCommerce'
            | 'Accounting'
            | 'Invoicing'
            | 'Communication'
            | 'Banking'
            | 'Custom'
            | 'Payment'
            | 'Property Management System';
        /** AttachmentItem */
        AttachmentItem: {
            /** Base64 String */
            base64_string: string;
        };
        /** AttachmentItemOut */
        AttachmentItemOut: {
            /** Id */
            id: string;
            /** Base64 String */
            base64_string: string;
        };
        /** AuthItem */
        AuthItem: {
            /** Clientid */
            clientId: string;
            /** Clientsecret */
            clientSecret: string;
            /**
             * Accountid
             * Format: uuid
             */
            accountId: string;
            /** Marketplaceid */
            marketplaceId?: string | null;
        };
        /** BalanceItemOut */
        BalanceItemOut: {
            /**
             * Id
             * @description Technical id in Chift
             */
            id: string;
            /** @description Technical id in the target software */
            source_ref: components['schemas']['Ref'];
            /**
             * Available Amount
             * @description Total amount available
             */
            available_amount: number;
            /**
             * Currency
             * @description Currency
             */
            currency: string;
            /**
             * Create Date
             * Format: date-time
             * @description Create Date
             */
            create_date: string;
        };
        /** BankAccountItemIn */
        BankAccountItemIn: {
            /**
             * Code
             * @description A userfriendly code to represent the bank account. This will be used as the code of the journal if we need to create a journal for the bank account.
             */
            code: string;
            /**
             * Currency
             * @description Currency of the bank account.
             */
            currency: string;
            /**
             * Account Name
             * @description Name of the bank account. Represents this specific bank account in the accounting system.
             */
            account_name?: string | null;
            /**
             * Account Number
             * @description Unique number representing the bank account. At least one of the fields 'account_number' or 'IBAN' must be filled in.
             */
            account_number?: string | null;
            /**
             * Iban
             * @description IBAN of the bank account. At least one of the fields 'account_number' or 'IBAN' must be filled in.
             */
            iban?: string | null;
            /**
             * Bank Name
             * @description Name of the bank linked to the bank account.
             */
            bank_name: string;
        };
        /** BankAccountItemOut */
        BankAccountItemOut: {
            /** Id */
            id: string;
            /**
             * Code
             * @description A userfriendly code to represent the bank account. This will be used as the code of the journal if we need to create a journal for the bank account.
             */
            code?: string | null;
            /**
             * Currency
             * @description Currency of the bank account.
             */
            currency?: string | null;
            /**
             * Account Name
             * @description Name of the bank account. Represents this specific bank account in the accounting system.
             */
            account_name?: string | null;
            /**
             * Account Number
             * @description Unique number representing the bank account.
             */
            account_number?: string | null;
            /**
             * Iban
             * @description IBAN of the bank account.
             */
            iban?: string | null;
            /**
             * Bank Name
             * @description Name of the bank linked to the bank account.
             */
            bank_name?: string | null;
            /**
             * Journal Id
             * @description Indicates the journal used in the accounting system to represent the bank account. The journal contains all the transactions related to this specific bank account.
             */
            journal_id?: string | null;
            /**
             * Ledger Account
             * @description Indicates the ledger account used in the accounting system to represent the bank account. The ledger account is used in all the transactions related to this specific bank account. This ledger account is used to track the balance of the bank account.
             */
            ledger_account?: string | null;
        };
        /** BankingAccountItem */
        BankingAccountItem: {
            /**
             * Id
             * @description Unique identifier of the account
             */
            id: string;
            /**
             * Currency
             * @description Currency of the account
             */
            currency: string;
            /**
             * Current Balance
             * @description Current balance of the account
             */
            current_balance: number;
            /**
             * Current Balance Last Update Date
             * @description Last update date of the current balance
             */
            current_balance_last_update_date?: string | null;
            /**
             * Available Balance
             * @description Available balance of the account
             */
            available_balance: number;
            /**
             * Available Balance Last Update Date
             * @description Last update date of the available balance
             */
            available_balance_last_update_date?: string | null;
            /**
             * Description
             * @description Description of the account
             */
            description: string;
            /**
             * Reference
             * @description Reference of the account
             */
            reference: string;
            /**
             * Reference Type
             * @description Type of the reference
             */
            reference_type: string;
            /**
             * Holder Name
             * @description Name of the account holder
             */
            holder_name?: string | null;
        };
        /** BankingCounterPartItem */
        BankingCounterPartItem: {
            /**
             * Name
             * @description Name of the counterpart
             */
            name?: string | null;
            /**
             * Reference
             * @description Reference of the counterpart
             */
            reference?: string | null;
            /**
             * Details
             * @description Details of the counterpart
             */
            details?: string | null;
        };
        /** BankingFinancialInstitutionItem */
        BankingFinancialInstitutionItem: {
            /**
             * Id
             * @description Unique identifier of the financial institution
             */
            id: string;
            /**
             * Bic
             * @description BIC of the financial institution
             */
            bic?: string | null;
            /**
             * Country
             * @description Country of the financial institution, format: ISO 3166-1 codes.
             */
            country?: string | null;
            /**
             * Name
             * @description Name of the financial institution
             */
            name: string;
        };
        /** BankingTransactionItem */
        BankingTransactionItem: {
            /**
             * Id
             * @description Unique identifier of the transaction
             */
            id: string;
            /**
             * Amount
             * @description Amount of the transaction
             */
            amount: number;
            /**
             * Currency
             * @description Currency of the transaction
             */
            currency: string;
            /**
             * Description
             * @description Description of the transaction
             */
            description?: string | null;
            /**
             * Additional Information
             * @description Additional information of the transaction
             */
            additional_information?: string | null;
            /**
             * Counterpart Name
             * @description Name of the counterpart
             */
            counterpart_name?: string | null;
            /**
             * Counterpart Reference
             * @description Reference of the counterpart
             */
            counterpart_reference?: string | null;
            /**
             * Remittance Information
             * @description Remittance information of the transaction
             */
            remittance_information?: string | null;
            /**
             * Creation Date
             * Format: date-time
             * @description Creation date of the transaction
             */
            creation_date: string;
            /**
             * Value Date
             * Format: date-time
             * @description Value date of the transaction
             */
            value_date: string;
            /**
             * Execution Date
             * Format: date-time
             * @description Execution date of the transaction
             */
            execution_date: string;
        };
        /** BookYear */
        BookYear: {
            /** Name */
            name: string;
            /**
             * Start
             * Format: date
             */
            start: string;
            /**
             * End
             * Format: date
             */
            end: string;
            /** Closed */
            closed: boolean;
        };
        /**
         * BoolParam
         * @enum {string}
         */
        BoolParam: 'true' | 'false';
        /** CategoryItem */
        CategoryItem: {
            /**
             * Id
             * @description Technical id in Chift
             */
            id: string;
            /** @description Technical id in the target software */
            source_ref: components['schemas']['Ref'];
            /** Name */
            name: string;
            /**
             * Parent Id
             * @description Technical id of the parent category in the target software
             */
            parent_id?: string | null;
        };
        /** ChainExecutionItem */
        ChainExecutionItem: {
            /** Id */
            id: string;
            /**
             * Start
             * Format: date-time
             */
            start: string;
            /** End */
            end: string | null;
            /** Status */
            status: string;
        };
        /** ChiftError */
        ChiftError: {
            /** Message */
            message: string;
            /**
             * Status
             * @default error
             */
            status: string | null;
            /**
             * Detail
             * @default
             */
            detail: string | null;
        };
        /** ChiftId */
        ChiftId: {
            /**
             * Id
             * @description Technical id in Chift
             */
            id: string;
            /** @description Technical id in the target software */
            source_ref: components['schemas']['Ref'];
        };
        /** ChiftPage[AccountBalance] */
        ChiftPage_AccountBalance_: {
            /** Items */
            items: components['schemas']['AccountBalance'][];
            /** Total */
            total?: number | null;
            /** Page */
            page: number;
            /** Size */
            size: number;
        };
        /** ChiftPage[AccountItem] */
        ChiftPage_AccountItem_: {
            /** Items */
            items: components['schemas']['AccountItem'][];
            /** Total */
            total?: number | null;
            /** Page */
            page: number;
            /** Size */
            size: number;
        };
        /** ChiftPage[AccountingCategoryItem] */
        ChiftPage_AccountingCategoryItem_: {
            /** Items */
            items: components['schemas']['AccountingCategoryItem'][];
            /** Total */
            total?: number | null;
            /** Page */
            page: number;
            /** Size */
            size: number;
        };
        /** ChiftPage[AccountingVatCode] */
        ChiftPage_AccountingVatCode_: {
            /** Items */
            items: components['schemas']['AccountingVatCode'][];
            /** Total */
            total?: number | null;
            /** Page */
            page: number;
            /** Size */
            size: number;
        };
        /** ChiftPage[AnalyticAccountItemOutMultiAnalyticPlans] */
        ChiftPage_AnalyticAccountItemOutMultiAnalyticPlans_: {
            /** Items */
            items: components['schemas']['AnalyticAccountItemOutMultiAnalyticPlans'][];
            /** Total */
            total?: number | null;
            /** Page */
            page: number;
            /** Size */
            size: number;
        };
        /** ChiftPage[AnalyticAccountItemOut] */
        ChiftPage_AnalyticAccountItemOut_: {
            /** Items */
            items: components['schemas']['AnalyticAccountItemOut'][];
            /** Total */
            total?: number | null;
            /** Page */
            page: number;
            /** Size */
            size: number;
        };
        /** ChiftPage[AnalyticPlanItem] */
        ChiftPage_AnalyticPlanItem_: {
            /** Items */
            items: components['schemas']['AnalyticPlanItem'][];
            /** Total */
            total?: number | null;
            /** Page */
            page: number;
            /** Size */
            size: number;
        };
        /** ChiftPage[AttachmentItemOut] */
        ChiftPage_AttachmentItemOut_: {
            /** Items */
            items: components['schemas']['AttachmentItemOut'][];
            /** Total */
            total?: number | null;
            /** Page */
            page: number;
            /** Size */
            size: number;
        };
        /** ChiftPage[BalanceItemOut] */
        ChiftPage_BalanceItemOut_: {
            /** Items */
            items: components['schemas']['BalanceItemOut'][];
            /** Total */
            total?: number | null;
            /** Page */
            page: number;
            /** Size */
            size: number;
        };
        /** ChiftPage[BankingAccountItem] */
        ChiftPage_BankingAccountItem_: {
            /** Items */
            items: components['schemas']['BankingAccountItem'][];
            /** Total */
            total?: number | null;
            /** Page */
            page: number;
            /** Size */
            size: number;
        };
        /** ChiftPage[BankingCounterPartItem] */
        ChiftPage_BankingCounterPartItem_: {
            /** Items */
            items: components['schemas']['BankingCounterPartItem'][];
            /** Total */
            total?: number | null;
            /** Page */
            page: number;
            /** Size */
            size: number;
        };
        /** ChiftPage[BankingFinancialInstitutionItem] */
        ChiftPage_BankingFinancialInstitutionItem_: {
            /** Items */
            items: components['schemas']['BankingFinancialInstitutionItem'][];
            /** Total */
            total?: number | null;
            /** Page */
            page: number;
            /** Size */
            size: number;
        };
        /** ChiftPage[BankingTransactionItem] */
        ChiftPage_BankingTransactionItem_: {
            /** Items */
            items: components['schemas']['BankingTransactionItem'][];
            /** Total */
            total?: number | null;
            /** Page */
            page: number;
            /** Size */
            size: number;
        };
        /** ChiftPage[BookYear] */
        ChiftPage_BookYear_: {
            /** Items */
            items: components['schemas']['BookYear'][];
            /** Total */
            total?: number | null;
            /** Page */
            page: number;
            /** Size */
            size: number;
        };
        /** ChiftPage[CategoryItem] */
        ChiftPage_CategoryItem_: {
            /** Items */
            items: components['schemas']['CategoryItem'][];
            /** Total */
            total?: number | null;
            /** Page */
            page: number;
            /** Size */
            size: number;
        };
        /** ChiftPage[ClientItemOut] */
        ChiftPage_ClientItemOut_: {
            /** Items */
            items: components['schemas']['ClientItemOut'][];
            /** Total */
            total?: number | null;
            /** Page */
            page: number;
            /** Size */
            size: number;
        };
        /** ChiftPage[CommerceCustomerItem] */
        ChiftPage_CommerceCustomerItem_: {
            /** Items */
            items: components['schemas']['CommerceCustomerItem'][];
            /** Total */
            total?: number | null;
            /** Page */
            page: number;
            /** Size */
            size: number;
        };
        /** ChiftPage[CommerceLocationItemOut] */
        ChiftPage_CommerceLocationItemOut_: {
            /** Items */
            items: components['schemas']['CommerceLocationItemOut'][];
            /** Total */
            total?: number | null;
            /** Page */
            page: number;
            /** Size */
            size: number;
        };
        /** ChiftPage[ContactItemOut] */
        ChiftPage_ContactItemOut_: {
            /** Items */
            items: components['schemas']['ContactItemOut'][];
            /** Total */
            total?: number | null;
            /** Page */
            page: number;
            /** Size */
            size: number;
        };
        /** ChiftPage[CountryItem] */
        ChiftPage_CountryItem_: {
            /** Items */
            items: components['schemas']['CountryItem'][];
            /** Total */
            total?: number | null;
            /** Page */
            page: number;
            /** Size */
            size: number;
        };
        /** ChiftPage[EmployeeItem] */
        ChiftPage_EmployeeItem_: {
            /** Items */
            items: components['schemas']['EmployeeItem'][];
            /** Total */
            total?: number | null;
            /** Page */
            page: number;
            /** Size */
            size: number;
        };
        /** ChiftPage[InvoiceItemOutMonoAnalyticPlan] */
        ChiftPage_InvoiceItemOutMonoAnalyticPlan_: {
            /** Items */
            items: components['schemas']['InvoiceItemOutMonoAnalyticPlan'][];
            /** Total */
            total?: number | null;
            /** Page */
            page: number;
            /** Size */
            size: number;
        };
        /** ChiftPage[InvoiceItemOutMultiAnalyticPlans] */
        ChiftPage_InvoiceItemOutMultiAnalyticPlans_: {
            /** Items */
            items: components['schemas']['InvoiceItemOutMultiAnalyticPlans'][];
            /** Total */
            total?: number | null;
            /** Page */
            page: number;
            /** Size */
            size: number;
        };
        /** ChiftPage[InvoiceItemOut] */
        ChiftPage_InvoiceItemOut_: {
            /** Items */
            items: components['schemas']['InvoiceItemOut'][];
            /** Total */
            total?: number | null;
            /** Page */
            page: number;
            /** Size */
            size: number;
        };
        /** ChiftPage[InvoicingPaymentItem] */
        ChiftPage_InvoicingPaymentItem_: {
            /** Items */
            items: components['schemas']['InvoicingPaymentItem'][];
            /** Total */
            total?: number | null;
            /** Page */
            page: number;
            /** Size */
            size: number;
        };
        /** ChiftPage[InvoicingPaymentMethodItem] */
        ChiftPage_InvoicingPaymentMethodItem_: {
            /** Items */
            items: components['schemas']['InvoicingPaymentMethodItem'][];
            /** Total */
            total?: number | null;
            /** Page */
            page: number;
            /** Size */
            size: number;
        };
        /** ChiftPage[InvoicingVatCode] */
        ChiftPage_InvoicingVatCode_: {
            /** Items */
            items: components['schemas']['InvoicingVatCode'][];
            /** Total */
            total?: number | null;
            /** Page */
            page: number;
            /** Size */
            size: number;
        };
        /** ChiftPage[JournalEntryMonoAnalyticPlan] */
        ChiftPage_JournalEntryMonoAnalyticPlan_: {
            /** Items */
            items: components['schemas']['JournalEntryMonoAnalyticPlan'][];
            /** Total */
            total?: number | null;
            /** Page */
            page: number;
            /** Size */
            size: number;
        };
        /** ChiftPage[JournalEntryMultiAnalyticPlan] */
        ChiftPage_JournalEntryMultiAnalyticPlan_: {
            /** Items */
            items: components['schemas']['JournalEntryMultiAnalyticPlan'][];
            /** Total */
            total?: number | null;
            /** Page */
            page: number;
            /** Size */
            size: number;
        };
        /** ChiftPage[Journal] */
        ChiftPage_Journal_: {
            /** Items */
            items: components['schemas']['Journal'][];
            /** Total */
            total?: number | null;
            /** Page */
            page: number;
            /** Size */
            size: number;
        };
        /** ChiftPage[MiscellaneousOperationOut] */
        ChiftPage_MiscellaneousOperationOut_: {
            /** Items */
            items: components['schemas']['MiscellaneousOperationOut'][];
            /** Total */
            total?: number | null;
            /** Page */
            page: number;
            /** Size */
            size: number;
        };
        /** ChiftPage[OpportunityItem] */
        ChiftPage_OpportunityItem_: {
            /** Items */
            items: components['schemas']['OpportunityItem'][];
            /** Total */
            total?: number | null;
            /** Page */
            page: number;
            /** Size */
            size: number;
        };
        /** ChiftPage[OrderItemOut] */
        ChiftPage_OrderItemOut_: {
            /** Items */
            items: components['schemas']['OrderItemOut'][];
            /** Total */
            total?: number | null;
            /** Page */
            page: number;
            /** Size */
            size: number;
        };
        /** ChiftPage[OutstandingItem] */
        ChiftPage_OutstandingItem_: {
            /** Items */
            items: components['schemas']['OutstandingItem'][];
            /** Total */
            total?: number | null;
            /** Page */
            page: number;
            /** Size */
            size: number;
        };
        /** ChiftPage[PMSAccountingCategoryItem] */
        ChiftPage_PMSAccountingCategoryItem_: {
            /** Items */
            items: components['schemas']['PMSAccountingCategoryItem'][];
            /** Total */
            total?: number | null;
            /** Page */
            page: number;
            /** Size */
            size: number;
        };
        /** ChiftPage[PMSCustomerItem] */
        ChiftPage_PMSCustomerItem_: {
            /** Items */
            items: components['schemas']['PMSCustomerItem'][];
            /** Total */
            total?: number | null;
            /** Page */
            page: number;
            /** Size */
            size: number;
        };
        /** ChiftPage[PMSInvoiceFullItem] */
        ChiftPage_PMSInvoiceFullItem_: {
            /** Items */
            items: components['schemas']['PMSInvoiceFullItem'][];
            /** Total */
            total?: number | null;
            /** Page */
            page: number;
            /** Size */
            size: number;
        };
        /** ChiftPage[PMSLocationItem] */
        ChiftPage_PMSLocationItem_: {
            /** Items */
            items: components['schemas']['PMSLocationItem'][];
            /** Total */
            total?: number | null;
            /** Page */
            page: number;
            /** Size */
            size: number;
        };
        /** ChiftPage[PMSOrderItem] */
        ChiftPage_PMSOrderItem_: {
            /** Items */
            items: components['schemas']['PMSOrderItem'][];
            /** Total */
            total?: number | null;
            /** Page */
            page: number;
            /** Size */
            size: number;
        };
        /** ChiftPage[PMSPaymentItem] */
        ChiftPage_PMSPaymentItem_: {
            /** Items */
            items: components['schemas']['PMSPaymentItem'][];
            /** Total */
            total?: number | null;
            /** Page */
            page: number;
            /** Size */
            size: number;
        };
        /** ChiftPage[PMSPaymentMethods] */
        ChiftPage_PMSPaymentMethods_: {
            /** Items */
            items: components['schemas']['PMSPaymentMethods'][];
            /** Total */
            total?: number | null;
            /** Page */
            page: number;
            /** Size */
            size: number;
        };
        /** ChiftPage[PMSTaxRateItem] */
        ChiftPage_PMSTaxRateItem_: {
            /** Items */
            items: components['schemas']['PMSTaxRateItem'][];
            /** Total */
            total?: number | null;
            /** Page */
            page: number;
            /** Size */
            size: number;
        };
        /** ChiftPage[POSCustomerItem] */
        ChiftPage_POSCustomerItem_: {
            /** Items */
            items: components['schemas']['POSCustomerItem'][];
            /** Total */
            total?: number | null;
            /** Page */
            page: number;
            /** Size */
            size: number;
        };
        /** ChiftPage[POSLocationItem] */
        ChiftPage_POSLocationItem_: {
            /** Items */
            items: components['schemas']['POSLocationItem'][];
            /** Total */
            total?: number | null;
            /** Page */
            page: number;
            /** Size */
            size: number;
        };
        /** ChiftPage[POSOrderItem] */
        ChiftPage_POSOrderItem_: {
            /** Items */
            items: components['schemas']['POSOrderItem'][];
            /** Total */
            total?: number | null;
            /** Page */
            page: number;
            /** Size */
            size: number;
        };
        /** ChiftPage[POSPaymentItem] */
        ChiftPage_POSPaymentItem_: {
            /** Items */
            items: components['schemas']['POSPaymentItem'][];
            /** Total */
            total?: number | null;
            /** Page */
            page: number;
            /** Size */
            size: number;
        };
        /** ChiftPage[POSProductItem] */
        ChiftPage_POSProductItem_: {
            /** Items */
            items: components['schemas']['POSProductItem'][];
            /** Total */
            total?: number | null;
            /** Page */
            page: number;
            /** Size */
            size: number;
        };
        /** ChiftPage[PaymentItemOut] */
        ChiftPage_PaymentItemOut_: {
            /** Items */
            items: components['schemas']['PaymentItemOut'][];
            /** Total */
            total?: number | null;
            /** Page */
            page: number;
            /** Size */
            size: number;
        };
        /** ChiftPage[PaymentMethodItem] */
        ChiftPage_PaymentMethodItem_: {
            /** Items */
            items: components['schemas']['PaymentMethodItem'][];
            /** Total */
            total?: number | null;
            /** Page */
            page: number;
            /** Size */
            size: number;
        };
        /** ChiftPage[PaymentMethods] */
        ChiftPage_PaymentMethods_: {
            /** Items */
            items: components['schemas']['PaymentMethods'][];
            /** Total */
            total?: number | null;
            /** Page */
            page: number;
            /** Size */
            size: number;
        };
        /** ChiftPage[Payment] */
        ChiftPage_Payment_: {
            /** Items */
            items: components['schemas']['Payment'][];
            /** Total */
            total?: number | null;
            /** Page */
            page: number;
            /** Size */
            size: number;
        };
        /** ChiftPage[ProductCategoryItem] */
        ChiftPage_ProductCategoryItem_: {
            /** Items */
            items: components['schemas']['backbone_common__models__pos__common__ProductCategoryItem'][];
            /** Total */
            total?: number | null;
            /** Page */
            page: number;
            /** Size */
            size: number;
        };
        /** ChiftPage[ProductItemOut] */
        ChiftPage_ProductItemOut_: {
            /** Items */
            items: components['schemas']['ProductItemOut'][];
            /** Total */
            total?: number | null;
            /** Page */
            page: number;
            /** Size */
            size: number;
        };
        /** ChiftPage[ProductItem] */
        ChiftPage_ProductItem_: {
            /** Items */
            items: components['schemas']['ProductItem-Output'][];
            /** Total */
            total?: number | null;
            /** Page */
            page: number;
            /** Size */
            size: number;
        };
        /** ChiftPage[RefundItemOut] */
        ChiftPage_RefundItemOut_: {
            /** Items */
            items: components['schemas']['RefundItemOut'][];
            /** Total */
            total?: number | null;
            /** Page */
            page: number;
            /** Size */
            size: number;
        };
        /** ChiftPage[SupplierItemOut] */
        ChiftPage_SupplierItemOut_: {
            /** Items */
            items: components['schemas']['SupplierItemOut'][];
            /** Total */
            total?: number | null;
            /** Page */
            page: number;
            /** Size */
            size: number;
        };
        /** ChiftPage[TaxRateItem] */
        ChiftPage_TaxRateItem_: {
            /** Items */
            items: components['schemas']['TaxRateItem'][];
            /** Total */
            total?: number | null;
            /** Page */
            page: number;
            /** Size */
            size: number;
        };
        /** ChiftPage[TransactionItemOut] */
        ChiftPage_TransactionItemOut_: {
            /** Items */
            items: components['schemas']['TransactionItemOut'][];
            /** Total */
            total?: number | null;
            /** Page */
            page: number;
            /** Size */
            size: number;
        };
        /** ClientItemIn */
        ClientItemIn: {
            /** External Reference */
            external_reference?: string | null;
            /**
             * First Name
             * @description Only used when the client is an individual (is_company=false). Indicates the first name of the client.
             */
            first_name?: string | null;
            /**
             * Last Name
             * @description Only used when the client is an individual (is_company=false). Indicates the last name of the client.
             */
            last_name?: string | null;
            /** Name */
            name: string;
            /**
             * Function
             * @description Only used when the client is an individual (is_company=false). Indicates the function of the client.
             */
            function?: string | null;
            /**
             * Is Company
             * @description Indicates if the client is an individual or a company.
             * @default true
             */
            is_company: boolean | null;
            /**
             * Company Id
             * @description Only used when the client is an individual (is_company=false). Indicates the id of the company linked to the client.
             */
            company_id?: string | null;
            /** Phone */
            phone?: string | null;
            /** Mobile */
            mobile?: string | null;
            /** Email */
            email?: string | null;
            /**
             * Language
             * @description Format: ISO 639-1 codes.
             */
            language?: string | null;
            /** Internal Notes */
            internal_notes?: string | null;
            /** Website */
            website?: string | null;
            /** Vat */
            vat?: string | null;
            /**
             * Iban
             * @description IBAN Account number of the client.
             */
            iban?: string | null;
            /**
             * Bank Account
             * @description Bank account number of the client.
             */
            bank_account?: string | null;
            /**
             * Currency
             * @description Indicates the currency of the client (e.g. EUR).
             */
            currency?: string | null;
            /**
             * Active
             * @default true
             */
            active: boolean | null;
            /** Addresses */
            addresses: components['schemas']['backbone_common__models__common__AddressItemIn'][];
            /** Account Number */
            account_number?: string | null;
        };
        /** ClientItemOut */
        ClientItemOut: {
            /** External Reference */
            external_reference?: string | null;
            /**
             * First Name
             * @description Only used when the client is an individual (is_company=false). Indicates the first name of the client.
             */
            first_name?: string | null;
            /**
             * Last Name
             * @description Only used when the client is an individual (is_company=false). Indicates the last name of the client.
             */
            last_name?: string | null;
            /** Name */
            name?: string | null;
            /**
             * Function
             * @description Only used when the client is an individual (is_company=false). Indicates the function of the client.
             */
            function?: string | null;
            /**
             * Is Company
             * @description Indicates if the client is an individual or a company.
             * @default true
             */
            is_company: boolean | null;
            /**
             * Company Id
             * @description Only used when the client is an individual (is_company=false). Indicates the id of the company linked to the client.
             */
            company_id?: string | null;
            /** Phone */
            phone?: string | null;
            /** Mobile */
            mobile?: string | null;
            /** Email */
            email?: string | null;
            /**
             * Language
             * @description Format: ISO 639-1 codes.
             */
            language?: string | null;
            /** Internal Notes */
            internal_notes?: string | null;
            /** Website */
            website?: string | null;
            /** Vat */
            vat?: string | null;
            /**
             * Iban
             * @description IBAN Account number of the client.
             */
            iban?: string | null;
            /**
             * Bank Account
             * @description Bank account number of the client.
             */
            bank_account?: string | null;
            /**
             * Currency
             * @description Indicates the currency of the client (e.g. EUR).
             */
            currency?: string | null;
            /**
             * Active
             * @default true
             */
            active: boolean | null;
            /** Account Number */
            account_number?: string | null;
            /** Company Number */
            company_number?: string | null;
            /** Id */
            id?: string | null;
            /**
             * Last Updated On
             * @description The last time the client has been updated.
             */
            last_updated_on?: string | null;
            /**
             * Addresses
             * @default []
             */
            addresses:
                | components['schemas']['backbone_common__models__common__AddressItemOut'][]
                | null;
        };
        /** ClientItemUpdate */
        ClientItemUpdate: {
            /** External Reference */
            external_reference?: string | null;
            /**
             * First Name
             * @description Only used when the client is an individual (is_company=false). Indicates the first name of the client.
             */
            first_name?: string | null;
            /**
             * Last Name
             * @description Only used when the client is an individual (is_company=false). Indicates the last name of the client.
             */
            last_name?: string | null;
            /** Name */
            name?: string | null;
            /**
             * Function
             * @description Only used when the client is an individual (is_company=false). Indicates the function of the client.
             */
            function?: string | null;
            /**
             * Is Company
             * @description Indicates if the client is an individual or a company.
             * @default true
             */
            is_company: boolean | null;
            /**
             * Company Id
             * @description Only used when the client is an individual (is_company=false). Indicates the id of the company linked to the client.
             */
            company_id?: string | null;
            /** Phone */
            phone?: string | null;
            /** Mobile */
            mobile?: string | null;
            /** Email */
            email?: string | null;
            /**
             * Language
             * @description Format: ISO 639-1 codes.
             */
            language?: string | null;
            /** Internal Notes */
            internal_notes?: string | null;
            /** Website */
            website?: string | null;
            /** Vat */
            vat?: string | null;
            /**
             * Iban
             * @description IBAN Account number of the client.
             */
            iban?: string | null;
            /**
             * Bank Account
             * @description Bank account number of the client.
             */
            bank_account?: string | null;
            /**
             * Currency
             * @description Indicates the currency of the client (e.g. EUR).
             */
            currency?: string | null;
            /**
             * Active
             * @default true
             */
            active: boolean | null;
            /**
             * Addresses
             * @default []
             */
            addresses: components['schemas']['AddressItemOut-Input'][] | null;
        };
        /** ClosureItem */
        ClosureItem: {
            /**
             * Date
             * Format: date
             * @description Date of the closure
             */
            date: string;
            /** @description Status of the closure */
            status: components['schemas']['ClosureStates'];
            /**
             * Closures
             * @description Info about closures related to specific day
             * @default []
             */
            closures: components['schemas']['POSClosureInformationItem'][] | null;
        };
        /** ClosurePaymentItem */
        ClosurePaymentItem: {
            /**
             * Payment Method Id
             * @description Unique identifier of the payment method used for the payment
             */
            payment_method_id?: string | null;
            /**
             * Payment Method Name
             * @description Chift's name of the payment method used for the payment
             */
            payment_method_name?: string | null;
            /**
             * Total
             * @description Total amount including tax
             */
            total: number;
        };
        /**
         * ClosureStates
         * @enum {string}
         */
        ClosureStates: 'open' | 'closed';
        /** CommerceCustomerItem */
        CommerceCustomerItem: {
            /**
             * Id
             * @description Technical id in Chift
             */
            id: string;
            /** @description Technical id in the target software */
            source_ref: components['schemas']['Ref'];
            /** First Name */
            first_name?: string | null;
            /** Last Name */
            last_name?: string | null;
            /** Phone */
            phone?: string | null;
            /** Email */
            email?: string | null;
            /**
             * Language
             * @description Format: ISO 639-1 codes.
             */
            language?: string | null;
            /** Internal Notes */
            internal_notes?: string | null;
            /**
             * Currency
             * @description Indicates the currency of the client (e.g. EUR).
             */
            currency?: string | null;
            /**
             * Addresses
             * @default []
             */
            addresses:
                | components['schemas']['backbone_common__models__commerce__common__AddressItemOut'][]
                | null;
            /** Created On */
            created_on?: string | null;
        };
        /** CommerceLocationItem */
        CommerceLocationItem: {
            /**
             * Id
             * @description Technical id of the location in Chift
             */
            id: string;
            /** Name */
            name: string;
        };
        /** CommerceLocationItemOut */
        CommerceLocationItemOut: {
            /**
             * Id
             * @description Technical id of the location in Chift
             */
            id: string;
            /** Name */
            name: string;
            /** @description Technical id of the location in the target software */
            source_ref?: components['schemas']['Ref'] | null;
        };
        /** CommonAttributeItem */
        CommonAttributeItem: {
            /** Name */
            name: string;
            /** Values */
            values: string[];
        };
        /** ConnectionItem */
        'ConnectionItem-Input': {
            /** One Api */
            one_api?: number | null;
            /** Connection Type */
            connection_type?: number | null;
            /**
             * Display Order
             * @default 0
             */
            display_order: number;
            /**
             * Display Hidden
             * @default false
             */
            display_hidden: boolean;
        };
        /** ConsumerItem */
        ConsumerItem: {
            /**
             * Consumerid
             * Format: uuid
             */
            consumerid: string;
            /** Name */
            name: string;
            /** Email */
            email?: string | null;
            /** Internal Reference */
            internal_reference?: string | null;
            /** Redirect Url */
            redirect_url?: string | null;
        };
        /**
         * ContactGender
         * @enum {string}
         */
        ContactGender: 'H' | 'F' | 'N/A';
        /** ContactItemIn */
        ContactItemIn: {
            /**
             * Is Prospect
             * @description Is a prospect?
             */
            is_prospect?: boolean | null;
            /**
             * Is Customer
             * @description Is a customer?
             */
            is_customer?: boolean | null;
            /**
             * Is Supplier
             * @description Is a supplier?
             */
            is_supplier?: boolean | null;
            /**
             * Is Company
             * @description Is a company?
             */
            is_company?: boolean | null;
            /**
             * Company Name
             * @description Name of the company
             */
            company_name?: string | null;
            /**
             * First Name
             * @description Firstname
             */
            first_name?: string | null;
            /**
             * Last Name
             * @description Lastname
             */
            last_name?: string | null;
            /**
             * Email
             * @description Email
             */
            email?: string | null;
            /**
             * Phone
             * @description Phone
             */
            phone?: string | null;
            /**
             * Mobile
             * @description Mobile
             */
            mobile?: string | null;
            /**
             * Company Id
             * @description Technical id of the contact' company in Chift
             */
            company_id?: string | null;
            /**
             * Vat
             * @description VAT number
             */
            vat?: string | null;
            /**
             * Company Number
             * @description Company number (identification number different than the VAT (e.g. siret))
             */
            company_number?: string | null;
            /**
             * Currency
             * @description Currency matching target sofware name
             */
            currency?: string | null;
            /**
             * Language
             * @description Language matching target sofware name
             */
            language?: string | null;
            /**
             * Comment
             * @description Comment
             */
            comment?: string | null;
            /**
             * Customer Account Number
             * @description Number of the accounting account used for sales (e.g. 701000)
             */
            customer_account_number?: string | null;
            /**
             * Supplier Account Number
             * @description Number of the accounting account used for purchases (e.g. 601000)
             */
            supplier_account_number?: string | null;
            /**
             * Birthdate
             * @description Birthdate
             */
            birthdate?: string | null;
            /** @description Gender */
            gender?: components['schemas']['ContactGender'] | null;
            /**
             * Addresses
             * @description Addresses
             * @default []
             */
            addresses: components['schemas']['AddressItemInInvoicing'][] | null;
        };
        /** ContactItemOut */
        ContactItemOut: {
            /**
             * Id
             * @description Technical id in Chift
             */
            id: string;
            /** @description Technical id in the target software */
            source_ref: components['schemas']['Ref'];
            /**
             * Is Prospect
             * @description Is a prospect?
             */
            is_prospect?: boolean | null;
            /**
             * Is Customer
             * @description Is a customer?
             */
            is_customer?: boolean | null;
            /**
             * Is Supplier
             * @description Is a supplier?
             */
            is_supplier?: boolean | null;
            /**
             * Is Company
             * @description Is a company?
             */
            is_company?: boolean | null;
            /**
             * Company Name
             * @description Name of the company
             */
            company_name?: string | null;
            /**
             * First Name
             * @description Firstname
             */
            first_name?: string | null;
            /**
             * Last Name
             * @description Lastname
             */
            last_name?: string | null;
            /**
             * Email
             * @description Email
             */
            email?: string | null;
            /**
             * Phone
             * @description Phone
             */
            phone?: string | null;
            /**
             * Mobile
             * @description Mobile
             */
            mobile?: string | null;
            /**
             * Company Id
             * @description Technical id of the contact' company in Chift
             */
            company_id?: string | null;
            /**
             * Vat
             * @description VAT number
             */
            vat?: string | null;
            /**
             * Company Number
             * @description Company number (identification number different than the VAT (e.g. siret))
             */
            company_number?: string | null;
            /**
             * Currency
             * @description Currency matching target sofware name
             */
            currency?: string | null;
            /**
             * Language
             * @description Language matching target sofware name
             */
            language?: string | null;
            /**
             * Comment
             * @description Comment
             */
            comment?: string | null;
            /**
             * Customer Account Number
             * @description Number of the accounting account used for sales (e.g. 701000)
             */
            customer_account_number?: string | null;
            /**
             * Supplier Account Number
             * @description Number of the accounting account used for purchases (e.g. 601000)
             */
            supplier_account_number?: string | null;
            /**
             * Birthdate
             * @description Birthdate
             */
            birthdate?: string | null;
            /** @description Gender */
            gender?: components['schemas']['ContactGender'] | null;
            /**
             * Addresses
             * @description Addresses
             * @default []
             */
            addresses: components['schemas']['AddressItemOutInvoicing'][] | null;
            /**
             * External Reference
             * @description External reference of the contact in the invoicing system
             */
            external_reference?: string | null;
        };
        /**
         * ContactType
         * @enum {string}
         */
        ContactType: 'prospect' | 'customer' | 'supplier' | 'all';
        /** CountryItem */
        CountryItem: {
            /**
             * Code
             * @description Country ISO Code
             */
            code: string;
            /** Name */
            name: string;
        };
        /** CreateConsumerSyncItem */
        CreateConsumerSyncItem: {
            /**
             * Syncid
             * Format: uuid
             */
            syncid: string;
            /**
             * Integrationids
             * @description [OPTIONAL] Can be used to specify maximum one integrationid for each One API that you want to highlight. If specified, only this connector will be displayed to your clients.
             * @default []
             */
            integrationids: string[] | null;
            /**
             * Country
             * @description ISO 3166-1 alpha-2 country code to filter connectors by country. Ignored if integrationids are provided.
             */
            country?: string | null;
            /** Link Metadata */
            link_metadata?: {
                [key: string]: unknown;
            } | null;
        };
        /** CreateFlowItem */
        CreateFlowItem: {
            /** Name */
            name: string;
            /** Description */
            description?: string | null;
            execution: components['schemas']['FlowExecution'];
            /** @default {
             *       "datastores": []
             *     } */
            config: components['schemas']['FlowConfig-Input'] | null;
            /** Triggers */
            triggers: components['schemas']['FlowTrigger'][];
        };
        /** CreateSyncItem */
        CreateSyncItem: {
            /** Name */
            name: string;
            /** Connections */
            connections: components['schemas']['ConnectionItem-Input'][];
            /**
             * Mappings
             * @default []
             */
            mappings: components['schemas']['CreateSyncMappingItem-Input'][];
            /**
             * Flows
             * @default []
             */
            flows: components['schemas']['CreateFlowItem'][];
        };
        /** CreateSyncMappingItem */
        'CreateSyncMappingItem-Input': {
            /** Name */
            name: string;
            /** Description */
            description?: string | null;
            /**
             * Display Order
             * @default 0
             */
            display_order: number;
            /** Challenge Question */
            challenge_question?: string | null;
            /**
             * Sub Mappings
             * @default []
             */
            sub_mappings: components['schemas']['CreateSyncMappingToFieldItem-Input'][];
        };
        /** CreateSyncMappingItem */
        'CreateSyncMappingItem-Output': {
            /** Name */
            name: string;
            /** Description */
            description?: string | null;
            /**
             * Display Order
             * @default 0
             */
            display_order: number;
            /** Challenge Question */
            challenge_question?: string | null;
            /**
             * Sub Mappings
             * @default []
             */
            sub_mappings: components['schemas']['CreateSyncMappingToFieldItem-Output'][];
        };
        /** CreateSyncMappingToFieldItem */
        'CreateSyncMappingToFieldItem-Input': {
            /** Name */
            name: string;
            /** Description */
            description?: string | null;
            /**
             * Display Order
             * @default 0
             */
            display_order: number;
            /** Challenge Question */
            challenge_question?: string | null;
            source_field: components['schemas']['FieldItem'];
            target_field: components['schemas']['FieldItem'];
            /**
             * Display Delete
             * @default false
             */
            display_delete: boolean;
            /** Logic */
            logic?: {
                [key: string]: unknown;
            } | null;
        };
        /** CreateSyncMappingToFieldItem */
        'CreateSyncMappingToFieldItem-Output': {
            /** Name */
            name: string;
            /** Description */
            description?: string | null;
            /**
             * Display Order
             * @default 0
             */
            display_order: number;
            /** Challenge Question */
            challenge_question?: string | null;
            source_field: components['schemas']['FieldItem'];
            target_field: components['schemas']['FieldItem'];
            /**
             * Display Delete
             * @default false
             */
            display_delete: boolean;
            /** Logic */
            logic?: {
                [key: string]: unknown;
            } | null;
        };
        /** CredentialItem */
        'CredentialItem-Input': {
            /** Key */
            key: string;
            /** Value */
            value: string;
        };
        /** CredentialItem */
        'CredentialItem-Output': {
            /** Name */
            name: string;
            /**
             * Optional
             * @default false
             */
            optional: boolean;
        };
        /** DataItem */
        DataItem: {
            /** Data */
            data: {
                [key: string]: unknown;
            };
        };
        /** DataItemOut */
        DataItemOut: {
            /** Data */
            data: {
                [key: string]: unknown;
            };
            /** Id */
            id: string;
            /**
             * Created On
             * Format: date-time
             */
            created_on: string;
        };
        /** DataStoreItem */
        DataStoreItem: {
            /** Id */
            id: string;
            /** Name */
            name: string;
            /** @default active */
            status: components['schemas']['Status'] | null;
            definition: components['schemas']['DatastoreDef'];
        };
        /** DatastoreColumn */
        DatastoreColumn: {
            /** Name */
            name: string;
            /** Title */
            title: string;
            /** Type */
            type: string;
            /**
             * Optional
             * @default false
             */
            optional: boolean | null;
        };
        /** DatastoreDef */
        DatastoreDef: {
            /** Columns */
            columns: components['schemas']['DatastoreColumn'][];
            /**
             * Search Column
             * @description Column name that will be indexed and used in search if any.
             */
            search_column?: string | null;
        };
        /**
         * DiscountType
         * @enum {string}
         */
        DiscountType: 'OFFERED' | 'UNKNOWN' | 'LOSS';
        /**
         * DocumentType
         * @enum {string}
         */
        DocumentType: 'invoice' | 'entry';
        /** EmployeeItem */
        EmployeeItem: {
            /** Id */
            id: string;
            /** Name */
            name: string;
            /** First Name */
            first_name?: string | null;
            /** Last Name */
            last_name?: string | null;
            /** Function */
            function?: string | null;
            /** Phone */
            phone?: string | null;
            /** Mobile */
            mobile?: string | null;
            /** Email */
            email?: string | null;
            /**
             * Active
             * @default true
             */
            active: boolean | null;
            /** Reference */
            reference?: string | null;
            /** Account Number */
            account_number?: string | null;
        };
        /** EnableFlowConsumer */
        EnableFlowConsumer: {
            /**
             * Integrationids
             * @description List of integrationids of the connections that will be used to enable the flow
             * @default []
             */
            integrationids: string[];
            /**
             * Triggerid
             * @default trigger-1
             */
            triggerid: string | null;
            /** Cronschedule */
            cronschedule?: string | null;
            /**
             * Data
             * @description Object containing the configuration of the flow for the consumer
             * @default {}
             */
            data: {
                [key: string]: unknown;
            } | null;
        };
        /**
         * EntryLineType
         * @enum {string}
         */
        EntryLineType:
            | 'customer_account'
            | 'supplier_account'
            | 'employee_account'
            | 'general_account';
        /** ErrorInfo */
        ErrorInfo: {
            /** Error Code */
            error_code: string;
            /** Status */
            status: string;
            /** Title */
            title: string;
            /** Description */
            description?: string;
        };
        /**
         * ExecutionType
         * @enum {string}
         */
        ExecutionType: 'code' | 'module';
        /** FECItemOut */
        FECItemOut: {
            /** Journalcode */
            JournalCode: string;
            /** Journallib */
            JournalLib: string;
            /** Ecriturenum */
            EcritureNum: string;
            /**
             * Ecrituredate
             * Format: date
             */
            EcritureDate: string;
            /** Comptenum */
            CompteNum: string;
            /** Comptelib */
            CompteLib: string;
            /** Compauxnum */
            CompAuxNum: string;
            /** Compauxlib */
            CompAuxLib: string;
            /** Pieceref */
            PieceRef: string;
            /**
             * Piecedate
             * Format: date
             */
            PieceDate: string;
            /** Debit */
            Debit: number;
            /** Credit */
            Credit: number;
            /** Ecriturelet */
            EcritureLet: string;
            /** Datelet */
            DateLet: string | null;
            /** Validdate */
            ValidDate: string | null;
            /** Montantdevise */
            Montantdevise: number;
            /** Idevise */
            Idevise: string;
        };
        /** FeesItem */
        FeesItem: {
            /**
             * Id
             * @description Technical id in Chift
             */
            id: string;
            /** @description Technical id in the target software */
            source_ref: components['schemas']['Ref'];
            /** Created On */
            created_on?: string | null;
            type: components['schemas']['FeesType'];
            /**
             * Removed
             * @description Indicates if the fee has been removed from the order
             * @default false
             */
            removed: boolean | null;
            /** Tax Rate */
            tax_rate: number;
            /**
             * Tax Id
             * @description Technical id of the tax rate in Chift
             */
            tax_id?: string | null;
            /**
             * Discounts
             * @default []
             */
            discounts:
                | components['schemas']['backbone_common__models__commerce__common__DiscountItem'][]
                | null;
            /** Untaxed Amount */
            untaxed_amount: number;
            /** Tax Amount */
            tax_amount: number;
            /** Total */
            total: number;
        };
        /**
         * FeesType
         * @enum {string}
         */
        FeesType: 'shipping' | 'other';
        /** FieldItem */
        FieldItem: {
            /** Name */
            name: string;
            type: components['schemas']['FieldItemType'];
            /** Display Condition */
            display_condition?: {
                [key: string]: unknown;
            } | null;
            /**
             * Values
             * @default []
             */
            values: components['schemas']['FieldItemValue'][] | null;
            /** Api Route */
            api_route?: string | null;
            /** Connection Type */
            connection_type?: number | null;
        };
        /**
         * FieldItemType
         * @enum {string}
         */
        FieldItemType: 'fixed' | 'api';
        /** FieldItemValue */
        FieldItemValue: {
            /** Id */
            id: string;
            /** Label */
            label: string;
        };
        /** FieldRef */
        FieldRef: {
            /**
             * Id
             * @description Technical id in the target software
             */
            id?: string | null;
            /**
             * Model
             * @description Name of the model/entity in the target software
             */
            model?: string | null;
            /**
             * Name
             * @description Value the field in the target software
             */
            name?: string | null;
        };
        /** FinancialEntryItemIn */
        FinancialEntryItemIn: {
            /**
             * Date
             * Format: date
             */
            date: string;
            /**
             * Journal Id
             * @description Indicates the journal used in for the operation.
             */
            journal_id: string;
            /**
             * Currency
             * @description Indicates the currency of the operation (e.g. EUR).
             */
            currency: string;
            /**
             * Currency Exchange Rate
             * @description Indicates the exchange rate at the date of the operation. Must be filled in when creating the operation in another currency from the default currency of the accounting system.
             * @default 1
             */
            currency_exchange_rate: number | null;
            /** Reference */
            reference?: string | null;
            /** Number */
            number?: string | null;
            /** Items */
            items: components['schemas']['FinancialEntryLineItem'][];
            /**
             * Pdf
             * @description Base 64 string representing the PDF attached to the sale/purchase entry.
             */
            pdf?: string | null;
        };
        /** FinancialEntryItemInOld */
        FinancialEntryItemInOld: {
            /**
             * Date
             * Format: date
             */
            date: string;
            /**
             * Journal Id
             * @description Indicates the journal used in for the operation.
             */
            journal_id: string;
            /**
             * Currency
             * @description Indicates the currency of the operation (e.g. EUR).
             */
            currency: string;
            /**
             * Currency Exchange Rate
             * @description Indicates the exchange rate at the date of the operation. Must be filled in when creating the operation in another currency from the default currency of the accounting system.
             * @default 1
             */
            currency_exchange_rate: number | null;
            /** Reference */
            reference?: string | null;
            /** Number */
            number?: string | null;
            /** Items */
            items: components['schemas']['FinancialEntryLineItemOld'][];
            /**
             * Pdf
             * @description Base 64 string representing the PDF attached to the sale/purchase entry.
             */
            pdf?: string | null;
        };
        /** FinancialEntryItemOut */
        FinancialEntryItemOut: {
            /**
             * Date
             * Format: date
             */
            date: string;
            /**
             * Journal Id
             * @description Indicates the journal used in for the operation.
             */
            journal_id: string;
            /**
             * Currency
             * @description Indicates the currency of the operation (e.g. EUR).
             */
            currency: string;
            /**
             * Currency Exchange Rate
             * @description Indicates the exchange rate at the date of the operation. Must be filled in when creating the operation in another currency from the default currency of the accounting system.
             * @default 1
             */
            currency_exchange_rate: number | null;
            /** Reference */
            reference?: string | null;
            /** Id */
            id: string;
            /** Number */
            number: string;
            /** Items */
            items: components['schemas']['FinancialEntryLineItemOut'][];
        };
        /** FinancialEntryItemOutOld */
        FinancialEntryItemOutOld: {
            /**
             * Date
             * Format: date
             */
            date: string;
            /**
             * Journal Id
             * @description Indicates the journal used in for the operation.
             */
            journal_id: string;
            /**
             * Currency
             * @description Indicates the currency of the operation (e.g. EUR).
             */
            currency: string;
            /**
             * Currency Exchange Rate
             * @description Indicates the exchange rate at the date of the operation. Must be filled in when creating the operation in another currency from the default currency of the accounting system.
             * @default 1
             */
            currency_exchange_rate: number | null;
            /** Reference */
            reference?: string | null;
            /** Id */
            id: string;
            /** Number */
            number: string;
            /** Items */
            items: components['schemas']['FinancialEntryLineItemOutOld'][];
        };
        /** FinancialEntryLineItem */
        FinancialEntryLineItem: {
            account_type: components['schemas']['EntryLineType'];
            /** Account */
            account: string;
            /**
             * Amount
             * @description A positive amount represents funds transfered to the bank/cash account. In that case the bank/cash account is debited and the given account_number is credited.
             */
            amount: number;
            /** Description */
            description?: string | null;
        };
        /** FinancialEntryLineItemOld */
        FinancialEntryLineItemOld: {
            type: components['schemas']['EntryLineType'];
            /** Account Number */
            account_number: string;
            /**
             * Partner Id
             * @description Must be filled in it is a 'customer_account', 'supplier_account' or 'employee_account' line type.
             */
            partner_id?: string | null;
            /**
             * Amount
             * @description A positive amount represents funds transfered to the bank/cash account. In that case the bank/cash account is debited and the given account_number is credited.
             */
            amount: number;
            /** Description */
            description?: string | null;
        };
        /** FinancialEntryLineItemOut */
        FinancialEntryLineItemOut: {
            account_type: components['schemas']['EntryLineType'];
            /** Account */
            account: string;
            /**
             * Amount
             * @description A positive amount represents funds transfered to the bank/cash account. In that case the bank/cash account is debited and the given account_number is credited.
             */
            amount: number;
            /** Description */
            description?: string | null;
            /** Counterpart Account */
            counterpart_account: string;
        };
        /** FinancialEntryLineItemOutOld */
        FinancialEntryLineItemOutOld: {
            type: components['schemas']['EntryLineType'];
            /** Account Number */
            account_number: string;
            /**
             * Partner Id
             * @description Must be filled in it is a 'customer_account', 'supplier_account' or 'employee_account' line type.
             */
            partner_id?: string | null;
            /**
             * Amount
             * @description A positive amount represents funds transfered to the bank/cash account. In that case the bank/cash account is debited and the given account_number is credited.
             */
            amount: number;
            /** Description */
            description?: string | null;
            /** Counterpart Account */
            counterpart_account: string;
        };
        /** FlowConfig */
        'FlowConfig-Input': {
            /** Definitionfields */
            definitionFields?:
                | {
                      [key: string]: unknown;
                  }[]
                | null;
            /** Doorkeyfields */
            doorkeyFields?:
                | {
                      [key: string]: unknown;
                  }[]
                | null;
            /** Customfields */
            customFields?:
                | {
                      [key: string]: unknown;
                  }[]
                | null;
            /**
             * Datastores
             * @default []
             */
            datastores: components['schemas']['FlowDataStoreItem-Input'][] | null;
        };
        /** FlowConfig */
        'FlowConfig-Output': {
            /** Definitionfields */
            definitionFields?:
                | {
                      [key: string]: unknown;
                  }[]
                | null;
            /** Doorkeyfields */
            doorkeyFields?:
                | {
                      [key: string]: unknown;
                  }[]
                | null;
            /** Customfields */
            customFields?:
                | {
                      [key: string]: unknown;
                  }[]
                | null;
            /**
             * Datastores
             * @default []
             */
            datastores: components['schemas']['FlowDataStoreItem-Output'][] | null;
        };
        /** FlowDataStoreItem */
        'FlowDataStoreItem-Input': {
            /** Id */
            id?: string | null;
            /** Name */
            name: string;
            /** @default active */
            status: components['schemas']['Status'] | null;
            definition: components['schemas']['DatastoreDef'];
        };
        /** FlowDataStoreItem */
        'FlowDataStoreItem-Output': {
            /** Id */
            id?: string | null;
            /** Name */
            name: string;
            /** @default active */
            status: components['schemas']['Status'] | null;
            definition: components['schemas']['DatastoreDef'];
        };
        /** FlowExecution */
        FlowExecution: {
            type: components['schemas']['ExecutionType'];
            /** Data */
            data:
                | components['schemas']['FlowExecutionChain']
                | components['schemas']['FlowExecutionCode']
                | null;
        };
        /** FlowExecutionChain */
        FlowExecutionChain: {
            /** Name */
            name: string;
        };
        /** FlowExecutionCode */
        FlowExecutionCode: {
            /** Code */
            code: string;
        };
        /** FlowTrigger */
        FlowTrigger: {
            /** Id */
            id: string;
            type: components['schemas']['TriggerType'];
            /** Cronschedules */
            cronschedules?: string[] | null;
            /**
             * Visible
             * @default true
             */
            visible: boolean | null;
            /** Definitionfields */
            definitionFields?:
                | {
                      [key: string]: unknown;
                  }[]
                | null;
            /** Options */
            options?: {
                [key: string]: unknown;
            } | null;
        };
        /** FolderItem */
        FolderItem: {
            /** Id */
            id: string;
            /** Name */
            name: string;
            /**
             * Selected
             * @default true
             */
            selected: boolean | null;
            /** Vat */
            vat?: string | null;
            /** Company Number */
            company_number?: string | null;
        };
        /** GenericJournalEntry */
        GenericJournalEntry: {
            /** Reference */
            reference?: string | null;
            /** Due Date */
            due_date?: string | null;
            /** Journal Id */
            journal_id: string;
            /** Number */
            number: string;
            /** Currency */
            currency: string;
            /**
             * Currency Exchange Rate
             * @default 1
             */
            currency_exchange_rate: number | null;
            /**
             * Date
             * Format: date
             */
            date: string;
            /** Items */
            items: components['schemas']['GenericJournalItem'][];
            /**
             * Pdf
             * @description Base 64 string representing the PDF attached to the item.
             */
            pdf?: string | null;
            /**
             * Posted
             * @default true
             */
            posted: boolean | null;
            /** Start Date */
            start_date?: string | null;
            /** End Date */
            end_date?: string | null;
        };
        /** GenericJournalItem */
        GenericJournalItem: {
            account_type: components['schemas']['EntryLineType'];
            /** Account */
            account: string;
            /**
             * Force General Account
             * @description For customer/supplier/employee accounts we determine the general account based on the configurations in the accounting system. The general account can also be forced by specifying the value in this field.
             */
            force_general_account?: string | null;
            /**
             * Prioritise Thirdparty Account
             * @description Indicate if we need to prioritise the information from thirdparty accounts when forcing the general account in a software where only 1 account is accepted.
             * @default false
             */
            prioritise_thirdparty_account: boolean | null;
            /** Description */
            description?: string | null;
            /** Debit */
            debit: number;
            /** Credit */
            credit: number;
            /**
             * Analytic Distribution
             * @default []
             */
            analytic_distribution: components['schemas']['AnalyticDistribution'][] | null;
            /**
             * Tax Code
             * @description Indicates the tax code used for the entry item. This is the ID of the Tax Code in the accounting software.
             */
            tax_code?: string | null;
            /** Country */
            country?: string | null;
            /** @description Information about the thirdparty account that must be created. In some tools we cannot create a thirdparty account (=client/supplier) by API. Missing thirdparty accounts must be explicitly provided during the entry creation and will be automatically created by the accounting software. This is for example the case for Tiime. */
            account_info?: components['schemas']['AccountToCreate'] | null;
        };
        /** Validation Error */
        HTTPValidationError: {
            /**
             * Message
             * @default Validation error
             */
            message: string;
            /**
             * Status
             * @default error
             */
            status: string;
            /** Detail */
            detail?: components['schemas']['ValidationError'][];
        };
        /** ImageItem */
        ImageItem: {
            /**
             * Id
             * @description Technical id of the image in the target software
             */
            id: string;
            /** Main Image */
            main_image: boolean;
            /** Url */
            url: string;
        };
        /**
         * ImageType
         * @enum {string}
         */
        ImageType: 'icon' | 'logo';
        /** IntegrationItem */
        IntegrationItem: {
            /** Integrationid */
            integrationid: number;
            /** Name */
            name: string;
            status: components['schemas']['Status'];
            api: components['schemas']['Api'];
            /** Logo Url */
            logo_url: string;
            /** Icon Url */
            icon_url: string;
            /**
             * Post Connections
             * @description List of post-connections that can be activated for this integration.
             * @default []
             */
            post_connections: components['schemas']['PostConnectionItem-Output'][] | null;
            /**
             * Credentials
             * @description List of credentials that must be specified to create a connection. Can be used if you want to pass credentials on connection creation. Not compatible with oAuth2 routes.
             * @default []
             */
            credentials: components['schemas']['CredentialItem-Output'][] | null;
            /**
             * Supported Countries
             * @description Country codes (ISO 3166-1 alpha-2) where this integration is supported. If not defined, the integration is supported globally.
             */
            supported_countries?: string[] | null;
        };
        /** InventoryDetailsItem */
        InventoryDetailsItem: {
            location: components['schemas']['CommerceLocationItem'];
            /** Available Quantity */
            available_quantity: number;
        };
        /** InventoryDetailsUpdate */
        InventoryDetailsUpdate: {
            /**
             * Location Id
             * @description Technical id of the location in Chift
             */
            location_id: string;
            /** Available Quantity */
            available_quantity: number;
        };
        /** InvoiceCorrection */
        InvoiceCorrection: {
            /** Sale Invoice Correction Tax Code */
            sale_invoice_correction_tax_code?: string | null;
            /** Purchase Invoice Correction Tax Code */
            purchase_invoice_correction_tax_code?: string | null;
            /** Invoice Correction Credit Account Number */
            invoice_correction_credit_account_number?: string | null;
            /** Invoice Correction Debit Account Number */
            invoice_correction_debit_account_number?: string | null;
        };
        /** InvoiceItem */
        'InvoiceItem-Input': {
            /**
             * Currency
             * @description Currency matching target sofware name
             */
            currency: string;
            /** @description Invoice type */
            invoice_type: components['schemas']['backbone_common__models__invoicing__common__InvoiceType'];
            /** @description Status */
            status: components['schemas']['InvoiceStatus'];
            /**
             * Invoice Date
             * Format: date
             * @description Invoicing date
             */
            invoice_date: string;
            /**
             * Tax Amount
             * @description Taxes amount
             */
            tax_amount: number;
            /**
             * Untaxed Amount
             * @description Untaxed amount
             */
            untaxed_amount: number;
            /**
             * Total
             * @description Total amount incl. taxes
             */
            total: number;
            /**
             * Lines
             * @description Invoice lines
             * @default []
             */
            lines: components['schemas']['InvoiceLineItem'][];
            /**
             * Partner Id
             * @description Technical id of the vendor/customer in Chift
             */
            partner_id?: string | null;
            /**
             * Invoice Number
             * @description Number/sequence
             */
            invoice_number?: string | null;
            /**
             * Due Date
             * @description Due date
             */
            due_date?: string | null;
            /**
             * Reference
             * @description Reference
             */
            reference?: string | null;
            /**
             * Payment Communication
             * @description Payment communication
             */
            payment_communication?: string | null;
            /**
             * Customer Memo
             * @description Customer note/memo
             */
            customer_memo?: string | null;
            /** @description Journal */
            journal_ref?: components['schemas']['FieldRef'] | null;
            /** @description Specificities for Italy */
            italian_specificities?: components['schemas']['ItalianSpecificities-Input'] | null;
        };
        /** InvoiceItem */
        'InvoiceItem-Output': {
            /**
             * Id
             * @description Technical id in Chift
             */
            id: string;
            /** @description Technical id in the target software */
            source_ref: components['schemas']['Ref'];
            /**
             * Invoice Number
             * @description Number/sequence
             */
            invoice_number: string | null;
            /**
             * Creation Date
             * @description Creation date of the invoice
             */
            creation_date?: string | null;
            /**
             * Closing Date
             * @description Closing date of the invoice
             */
            closing_date?: string | null;
            /**
             * Partners
             * @description List of partners related to the invoice
             */
            partners?: components['schemas']['InvoicePartnerItem'][] | null;
        };
        /** InvoiceItemInMonoAnalyticPlan */
        InvoiceItemInMonoAnalyticPlan: {
            invoice_type: components['schemas']['backbone_common__models__accounting__common__InvoiceType'];
            /**
             * Invoice Number
             * @description Number of the invoice. If left empty, will be automatically generated by the accounting system at creation. In some accounting software the invoice number is a required field (see connector's limitations).
             */
            invoice_number?: string | null;
            /**
             * Currency
             * @description Indicates the currency of the invoice (e.g. EUR).
             */
            currency: string;
            /** Untaxed Amount */
            untaxed_amount: number;
            /** Tax Amount */
            tax_amount: number;
            /** Total */
            total: number;
            /** Reference */
            reference?: string | null;
            /** Payment Communication */
            payment_communication?: string | null;
            /** Customer Memo */
            customer_memo?: string | null;
            /**
             * Invoice Date
             * Format: date
             */
            invoice_date: string;
            /**
             * Due Date
             * Format: date
             */
            due_date: string;
            /** Partner Id */
            partner_id: string;
            /**
             * Journal Id
             * @description Indicates the journal used in for the invoice. If the journal is not given, the journal will be automatically set if only one journal exists otherwise an error will be thrown.
             */
            journal_id?: string | null;
            /** @default posted */
            status: components['schemas']['InvoiceStatusIn'] | null;
            /**
             * Pdf
             * @description Base 64 string representing the PDF attached to the sale/purchase entry.
             */
            pdf?: string | null;
            /**
             * Currency Exchange Rate
             * @description Indicates the exchange rate at the date of the invoice. Must be filled in when creating the invoice in another currency from the default currency of the accounting system.
             * @default 1
             */
            currency_exchange_rate: number | null;
            /** @description Information used to add a correction line when roundings have an impact on the total amount of the invoice. */
            invoice_correction?: components['schemas']['InvoiceCorrection'] | null;
            nl_payment_terms_split?: components['schemas']['NlPaymentTermsSplit'] | null;
            /** Shipping Country */
            shipping_country?: string | null;
            /** @description Information about the client/supplier that must be created. In some tools we cannot create a client/supplier by API. Missing clients/suppliers must be explicitly provided during the invoice creation and will be automatically created by the accounting software. This is for example the case for Tiime. */
            partner_info?: components['schemas']['AccountToCreate'] | null;
            /** Lines */
            lines: components['schemas']['InvoiceLineItemInMonoAnalyticPlan'][];
        };
        /** InvoiceItemInMultiAnalyticPlans */
        InvoiceItemInMultiAnalyticPlans: {
            invoice_type: components['schemas']['backbone_common__models__accounting__common__InvoiceType'];
            /**
             * Invoice Number
             * @description Number of the invoice. If left empty, will be automatically generated by the accounting system at creation. In some accounting software the invoice number is a required field (see connector's limitations).
             */
            invoice_number?: string | null;
            /**
             * Currency
             * @description Indicates the currency of the invoice (e.g. EUR).
             */
            currency: string;
            /** Untaxed Amount */
            untaxed_amount: number;
            /** Tax Amount */
            tax_amount: number;
            /** Total */
            total: number;
            /** Reference */
            reference?: string | null;
            /** Payment Communication */
            payment_communication?: string | null;
            /** Customer Memo */
            customer_memo?: string | null;
            /**
             * Invoice Date
             * Format: date
             */
            invoice_date: string;
            /**
             * Due Date
             * Format: date
             */
            due_date: string;
            /** Partner Id */
            partner_id: string;
            /**
             * Journal Id
             * @description Indicates the journal used in for the invoice. If the journal is not given, the journal will be automatically set if only one journal exists otherwise an error will be thrown.
             */
            journal_id?: string | null;
            /** @default posted */
            status: components['schemas']['InvoiceStatusIn'] | null;
            /**
             * Pdf
             * @description Base 64 string representing the PDF attached to the sale/purchase entry.
             */
            pdf?: string | null;
            /**
             * Currency Exchange Rate
             * @description Indicates the exchange rate at the date of the invoice. Must be filled in when creating the invoice in another currency from the default currency of the accounting system.
             * @default 1
             */
            currency_exchange_rate: number | null;
            /** @description Information used to add a correction line when roundings have an impact on the total amount of the invoice. */
            invoice_correction?: components['schemas']['InvoiceCorrection'] | null;
            nl_payment_terms_split?: components['schemas']['NlPaymentTermsSplit'] | null;
            /** Shipping Country */
            shipping_country?: string | null;
            /** @description Information about the client/supplier that must be created. In some tools we cannot create a client/supplier by API. Missing clients/suppliers must be explicitly provided during the invoice creation and will be automatically created by the accounting software. This is for example the case for Tiime. */
            partner_info?: components['schemas']['AccountToCreate'] | null;
            /** Lines */
            lines: components['schemas']['InvoiceLineItemInMultiAnalyticPlans'][];
        };
        /** InvoiceItemOut */
        InvoiceItemOut: {
            /**
             * Id
             * @description Technical id in Chift
             */
            id: string;
            /** @description Technical id in the target software */
            source_ref: components['schemas']['Ref'];
            /**
             * Currency
             * @description Currency matching target sofware name
             */
            currency: string;
            /** @description Invoice type */
            invoice_type: components['schemas']['backbone_common__models__invoicing__common__InvoiceType'];
            /** @description Status */
            status: components['schemas']['InvoiceStatus'];
            /**
             * Invoice Date
             * Format: date
             * @description Invoicing date
             */
            invoice_date: string;
            /**
             * Tax Amount
             * @description Taxes amount
             */
            tax_amount: number;
            /**
             * Untaxed Amount
             * @description Untaxed amount
             */
            untaxed_amount: number;
            /**
             * Total
             * @description Total amount incl. taxes
             */
            total: number;
            /**
             * Lines
             * @description Invoice lines
             * @default []
             */
            lines: components['schemas']['InvoiceLineItem'][];
            /**
             * Partner Id
             * @description Technical id of the vendor/customer in Chift
             */
            partner_id?: string | null;
            /**
             * Invoice Number
             * @description Number/sequence
             */
            invoice_number?: string | null;
            /**
             * Due Date
             * @description Due date
             */
            due_date?: string | null;
            /**
             * Reference
             * @description Reference
             */
            reference?: string | null;
            /**
             * Payment Communication
             * @description Payment communication
             */
            payment_communication?: string | null;
            /**
             * Customer Memo
             * @description Customer note/memo
             */
            customer_memo?: string | null;
            /** @description Journal */
            journal_ref?: components['schemas']['FieldRef'] | null;
            /** @description Specificities for Italy */
            italian_specificities?: components['schemas']['ItalianSpecificities-Output'] | null;
            /** Last Updated On */
            last_updated_on?: string | null;
            /**
             * Outstanding Amount
             * @description Amount left to be paid
             */
            outstanding_amount?: number | null;
            /**
             * Accounting Date
             * @description Accounting date
             */
            accounting_date?: string | null;
            /**
             * Payment Method Id
             * @description Technical id of the payment method in Chift
             */
            payment_method_id?: string | null;
            /**
             * Currency Exchange Rate
             * @description Indicates the exchange rate at the date of the invoice.
             * @default 1
             */
            currency_exchange_rate: number | null;
        };
        /** InvoiceItemOutMonoAnalyticPlan */
        InvoiceItemOutMonoAnalyticPlan: {
            invoice_type: components['schemas']['backbone_common__models__accounting__common__InvoiceType'];
            /**
             * Invoice Number
             * @description Number of the invoice. If left empty, will be automatically generated by the accounting system at creation. In some accounting software the invoice number is a required field (see connector's limitations).
             */
            invoice_number?: string | null;
            /**
             * Currency
             * @description Indicates the currency of the invoice (e.g. EUR).
             */
            currency: string;
            /** Untaxed Amount */
            untaxed_amount: number;
            /** Tax Amount */
            tax_amount: number;
            /** Total */
            total: number;
            /** Reference */
            reference?: string | null;
            /** Payment Communication */
            payment_communication?: string | null;
            /** Customer Memo */
            customer_memo?: string | null;
            /** Id */
            id?: string | null;
            /**
             * Invoice Date
             * Format: date
             * @description Accounting invoice date. It is automatically set to '1970-01-01' if the value is empty in the accounting system.
             */
            invoice_date: string;
            /**
             * Due Date
             * Format: date
             * @description Due date of the invoice. We use the value of the invoice date if the value is not available/empty in the accounting system.
             */
            due_date: string;
            /** Partner Id */
            partner_id: string;
            /**
             * Journal Id
             * @description Indicates the journal used in for the invoice. If the journal is not given, the journal will be automatically set if only one journal exists otherwise an error will be thrown.
             */
            journal_id?: string | null;
            /** Payments */
            payments?: components['schemas']['Payment'][] | null;
            /** @default posted */
            status: components['schemas']['InvoiceStatusOut'] | null;
            /**
             * Last Updated On
             * @description The last time the invoice has been updated.
             */
            last_updated_on?: string | null;
            /** @description Extra information about the partner (client/supplier) linked to the invoice. To ensure this information is returned, you need to use the include_partner_info query parameter. */
            partner?: components['schemas']['Partner'] | null;
            /** Lines */
            lines: components['schemas']['InvoiceLineItemOutMonoAnalyticPlan'][];
        };
        /** InvoiceItemOutMultiAnalyticPlans */
        InvoiceItemOutMultiAnalyticPlans: {
            invoice_type: components['schemas']['backbone_common__models__accounting__common__InvoiceType'];
            /**
             * Invoice Number
             * @description Number of the invoice. If left empty, will be automatically generated by the accounting system at creation. In some accounting software the invoice number is a required field (see connector's limitations).
             */
            invoice_number?: string | null;
            /**
             * Currency
             * @description Indicates the currency of the invoice (e.g. EUR).
             */
            currency: string;
            /** Untaxed Amount */
            untaxed_amount: number;
            /** Tax Amount */
            tax_amount: number;
            /** Total */
            total: number;
            /** Reference */
            reference?: string | null;
            /** Payment Communication */
            payment_communication?: string | null;
            /** Customer Memo */
            customer_memo?: string | null;
            /** Id */
            id?: string | null;
            /**
             * Invoice Date
             * Format: date
             * @description Accounting invoice date. It is automatically set to '1970-01-01' if the value is empty in the accounting system.
             */
            invoice_date: string;
            /**
             * Due Date
             * Format: date
             * @description Due date of the invoice. We use the value of the invoice date if the value is not available/empty in the accounting system.
             */
            due_date: string;
            /** Partner Id */
            partner_id: string;
            /**
             * Journal Id
             * @description Indicates the journal used in for the invoice. If the journal is not given, the journal will be automatically set if only one journal exists otherwise an error will be thrown.
             */
            journal_id?: string | null;
            /** Payments */
            payments?: components['schemas']['Payment'][] | null;
            /** @default posted */
            status: components['schemas']['InvoiceStatusOut'] | null;
            /**
             * Last Updated On
             * @description The last time the invoice has been updated.
             */
            last_updated_on?: string | null;
            /** @description Extra information about the partner (client/supplier) linked to the invoice. To ensure this information is returned, you need to use the include_partner_info query parameter. */
            partner?: components['schemas']['Partner'] | null;
            /** Lines */
            lines: components['schemas']['InvoiceLineItemOutMultiAnalyticPlans'][];
        };
        /**
         * InvoiceItemOutSingle
         * @description Invoice item returned in get 1 invoice
         */
        InvoiceItemOutSingle: {
            /**
             * Id
             * @description Technical id in Chift
             */
            id: string;
            /** @description Technical id in the target software */
            source_ref: components['schemas']['Ref'];
            /**
             * Currency
             * @description Currency matching target sofware name
             */
            currency: string;
            /** @description Invoice type */
            invoice_type: components['schemas']['backbone_common__models__invoicing__common__InvoiceType'];
            /** @description Status */
            status: components['schemas']['InvoiceStatus'];
            /**
             * Invoice Date
             * Format: date
             * @description Invoicing date
             */
            invoice_date: string;
            /**
             * Tax Amount
             * @description Taxes amount
             */
            tax_amount: number;
            /**
             * Untaxed Amount
             * @description Untaxed amount
             */
            untaxed_amount: number;
            /**
             * Total
             * @description Total amount incl. taxes
             */
            total: number;
            /**
             * Lines
             * @description Invoice lines
             * @default []
             */
            lines: components['schemas']['InvoiceLineItem'][];
            /**
             * Partner Id
             * @description Technical id of the vendor/customer in Chift
             */
            partner_id?: string | null;
            /**
             * Invoice Number
             * @description Number/sequence
             */
            invoice_number?: string | null;
            /**
             * Due Date
             * @description Due date
             */
            due_date?: string | null;
            /**
             * Reference
             * @description Reference
             */
            reference?: string | null;
            /**
             * Payment Communication
             * @description Payment communication
             */
            payment_communication?: string | null;
            /**
             * Customer Memo
             * @description Customer note/memo
             */
            customer_memo?: string | null;
            /** @description Journal */
            journal_ref?: components['schemas']['FieldRef'] | null;
            /** @description Specificities for Italy */
            italian_specificities?: components['schemas']['ItalianSpecificities-Output'] | null;
            /** Last Updated On */
            last_updated_on?: string | null;
            /**
             * Outstanding Amount
             * @description Amount left to be paid
             */
            outstanding_amount?: number | null;
            /**
             * Accounting Date
             * @description Accounting date
             */
            accounting_date?: string | null;
            /**
             * Payment Method Id
             * @description Technical id of the payment method in Chift
             */
            payment_method_id?: string | null;
            /**
             * Currency Exchange Rate
             * @description Indicates the exchange rate at the date of the invoice.
             * @default 1
             */
            currency_exchange_rate: number | null;
            /**
             * Pdf
             * @description PDF document in base64
             */
            pdf?: string | null;
        };
        /** InvoiceLineItem */
        InvoiceLineItem: {
            /**
             * Description
             * @description Line description
             */
            description?: string | null;
            /**
             * Unit Price
             * @description Unit price excl. taxes
             */
            unit_price: number;
            /**
             * Quantity
             * @description Quantity
             */
            quantity: number;
            /**
             * Discount Amount
             * @description Line discount amount excl. taxes, (unit_price * quantity) - discount_amount = untaxed_amount
             * @default 0
             */
            discount_amount: number;
            /**
             * Tax Amount
             * @description Line total taxes amount
             */
            tax_amount: number;
            /**
             * Untaxed Amount
             * @description Line total untaxed amount
             */
            untaxed_amount: number;
            /**
             * Total
             * @description Line total amount incl. taxes, total = tax_amount + untaxed_amount
             */
            total: number;
            /**
             * Tax Rate
             * @description Tax rate (e.g. 21.0)
             */
            tax_rate?: number | null;
            /**
             * Account Number
             * @description Number of the accounting account used (e.g. 701000)
             */
            account_number?: string | null;
            /**
             * Tax Id
             * @description Technical id of the tax in Chift
             */
            tax_id?: string | null;
            /**
             * Tax Exemption Reason
             * @description Tax exemption reason
             */
            tax_exemption_reason?: string | null;
            /**
             * Unit Of Measure
             * @description Unit of measure matching target sofware name
             */
            unit_of_measure?: string | null;
            /**
             * Product Id
             * @description Technical id of the product in Chift
             */
            product_id?: string | null;
            /**
             * Product Code
             * @description Product reference
             */
            product_code?: string | null;
            /**
             * Product Name
             * @description Product name
             */
            product_name?: string | null;
        };
        /** InvoiceLineItemInMonoAnalyticPlan */
        InvoiceLineItemInMonoAnalyticPlan: {
            /**
             * Line Number
             * @default 1
             */
            line_number: number | null;
            /** Unit Price */
            unit_price: number;
            /**
             * Unit Of Measure
             * @description A list of default units can be used for which an advanced mapping has been done (units: 'hour', 'day', 'cm', 'm2', 'm3', 'm', 'km', 'mile', 'g', 'kg', 'ton', 'box', 'pallet', 'roll', 'liter', 'unit'). Custom units of measure must have an identical name in the target software.
             */
            unit_of_measure?: string | null;
            /** Quantity */
            quantity: number;
            /** Untaxed Amount */
            untaxed_amount: number;
            /**
             * Tax Rate
             * @description Indicates the tax rate used for the line (e.g. 21.0).
             */
            tax_rate: number;
            /** Tax Amount */
            tax_amount: number;
            /** Total */
            total: number;
            /**
             * Account Number
             * @description Indicates the number of the account used for the line (e.g. 701000).
             */
            account_number: string;
            /**
             * Tax Code
             * @description Indicates the tax code used for the line. This is the ID of the Tax Code in the accounting software.
             */
            tax_code: string;
            /** Description */
            description: string;
            /** Analytic Account */
            analytic_account?: string | null;
        };
        /** InvoiceLineItemInMultiAnalyticPlans */
        InvoiceLineItemInMultiAnalyticPlans: {
            /**
             * Line Number
             * @default 1
             */
            line_number: number | null;
            /** Unit Price */
            unit_price: number;
            /**
             * Unit Of Measure
             * @description A list of default units can be used for which an advanced mapping has been done (units: 'hour', 'day', 'cm', 'm2', 'm3', 'm', 'km', 'mile', 'g', 'kg', 'ton', 'box', 'pallet', 'roll', 'liter', 'unit'). Custom units of measure must have an identical name in the target software.
             */
            unit_of_measure?: string | null;
            /** Quantity */
            quantity: number;
            /** Untaxed Amount */
            untaxed_amount: number;
            /**
             * Tax Rate
             * @description Indicates the tax rate used for the line (e.g. 21.0).
             */
            tax_rate: number;
            /** Tax Amount */
            tax_amount: number;
            /** Total */
            total: number;
            /**
             * Account Number
             * @description Indicates the number of the account used for the line (e.g. 701000).
             */
            account_number: string;
            /**
             * Tax Code
             * @description Indicates the tax code used for the line. This is the ID of the Tax Code in the accounting software.
             */
            tax_code: string;
            /** Description */
            description: string;
            /**
             * Analytic Distribution
             * @default []
             */
            analytic_distribution: components['schemas']['AnalyticDistribution'][] | null;
        };
        /** InvoiceLineItemOutMonoAnalyticPlan */
        InvoiceLineItemOutMonoAnalyticPlan: {
            /**
             * Line Number
             * @default 1
             */
            line_number: number | null;
            /** Unit Price */
            unit_price: number;
            /**
             * Unit Of Measure
             * @description A list of default units can be used for which an advanced mapping has been done (units: 'hour', 'day', 'cm', 'm2', 'm3', 'm', 'km', 'mile', 'g', 'kg', 'ton', 'box', 'pallet', 'roll', 'liter', 'unit'). Custom units of measure must have an identical name in the target software.
             */
            unit_of_measure?: string | null;
            /** Quantity */
            quantity: number;
            /** Untaxed Amount */
            untaxed_amount: number;
            /**
             * Tax Rate
             * @description Indicates the tax rate used for the line (e.g. 21.0).
             */
            tax_rate: number;
            /** Tax Amount */
            tax_amount: number;
            /** Total */
            total: number;
            /**
             * Account Number
             * @description Indicates the number of the account used for the line (e.g. 701000).
             */
            account_number?: string | null;
            /**
             * Tax Code
             * @description Indicates the tax code used for the line. This is the ID of the Tax Code in the accounting software.
             */
            tax_code?: string | null;
            /**
             * Description
             * @default
             */
            description: string | null;
            /** Analytic Account */
            analytic_account?: string | null;
        };
        /** InvoiceLineItemOutMultiAnalyticPlans */
        InvoiceLineItemOutMultiAnalyticPlans: {
            /**
             * Line Number
             * @default 1
             */
            line_number: number | null;
            /** Unit Price */
            unit_price: number;
            /**
             * Unit Of Measure
             * @description A list of default units can be used for which an advanced mapping has been done (units: 'hour', 'day', 'cm', 'm2', 'm3', 'm', 'km', 'mile', 'g', 'kg', 'ton', 'box', 'pallet', 'roll', 'liter', 'unit'). Custom units of measure must have an identical name in the target software.
             */
            unit_of_measure?: string | null;
            /** Quantity */
            quantity: number;
            /** Untaxed Amount */
            untaxed_amount: number;
            /**
             * Tax Rate
             * @description Indicates the tax rate used for the line (e.g. 21.0).
             */
            tax_rate: number;
            /** Tax Amount */
            tax_amount: number;
            /** Total */
            total: number;
            /**
             * Account Number
             * @description Indicates the number of the account used for the line (e.g. 701000).
             */
            account_number?: string | null;
            /**
             * Tax Code
             * @description Indicates the tax code used for the line. This is the ID of the Tax Code in the accounting software.
             */
            tax_code?: string | null;
            /**
             * Description
             * @default
             */
            description: string | null;
            /**
             * Analytic Distribution
             * @default []
             */
            analytic_distribution: components['schemas']['AnalyticDistribution'][] | null;
        };
        /** InvoicePartnerItem */
        InvoicePartnerItem: {
            /**
             * Id
             * @description Technical id in Chift
             */
            id: string;
            /** @description Technical id in the target software */
            source_ref: components['schemas']['Ref'];
            /** @description Type of the partner */
            type: components['schemas']['PartnerType'];
            /** @description Address of the partner */
            address?: components['schemas']['AddressItem'] | null;
            /**
             * First Name
             * @description First name of the partner. In case the partner is an individual.
             */
            first_name?: string | null;
            /**
             * Last Name
             * @description Last name of the partner. In case the partner is an individual.
             */
            last_name?: string | null;
            /**
             * Company Name
             * @description Company name of the partner. In case the partner is a company.
             */
            company_name?: string | null;
        };
        /**
         * InvoiceStatus
         * @enum {string}
         */
        InvoiceStatus: 'cancelled' | 'draft' | 'posted' | 'paid';
        /**
         * InvoiceStatusIn
         * @enum {string}
         */
        InvoiceStatusIn: 'draft' | 'posted';
        /**
         * InvoiceStatusOut
         * @enum {string}
         */
        InvoiceStatusOut: 'cancelled' | 'draft' | 'posted' | 'paid';
        /** InvoicingPaymentItem */
        InvoicingPaymentItem: {
            /**
             * Id
             * @description Technical id in Chift
             */
            id: string;
            /** @description Technical id in the target software */
            source_ref: components['schemas']['Ref'];
            /** @description Payment status */
            status: components['schemas']['backbone_common__models__payment__common__PaymentStatus'];
            /**
             * Description
             * @description Description
             */
            description: string;
            /**
             * Amount
             * @description Amount
             */
            amount: number;
            /**
             * Currency
             * @description Currency
             */
            currency: string;
            /**
             * Payment Date
             * Format: date-time
             * @description Date of creation
             */
            payment_date: string;
            /**
             * Partner Id
             * @description Partner ID
             */
            partner_id?: string | null;
            /**
             * Payment Method Id
             * @description Technical id of the payment method in Chift
             */
            payment_method_id?: string | null;
            /**
             * Payment Method Name
             * @description Payment method name
             */
            payment_method_name?: string | null;
            /**
             * Invoice Id
             * @description Technical id of the invoice in Chift
             */
            invoice_id?: string | null;
            /**
             * Invoice Number
             * @description Invoice number
             */
            invoice_number?: string | null;
        };
        /** InvoicingPaymentMethodItem */
        InvoicingPaymentMethodItem: {
            /**
             * Id
             * @description Technical id in Chift
             */
            id: string;
            /** @description Technical id in the target software */
            source_ref: components['schemas']['Ref'];
            /**
             * Name
             * @description Payment method name
             */
            name: string;
        };
        /** InvoicingVatCode */
        InvoicingVatCode: {
            /**
             * Id
             * @description Technical id in Chift
             */
            id: string;
            /** @description Technical id in the target software */
            source_ref: components['schemas']['Ref'];
            /**
             * Label
             * @description Label
             */
            label: string;
            /**
             * Rate
             * @description Tax rate (e.g. 21.0)
             */
            rate: number;
            /** @description Type */
            type: components['schemas']['VatCodeType'];
            /**
             * Code
             * @description Code
             */
            code?: string | null;
            /**
             * @description Scope
             * @default unknown
             */
            scope: components['schemas']['VatCodeScope'] | null;
            /**
             * Active
             * @description Is the tax active?
             * @default true
             */
            active: boolean | null;
        };
        /** IssueItem */
        IssueItem: {
            /** Id */
            id: string;
            /** Consumer Id */
            consumer_id: string;
            /** Connection Id */
            connection_id: string;
            /** Integration Id */
            integration_id: number;
            /** Integration Name */
            integration_name: string;
            /**
             * Created On
             * Format: date-time
             */
            created_on: string;
            /**
             * Updated On
             * Format: date-time
             */
            updated_on: string;
            /**
             * Last Seen
             * Format: date-time
             */
            last_seen: string;
            error: components['schemas']['ErrorInfo'];
            /** Occurrences */
            occurrences: number;
            level: components['schemas']['IssueLevel'];
        };
        /**
         * IssueLevel
         * @enum {string}
         */
        IssueLevel: 'error' | 'warning';
        /**
         * IssueStatus
         * @enum {string}
         */
        IssueStatus: 'open' | 'closed' | 'all';
        /** ItalianSpecificities */
        'ItalianSpecificities-Input': {
            /**
             * Stamp Duty Amount
             * @description Documentary stamp tax (specific to Italy)
             */
            stamp_duty_amount?: number | null;
            /** @description Withholding tax (specific to Italy) */
            withholding_tax?: components['schemas']['WithholdingTax'] | null;
            /** @description Welfare fund (specific to Italy) */
            welfare_fund?: components['schemas']['WelfareFund'] | null;
            /** @description Payment reporting (specific to Italy) */
            payment_reporting?: components['schemas']['PaymentReporting'] | null;
        };
        /** ItalianSpecificities */
        'ItalianSpecificities-Output': {
            /**
             * Stamp Duty Amount
             * @description Documentary stamp tax (specific to Italy)
             */
            stamp_duty_amount?: number | null;
            /** @description Withholding tax (specific to Italy) */
            withholding_tax?: components['schemas']['WithholdingTax'] | null;
            /** @description Welfare fund (specific to Italy) */
            welfare_fund?: components['schemas']['WelfareFund'] | null;
            /** @description Payment reporting (specific to Italy) */
            payment_reporting?: components['schemas']['PaymentReporting'] | null;
        };
        /** Journal */
        Journal: {
            /** Id */
            id: string;
            /** Code */
            code?: string | null;
            /** Name */
            name: string;
            journal_type: components['schemas']['JournalType'];
            /** Counterpart Account */
            counterpart_account?: string | null;
            /**
             * Next Document Numbers
             * @default []
             */
            next_document_numbers: components['schemas']['NextDocumentNumber'][] | null;
            /**
             * Iban
             * @description IBAN of the bank account linked to the journal.
             */
            iban?: string | null;
            /**
             * Currency
             * @description Currency of the journal. If empty, the journal follows the currency of the accounting folder.
             */
            currency?: string | null;
        };
        /** JournalEntryIn */
        JournalEntryIn: {
            /** Reference */
            reference?: string | null;
            /** Due Date */
            due_date?: string | null;
            /** Journal Id */
            journal_id: string;
            /** Name */
            name: string;
            /**
             * Date
             * Format: date
             */
            date: string;
            /** Items */
            items: components['schemas']['JournalItemIn'][];
            /**
             * Pdf
             * @description Base 64 string representing the PDF attached to the item.
             */
            pdf?: string | null;
        };
        /** JournalEntryMonoAnalyticPlan */
        JournalEntryMonoAnalyticPlan: {
            /** Reference */
            reference?: string | null;
            /** Due Date */
            due_date?: string | null;
            /** Journal Id */
            journal_id: string;
            /** Name */
            name?: string | null;
            /** Journal Name */
            journal_name?: string | null;
            /**
             * Date
             * @description Accounting date of the journal entry. It is automatically set to '1970-01-01' if the value is not available/empty in the accounting system.
             * @default 1970-01-01
             */
            date: string | null;
            /**
             * Posted
             * @default false
             */
            posted: boolean | null;
            /** Id */
            id: string;
            /**
             * Items
             * @default []
             */
            items: components['schemas']['JournalItemMonoAnalyticPlan'][] | null;
        };
        /** JournalEntryMultiAnalyticPlan */
        JournalEntryMultiAnalyticPlan: {
            /** Reference */
            reference?: string | null;
            /** Due Date */
            due_date?: string | null;
            /** Journal Id */
            journal_id: string;
            /** Name */
            name?: string | null;
            /** Journal Name */
            journal_name?: string | null;
            /**
             * Date
             * @description Accounting date of the journal entry. It is automatically set to '1970-01-01' if the value is not available/empty in the accounting system.
             * @default 1970-01-01
             */
            date: string | null;
            /**
             * Posted
             * @default false
             */
            posted: boolean | null;
            /** Id */
            id: string;
            /**
             * Items
             * @default []
             */
            items: components['schemas']['JournalItemMultiAnalyticPlan'][] | null;
        };
        /** JournalIn */
        JournalIn: {
            /** Code */
            code: string;
            /** Name */
            name: string;
            journal_type: components['schemas']['JournalInType'];
            /** Counterpart Account */
            counterpart_account?: string | null;
        };
        /**
         * JournalInType
         * @enum {string}
         */
        JournalInType:
            | 'customer_invoice'
            | 'customer_refund'
            | 'supplier_invoice'
            | 'supplier_refund'
            | 'bank'
            | 'cash'
            | 'miscellaneous_operation';
        /** JournalItemIn */
        JournalItemIn: {
            /** Account Number */
            account_number: string;
            /** Partner Id */
            partner_id?: string | null;
            /** Description */
            description?: string | null;
            /** Debit */
            debit: number;
            /** Credit */
            credit: number;
            /** Currency */
            currency: string;
            /**
             * Currency Exchange Rate
             * @default 1
             */
            currency_exchange_rate: number | null;
            /**
             * Analytic Distribution
             * @default []
             */
            analytic_distribution: components['schemas']['AnalyticDistribution'][] | null;
        };
        /** JournalItemMonoAnalyticPlan */
        JournalItemMonoAnalyticPlan: {
            /** Account Number */
            account_number: string;
            /** Partner Id */
            partner_id?: string | null;
            /** Description */
            description?: string | null;
            /** Debit */
            debit: number;
            /** Credit */
            credit: number;
            /** Currency */
            currency: string;
            /**
             * Currency Exchange Rate
             * @default 1
             */
            currency_exchange_rate: number | null;
            /** Id */
            id: string;
            /** Partner Name */
            partner_name?: string | null;
            /** Account Name */
            account_name: string;
            /**
             * Matching Numbers
             * @default []
             */
            matching_numbers: string[] | null;
            /** Analytic Account */
            analytic_account?: string | null;
            /** Analytic Account Name */
            analytic_account_name?: string | null;
        };
        /** JournalItemMultiAnalyticPlan */
        JournalItemMultiAnalyticPlan: {
            /** Account Number */
            account_number: string;
            /** Partner Id */
            partner_id?: string | null;
            /** Description */
            description?: string | null;
            /** Debit */
            debit: number;
            /** Credit */
            credit: number;
            /** Currency */
            currency: string;
            /**
             * Currency Exchange Rate
             * @default 1
             */
            currency_exchange_rate: number | null;
            /** Id */
            id: string;
            /** Partner Name */
            partner_name?: string | null;
            /** Account Name */
            account_name: string;
            /**
             * Matching Numbers
             * @default []
             */
            matching_numbers: string[] | null;
            /**
             * Analytic Distribution
             * @default []
             */
            analytic_distribution: components['schemas']['AnalyticDistribution'][] | null;
        };
        /**
         * JournalType
         * @enum {string}
         */
        JournalType:
            | 'customer_invoice'
            | 'customer_refund'
            | 'supplier_invoice'
            | 'supplier_refund'
            | 'financial_operation'
            | 'miscellaneous_operation'
            | 'unknown';
        /** LedgerAccountItemIn */
        LedgerAccountItemIn: {
            /** Name */
            name: string;
            /** Number */
            number: string;
        };
        /** LinkItem */
        LinkItem: {
            /** Url */
            url: string;
        };
        /** LinkSyncItem */
        LinkSyncItem: {
            /** Url */
            url: string;
        };
        /** LocalAgentInfo */
        LocalAgentInfo: {
            status: components['schemas']['LocalAgentStatus'];
        };
        /**
         * LocalAgentStatus
         * @enum {string}
         */
        LocalAgentStatus: 'up' | 'down';
        /** LogoImage */
        LogoImage: {
            /** Integrationid */
            integrationid: number;
            /** Data */
            data: string;
        };
        /** MatchingIn */
        MatchingIn: {
            /** Entries */
            entries: string[];
            /** Partner Id */
            partner_id: string;
        };
        /** MatchingOut */
        MatchingOut: {
            /** Matching Number */
            matching_number: string;
            /** Balance */
            balance: number;
        };
        /** MiscellaneousOperationIn */
        MiscellaneousOperationIn: {
            /** Operation Number */
            operation_number?: string | null;
            /**
             * Currency
             * @description Indicates the currency of the operation (e.g. EUR).
             */
            currency: string;
            /**
             * Currency Exchange Rate
             * @description Indicates the exchange rate at the date of the operation. Must be filled in when creating the operation in another currency from the default currency of the accounting system.
             * @default 1
             */
            currency_exchange_rate: number | null;
            /** Lines */
            lines: components['schemas']['MiscellaneousOperationLine'][];
            /**
             * Operation Date
             * Format: date
             */
            operation_date: string;
            /**
             * Journal Id
             * @description Indicates the journal used in for the operation. If the journal is not given, the journal will be automatically set if only one journal exists otherwise an error will be thrown.
             */
            journal_id?: string | null;
            /** @default posted */
            status: components['schemas']['MiscellaneousOperationStatusIn'] | null;
        };
        /** MiscellaneousOperationLine */
        MiscellaneousOperationLine: {
            /**
             * Line Number
             * @default 1
             */
            line_number: number | null;
            /** Description */
            description?: string | null;
            /**
             * Amount
             * @description Positive for Credit and negative for Debit.
             */
            amount: number;
            type: components['schemas']['MiscellaneousOperationLineType'];
            /** Account Number */
            account_number: string;
            /**
             * Partner Id
             * @description Must be filled in it is a 'customer_account' or 'supplier_account' line type.
             */
            partner_id?: string | null;
            /** Analytic Account */
            analytic_account?: string | null;
        };
        /**
         * MiscellaneousOperationLineType
         * @enum {string}
         */
        MiscellaneousOperationLineType: 'customer_account' | 'supplier_account' | 'general_account';
        /** MiscellaneousOperationOut */
        MiscellaneousOperationOut: {
            /** Operation Number */
            operation_number?: string | null;
            /**
             * Currency
             * @description Indicates the currency of the operation (e.g. EUR).
             */
            currency: string;
            /**
             * Currency Exchange Rate
             * @description Indicates the exchange rate at the date of the operation. Must be filled in when creating the operation in another currency from the default currency of the accounting system.
             * @default 1
             */
            currency_exchange_rate: number | null;
            /** Lines */
            lines: components['schemas']['MiscellaneousOperationLine'][];
            /**
             * Operation Date
             * @description Accounting date of the miscellaneous operation. It is automatically set to '1970-01-01' if the value is not available/empty in the accounting system.
             * @default 1970-01-01
             */
            operation_date: string | null;
            /**
             * Journal Id
             * @description Indicates the journal used in for the operation.
             */
            journal_id: string;
            status: components['schemas']['MiscellaneousOperationStatusOut'];
            /** Id */
            id: string;
        };
        /**
         * MiscellaneousOperationStatusIn
         * @enum {string}
         */
        MiscellaneousOperationStatusIn: 'draft' | 'posted';
        /**
         * MiscellaneousOperationStatusOut
         * @enum {string}
         */
        MiscellaneousOperationStatusOut: 'cancelled' | 'draft' | 'posted' | 'matched';
        /** MultipleMatchingIn */
        MultipleMatchingIn: {
            /** Matchings */
            matchings: components['schemas']['MatchingIn'][];
        };
        /** MultipleMatchingOut */
        MultipleMatchingOut: {
            /** Matching Number */
            matching_number?: string | null;
            /** Processed */
            processed: boolean;
            /** Error Msg */
            error_msg?: {
                [key: string]: unknown;
            } | null;
        };
        /** NextDocumentNumber */
        NextDocumentNumber: {
            /** Bookyear Name */
            bookyear_name?: string | null;
            /** Next Document Number */
            next_document_number?: string | null;
            /** Start Date */
            start_date?: string | null;
            /** End Date */
            end_date?: string | null;
        };
        /** NlPaymentTermsSplit */
        NlPaymentTermsSplit: {
            g_account: components['schemas']['PaymentTermAccountInfo'];
            n_account: components['schemas']['PaymentTermAccountInfo'];
        };
        /** ObjectivesItem */
        ObjectivesItem: {
            /**
             * Total
             * @description Total amount including tax of the sales
             */
            total: number;
            /**
             * Tax Amount
             * @description Total amount of the taxes
             */
            tax_amount: number;
        };
        /** OpportunityItem */
        OpportunityItem: {
            /**
             * Id
             * @description Technical id in Chift
             */
            id: string;
            /** @description Technical id in the target software */
            source_ref: components['schemas']['Ref'];
            /**
             * Name
             * @description Name
             */
            name: string;
            /**
             * Total
             * @description Total
             */
            total: number;
            /**
             * Probability
             * @description Probability of success
             */
            probability: number;
            /** @description Status */
            status: components['schemas']['OpportunityStatus'];
            /**
             * Partner Id
             * @description Technical id of the customer in Chift
             */
            partner_id?: string | null;
            /**
             * Comment
             * @description Comment
             */
            comment?: string | null;
            /**
             * Currency
             * @description Currency matching target sofware name
             */
            currency?: string | null;
            /**
             * Description
             * @description Description
             */
            description?: string | null;
            /**
             * Pipe Status
             * @description Current stage in pipeline
             */
            pipe_status?: string | null;
            /**
             * Pipe Name
             * @description Pipeline name
             */
            pipe_name?: string | null;
            /**
             * Created Date
             * @description Date creation
             */
            created_date?: string | null;
            /**
             * Due Date
             * @description Due Date
             */
            due_date?: string | null;
            /**
             * End Date
             * @description End Date
             */
            end_date?: string | null;
            /**
             * Is Won
             * @description Is won?
             */
            is_won?: boolean | null;
            /** @description Employee/User */
            owner_ref?: components['schemas']['FieldRef'] | null;
        };
        /**
         * OpportunityStatus
         * @enum {string}
         */
        OpportunityStatus: 'open' | 'won' | 'lost' | 'cancelled' | 'closed';
        /** OrderCustomerItem */
        OrderCustomerItem: {
            /** First Name */
            first_name?: string | null;
            /** Last Name */
            last_name?: string | null;
            /** Phone */
            phone?: string | null;
            /** Internal Notes */
            internal_notes?: string | null;
            /** Email */
            email: string;
        };
        /** OrderCustomerItemOut */
        OrderCustomerItemOut: {
            /** First Name */
            first_name?: string | null;
            /** Last Name */
            last_name?: string | null;
            /** Phone */
            phone?: string | null;
            /** Internal Notes */
            internal_notes?: string | null;
            /** Email */
            email?: string | null;
            /**
             * Id
             * @description Technical id of the customer in Chift
             */
            id: string;
        };
        /** OrderItemIn */
        OrderItemIn: {
            customer: components['schemas']['OrderCustomerItem'];
            billing_address: components['schemas']['backbone_common__models__commerce__common__AddressItemIn'];
            shipping_address: components['schemas']['backbone_common__models__commerce__common__AddressItemIn'];
            /**
             * Currency
             * @description Indicates the currency of the order (e.g. EUR).
             */
            currency: string;
            /** Note */
            note?: string | null;
            /** Lines */
            lines: components['schemas']['OrderLineItemIn'][];
            /**
             * Payment Method
             * @description If filled in the order will be marked as paid and processed by this payment method.
             */
            payment_method?: string | null;
        };
        /** OrderItemOut */
        OrderItemOut: {
            /**
             * Id
             * @description Technical id in Chift
             */
            id: string;
            /** @description Technical id in the target software */
            source_ref: components['schemas']['Ref'];
            /** Order Number */
            order_number?: string | null;
            customer?: components['schemas']['OrderCustomerItemOut'] | null;
            billing_address?:
                | components['schemas']['backbone_common__models__commerce__common__AddressItemOut']
                | null;
            shipping_address?:
                | components['schemas']['backbone_common__models__commerce__common__AddressItemOut']
                | null;
            /** Created On */
            created_on?: string | null;
            /** Last Updated On */
            last_updated_on?: string | null;
            /** Confirmed On */
            confirmed_on?: string | null;
            /** Delivery Date */
            delivery_date?: string | null;
            /** Cancelled On */
            cancelled_on?: string | null;
            status: components['schemas']['OrderStatus'];
            /** Discount Amount */
            discount_amount: number;
            /**
             * Untaxed Amount Without Fees
             * @description Untaxed amount without fees (e.g. shipping) but with discout. Refunds and returns are not included.
             */
            untaxed_amount_without_fees: number;
            /**
             * Tax Amount Without Fees
             * @description Total taxes applied to the order without taxes linked to fees (e.g. shipping).
             */
            tax_amount_without_fees: number;
            /**
             * Total Without Fees
             * @description Total of the order without fees (e.g. shipping) but with discount. Refunds and returns are not included.
             */
            total_without_fees: number;
            /**
             * Current Untaxed Amount
             * @description Untaxed amount with discout and any kind of fee (e.g. shipping). After returns, removes and returns.
             */
            current_untaxed_amount: number;
            /**
             * Current Tax Amount
             * @description Total taxes applied to the order. After returns, removes and returns.
             */
            current_tax_amount: number;
            /**
             * Current Total
             * @description Current total of the order with discount. After returns, removes and returns.
             */
            current_total: number;
            /**
             * Untaxed Amount
             * @description Untaxed amount with discout and any kind of fee (e.g. shipping). Refunds and returns are not included.
             */
            untaxed_amount: number;
            /**
             * Tax Amount
             * @description Total taxes applied to the order. Refunds and returns are not included.
             */
            tax_amount: number;
            /**
             * Total
             * @description Total of the order with discount. Refunds and returns are not included.
             */
            total: number;
            /**
             * Refunded Amount
             * @default 0
             */
            refunded_amount: number | null;
            /**
             * Currency
             * @description Indicates the currency of the order (e.g. EUR).
             */
            currency: string;
            /** Note */
            note?: string | null;
            /**
             * Tags
             * @default []
             */
            tags: string[] | null;
            /** Lines */
            lines: components['schemas']['OrderLineItemOut'][];
            /**
             * Other Fees
             * @default []
             */
            other_fees: components['schemas']['FeesItem'][] | null;
            /**
             * Payment Method Id
             * @description Technical id of the payment method in the eCommerce
             */
            payment_method_id?: string | null;
            /**
             * Transactions
             * @default []
             */
            transactions: components['schemas']['OrderTransactions'][] | null;
            /**
             * Payment Methods
             * @default []
             */
            payment_methods: components['schemas']['OrderPaymentMethods'][] | null;
            /** Detailed Refunds */
            detailed_refunds?: components['schemas']['OrderRefundItem'][] | null;
            /**
             * Returns
             * @default []
             */
            returns: components['schemas']['OrderReturnItem'][] | null;
        };
        /** OrderLineItemIn */
        OrderLineItemIn: {
            /**
             * Variant Id
             * @description Technical id of the product variant in Chift
             */
            variant_id: string;
            /** Quantity */
            quantity: number;
            /**
             * Tax Rate
             * @description Indicates the tax rate used for the line (e.g. 21.0).
             */
            tax_rate: number;
            /**
             * Unit Price
             * @description Unit price of the product without taxes.
             */
            unit_price: number;
        };
        /** OrderLineItemOut */
        OrderLineItemOut: {
            /**
             * Id
             * @description Technical id in Chift
             */
            id: string;
            /** @description Technical id in the target software */
            source_ref: components['schemas']['Ref'];
            /** Created On */
            created_on?: string | null;
            /** @description Product variant */
            variant?: components['schemas']['OrderLineProductVariantItem'] | null;
            /** Quantity */
            quantity: number;
            /**
             * Current Quantity
             * @description Quantity without refunds and returns.
             */
            current_quantity: number;
            /**
             * Unit Price
             * @description Unit price of the product without taxes.
             */
            unit_price: number;
            /** Description */
            description: string;
            /**
             * Tax Id
             * @description Technical id of the tax rate in Chift
             */
            tax_id?: string | null;
            /**
             * Tax Rate
             * @description Indicates the tax rate used for the line (e.g. 21.0).
             */
            tax_rate: number;
            /**
             * Untaxed Amount
             * @description Untaxed amount of the order line with discount.
             */
            untaxed_amount: number;
            /**
             * Tax Amount
             * @description Total taxes applied to the order line.
             */
            tax_amount: number;
            /**
             * Total
             * @description Total of the order line with discount.
             */
            total: number;
            /**
             * Discounts
             * @default []
             */
            discounts:
                | components['schemas']['backbone_common__models__commerce__common__DiscountItem'][]
                | null;
            /**
             * Gift Card
             * @default false
             */
            gift_card: boolean | null;
        };
        /** OrderLineProductVariantItem */
        OrderLineProductVariantItem: {
            /**
             * Id
             * @description Technical id of the product variant in Chift
             */
            id: string;
            /** Sku */
            sku?: string | null;
            /** Name */
            name: string;
            /**
             * Categories
             * @default []
             */
            categories:
                | components['schemas']['backbone_common__models__commerce__common__ProductCategoryItem'][]
                | null;
        };
        /** OrderPaymentMethods */
        OrderPaymentMethods: {
            /**
             * Id
             * @description Technical id of the payment method in the eCommerce
             */
            id: string;
            /**
             * Name
             * @description Name of the payment method
             */
            name?: string | null;
        };
        /** OrderRefundItem */
        OrderRefundItem: {
            /**
             * Id
             * @description Technical id in Chift
             */
            id: string;
            /** @description Technical id in the target software */
            source_ref: components['schemas']['Ref'];
            /** Created On */
            created_on?: string | null;
            /** Total */
            total: number;
            /** Reason */
            reason?: string | null;
            /**
             * Order Lines
             * @default []
             */
            order_lines: components['schemas']['RefundOrderLineItem'][] | null;
            /**
             * Other
             * @default 0
             */
            other: number | null;
            /**
             * Shipping Refunds
             * @default []
             */
            shipping_refunds: components['schemas']['ShippingRefund'][] | null;
            /**
             * Other Fees
             * @default []
             */
            other_fees: components['schemas']['RefundFeesItem'][] | null;
            /**
             * Transactions
             * @default []
             */
            transactions: components['schemas']['OrderTransactions'][] | null;
        };
        /** OrderReturnItem */
        OrderReturnItem: {
            /**
             * Id
             * @description Technical id of the return in Chift
             */
            id: string;
            /** @description Technical id in the target software */
            source_ref: components['schemas']['Ref'];
            /** Created On */
            created_on?: string | null;
            /**
             * Order Lines
             * @default []
             */
            order_lines: components['schemas']['ReturnOrderLineItem'][] | null;
            /**
             * New Lines
             * @default []
             */
            new_lines: components['schemas']['ReturnOrderLineItem'][] | null;
            /**
             * Linked Fees
             * @default []
             */
            linked_fees: components['schemas']['ReturnFeesItem'][] | null;
        };
        /**
         * OrderStatus
         * @enum {string}
         */
        OrderStatus:
            | 'cancelled_unpaid'
            | 'cancelled'
            | 'draft'
            | 'confirmed'
            | 'shipped'
            | 'refunded';
        /** OrderTransactions */
        OrderTransactions: {
            /**
             * Id
             * @description Technical id of the transaction in the eCommerce
             */
            id: string;
            /** Created On */
            created_on?: string | null;
            /**
             * Payment Method Id
             * @description Technical id of the payment method in the eCommerce
             */
            payment_method_id?: string | null;
            /**
             * Payment Method Name
             * @description Name of the payment method
             */
            payment_method_name?: string | null;
            /** Amount */
            amount: number;
            status: components['schemas']['TransactionStatus'];
        };
        /** OriginalOutstandingItem */
        OriginalOutstandingItem: {
            /** Id */
            id?: string | null;
            /** Number */
            number?: string | null;
            /** Journal Id */
            journal_id?: string | null;
            journal_type?: components['schemas']['JournalType'] | null;
            /** Date */
            date?: string | null;
            /** Due Date */
            due_date?: string | null;
            /** Reference */
            reference?: string | null;
        };
        /** OutstandingItem */
        OutstandingItem: {
            /** Id */
            id: string;
            /** Number */
            number?: string | null;
            /** Journal Id */
            journal_id: string;
            journal_type: components['schemas']['JournalType'];
            /**
             * Date
             * Format: date
             */
            date: string;
            /** Due Date */
            due_date?: string | null;
            /** Currency */
            currency: string;
            /** Currency Exchange Rate */
            currency_exchange_rate: number;
            /** Amount */
            amount: number;
            /** Open Amount */
            open_amount: number;
            /** Partner Id */
            partner_id: string;
            /** Account Number */
            account_number: string;
            /** Reference */
            reference?: string | null;
            /**
             * Matching Numbers
             * @default []
             */
            matching_numbers: string[] | null;
            /** Payment Communication */
            payment_communication?: string | null;
            /** Posted */
            posted: boolean;
            original_document?: components['schemas']['OriginalOutstandingItem'] | null;
        };
        /**
         * OutstandingType
         * @enum {string}
         */
        OutstandingType: 'client' | 'supplier';
        /** PMSAccountingCategoryItem */
        PMSAccountingCategoryItem: {
            /**
             * Id
             * @description Unique identifier of the accounting category
             */
            id: string;
            /** @description Technical id in the target software */
            source_ref: components['schemas']['Ref'];
            /**
             * Name
             * @description Name given to the accounting category
             */
            name: string;
            /**
             * Code
             * @description Code assigned to the category
             */
            code?: string | null;
            /**
             * Ledger Account Code
             * @description Ledger account code assigned to the category
             */
            ledger_account_code?: string | null;
            /**
             * Posting Account Code
             * @description Posting account code assigned to the category
             */
            posting_account_code?: string | null;
        };
        /** PMSClosureItem */
        PMSClosureItem: {
            /**
             * Date
             * Format: date
             * @description Date of the closure
             */
            date: string;
            /** @description Status of the closure */
            status: components['schemas']['ClosureStates'];
            /**
             * Closures
             * @description Info about closures related to specific day
             * @default []
             */
            closures: components['schemas']['POSClosureInformationItem'][] | null;
        };
        /** PMSCustomerItem */
        PMSCustomerItem: {
            /**
             * Id
             * @description Technical id in Chift
             */
            id: string;
            /** @description Technical id in the target software */
            source_ref: components['schemas']['Ref'];
            /**
             * First Name
             * @description First name of the customer. In case the customer is an individual.
             */
            first_name?: string | null;
            /**
             * Last Name
             * @description Last name of the customer. In case the customer is an individual.
             */
            last_name?: string | null;
            /**
             * Company Name
             * @description Company name of the customer. In case the customer is a company.
             */
            company_name?: string | null;
            /**
             * Phone
             * @description Phone number of the customer
             */
            phone?: string | null;
            /**
             * Email
             * @description Email address of the customer
             */
            email?: string | null;
            /**
             * Account Number
             * @description Number of the accounting account used (e.g. 701000)
             */
            account_number?: string | null;
            /**
             * Created On
             * @description Creation date of the customer
             */
            created_on?: string | null;
            /**
             * Addresses
             * @description List of addresses related to the customer
             */
            addresses?: components['schemas']['AddressItem'][] | null;
        };
        /** PMSInvoiceFullItem */
        PMSInvoiceFullItem: {
            /**
             * Id
             * @description Technical id in Chift
             */
            id: string;
            /** @description Technical id in the target software */
            source_ref: components['schemas']['Ref'];
            /**
             * Invoice Number
             * @description Number/sequence
             */
            invoice_number: string | null;
            /**
             * Creation Date
             * @description Creation date of the invoice
             */
            creation_date?: string | null;
            /**
             * Closing Date
             * @description Closing date of the invoice
             */
            closing_date?: string | null;
            /**
             * Partners
             * @description List of partners related to the invoice
             */
            partners?: components['schemas']['InvoicePartnerItem'][] | null;
            /**
             * Items
             * @description List of items related to the invoice
             */
            items: components['schemas']['PMSOrderLineItem'][];
            /**
             * Payments
             * @description List of payments related to the invoice
             */
            payments: components['schemas']['PMSPaymentItem'][];
            /**
             * Service Id
             * @description Reference to the service related to this order
             */
            service_id?: string | null;
            /** @description Reference to the reservation related to this order */
            reservation?: components['schemas']['ReservationItem'] | null;
            /**
             * Tax Amount
             * @description Taxes amount
             */
            tax_amount: number;
            /**
             * Untaxed Amount
             * @description Untaxed amount
             */
            untaxed_amount: number;
            /**
             * Total
             * @description Total amount incl. taxes
             */
            total: number;
        };
        /** PMSLocationItem */
        PMSLocationItem: {
            /**
             * Id
             * @description Unique identifier of the location
             */
            id: string;
            /**
             * Name
             * @description Name given to the location
             */
            name: string;
            /**
             * Timezone
             * @description Indicates the timezone of the location. TZ notation, e.g. Europe/Brussels .
             */
            timezone?: string | null;
            /** @description Address of the location */
            address?: components['schemas']['AddressItem'] | null;
        };
        /** PMSOrderItem */
        PMSOrderItem: {
            /**
             * Id
             * @description Unique identifier of the order
             */
            id: string;
            /** @description Technical id in the target software */
            source_ref: components['schemas']['Ref'];
            /**
             * Order Number
             * @description Order number (often unique reference during the day)
             */
            order_number?: string | null;
            /**
             * Creation Date
             * Format: date-time
             * @description Creation date of the order
             */
            creation_date: string;
            /**
             * Closing Date
             * @description Closing date of the order
             */
            closing_date?: string | null;
            /**
             * Service Date
             * @description Indicates the date of the service to which the order belongs (can be used to group orders by closure date)
             */
            service_date?: string | null;
            /**
             * Device Id
             * @description ID of device that created the order
             */
            device_id?: string | null;
            /**
             * Total
             * @description Total amount including tax of the order
             */
            total: number;
            /**
             * Tax Amount
             * @description Total amount of the taxes of the order
             */
            tax_amount: number;
            /**
             * Total Discount
             * @description Total amount of the discounts of the order
             * @default 0
             */
            total_discount: number | null;
            /**
             * Total Refund
             * @description Total amount of the refunds of the order
             * @default 0
             */
            total_refund: number | null;
            /**
             * Total Tip
             * @description Total amount of the tips of the order. Tips are not part of the total of the order
             * @default 0
             */
            total_tip: number | null;
            /**
             * Delivery Fee
             * @description Total amount of the delivery fees of the order
             * @default 0
             */
            delivery_fee: number | null;
            /**
             * Currency
             * @description Currency of the order
             */
            currency?: string | null;
            /**
             * Country
             * @description Country of the order, format: ISO 3166-1 codes.
             */
            country?: string | null;
            /**
             * Loyalty
             * @description Loyalty points of the order
             */
            loyalty?: number | null;
            /**
             * Customer Id
             * @description Unique identifier of the customer
             */
            customer_id?: string | null;
            /**
             * Location Id
             * @description Unique identifier of the location
             */
            location_id?: string | null;
            /**
             * Taxes
             * @description List of taxes of the order
             * @default []
             */
            taxes: components['schemas']['TotalTaxItem'][] | null;
            /**
             * Guests
             * @description Number of guests linked to the order
             */
            guests?: number | null;
            /**
             * Items
             * @description List of items related to the order
             */
            items: components['schemas']['PMSOrderLineItem'][];
            /**
             * Service Id
             * @description Reference to the service related to this order
             */
            service_id?: string | null;
            /** @description Reference to the reservation related to this order */
            reservation?: components['schemas']['ReservationItem'] | null;
            /**
             * Bills
             * @description Reference to the bills related to this order
             */
            bills?: components['schemas']['InvoiceItem-Output'][] | null;
        };
        /** PMSOrderLineItem */
        PMSOrderLineItem: {
            /**
             * Id
             * @description Unique identifier of the order line item
             */
            id: string;
            /** @description Technical id in the target software */
            source_ref: components['schemas']['Ref'];
            /** @description Type of the order line item */
            type?: components['schemas']['POSLineItemType'] | null;
            /**
             * Menu Id
             * @description Unique identifier of the menu
             */
            menu_id?: string | null;
            /**
             * Quantity
             * @description Quantity of the order line item
             */
            quantity: number;
            /**
             * Unit Price
             * @description Unit price (without tax) of the order line item
             */
            unit_price: number;
            /**
             * Total
             * @description Total amount including tax of the order line item
             */
            total: number;
            /**
             * Tax Amount
             * @description Total amount of the taxes of the order line item
             */
            tax_amount: number;
            /**
             * Tax Rate
             * @description Tax rate of the order line item
             */
            tax_rate?: number | null;
            /**
             * Description
             * @description Description of the order line item
             */
            description?: string | null;
            /**
             * Discounts
             * @description List of discounts of the order line item. Discounts of items are always part of the total discount of the order
             * @default []
             */
            discounts:
                | components['schemas']['backbone_common__models__pos_pms__DiscountItem'][]
                | null;
            /**
             * Product Id
             * @description Reference to the product related to this item
             */
            product_id?: string | null;
            /**
             * Accounting Category Id
             * @description Sometimes used by a POS to give a specific accounting category to an order item
             */
            accounting_category_id?: string | null;
        };
        /** PMSPaymentItem */
        PMSPaymentItem: {
            /**
             * Id
             * @description Unique identifier of the payment
             */
            id?: string | null;
            /** @description Technical id in the target software */
            source_ref: components['schemas']['Ref'];
            /**
             * Payment Method Id
             * @description Unique identifier of the payment method used for the payment
             */
            payment_method_id?: string | null;
            /**
             * Payment Method Name
             * @description Chift's name of the payment method used for the payment
             */
            payment_method_name?: string | null;
            /**
             * Total
             * @description Total amount of the payment
             */
            total: number;
            /**
             * Tip
             * @description Total amount of the tips of the payment. Tips are not part of the total of the payment
             * @default 0
             */
            tip: number | null;
            /**
             * @description Status of the payment
             * @default Unknown
             */
            status: components['schemas']['backbone_common__models__pos_pms__PaymentStatus'] | null;
            /**
             * Currency
             * @description Currency of the payment
             */
            currency?: string | null;
            /**
             * Date
             * @description Date of the payment
             */
            date?: string | null;
            /** @description Reference to the customer related to this payment */
            partner_id?: components['schemas']['ChiftId'] | null;
        };
        /** PMSPaymentMethods */
        PMSPaymentMethods: {
            /**
             * Id
             * @description Unique identifier of the payment method
             */
            id: string;
            /** @description Technical id in the target software */
            source_ref: components['schemas']['Ref'];
            /**
             * Name
             * @description Chift's name of the payment method (e.g. 'Cash', 'Card', 'Transfer', ...)
             */
            name: string;
            /**
             * Extra
             * @description Original name of the payment method
             */
            extra?: string | null;
            /**
             * Ledger Account Code
             * @description Ledger account code assigned to the category
             */
            ledger_account_code?: string | null;
        };
        /**
         * PMSStates
         * @enum {string}
         */
        PMSStates: 'consumed' | 'closed';
        /** PMSTaxRateItem */
        PMSTaxRateItem: {
            /**
             * Id
             * @description Technical id in Chift
             */
            id: string;
            /** @description Technical id in the target software */
            source_ref: components['schemas']['Ref'];
            /**
             * Label
             * @description Label of the tax rate
             */
            label?: string | null;
            /**
             * Rate
             * @description Percentage of the tax rate
             */
            rate?: number | null;
        };
        /** POSClosureInformationItem */
        POSClosureInformationItem: {
            /** Id */
            id: string;
            /**
             * Total
             * @description Total amount of the payments in current closure
             */
            total: number;
            /**
             * Tax Amount
             * @description Total tax amount the in current closure
             */
            tax_amount: number;
            /**
             * Payments
             * @description List of payments related to current closure
             * @default []
             */
            payments: components['schemas']['ClosurePaymentItem'][] | null;
            /**
             * Taxes
             * @description List of taxes related to current closure
             * @default []
             */
            taxes: components['schemas']['TotalTaxItem'][] | null;
        };
        /** POSCreateCustomerItem */
        POSCreateCustomerItem: {
            /**
             * First Name
             * @description First name of the customer
             */
            first_name: string;
            /**
             * Last Name
             * @description Last name of the customer
             */
            last_name: string;
            /**
             * Phone
             * @description Phone number (mobile, home, work, ...) of the customer
             */
            phone?: string | null;
            /**
             * Email
             * @description Email address of the customer
             */
            email?: string | null;
            /** @description Address of the customer */
            address?: components['schemas']['PostAddressItem'] | null;
        };
        /** POSCustomerItem */
        POSCustomerItem: {
            /**
             * Id
             * @description Unique identifier of the customer
             */
            id: string;
            /**
             * First Name
             * @description First name of the customer
             */
            first_name?: string | null;
            /**
             * Last Name
             * @description Last name of the customer
             */
            last_name?: string | null;
            /**
             * Name
             * @description Name (first name + last name) of the customer
             */
            name: string;
            /**
             * Phone
             * @description Phone number (mobile, home, work, ...) of the customer
             */
            phone?: string | null;
            /**
             * Email
             * @description Email address of the customer
             */
            email?: string | null;
            /**
             * Created On
             * @description Date and time when the customer was created
             */
            created_on?: string | null;
            /**
             * Addresses
             * @description List of addresses of the customer
             * @default []
             */
            addresses: components['schemas']['AddressItem'][] | null;
            /**
             * Loyalty
             * @description Loyalty points of the customer
             */
            loyalty?: number | null;
            /**
             * Birthdate
             * @description Birthdate of the customer
             */
            birthdate?: string | null;
        };
        /** POSItem */
        POSItem: {
            /**
             * Id
             * @description Unique identifier of the order line item
             */
            id: string;
            /** @description Type of the order line item */
            type?: components['schemas']['POSLineItemType'] | null;
            /**
             * Menu Id
             * @description Unique identifier of the menu
             */
            menu_id?: string | null;
            /**
             * Quantity
             * @description Quantity of the order line item
             */
            quantity: number;
            /**
             * Unit Price
             * @description Unit price (without tax) of the order line item
             */
            unit_price: number;
            /**
             * Total
             * @description Total amount including tax of the order line item
             */
            total: number;
            /**
             * Tax Amount
             * @description Total amount of the taxes of the order line item
             */
            tax_amount: number;
            /**
             * Tax Rate
             * @description Tax rate of the order line item
             */
            tax_rate?: number | null;
            /**
             * Description
             * @description Description of the order line item
             */
            description?: string | null;
            /**
             * Discounts
             * @description List of discounts of the order line item. Discounts of items are always part of the total discount of the order
             * @default []
             */
            discounts:
                | components['schemas']['backbone_common__models__pos_pms__DiscountItem'][]
                | null;
            /**
             * Product Id
             * @description Reference to the product related to this item
             */
            product_id?: string | null;
            /**
             * Accounting Category Id
             * @description Sometimes used by a POS to give a specific accounting category to an order item
             */
            accounting_category_id?: string | null;
        };
        /**
         * POSLineItemType
         * @enum {string}
         */
        POSLineItemType: 'menu' | 'product' | 'general_discount';
        /** POSLocationItem */
        POSLocationItem: {
            /**
             * Id
             * @description Unique identifier of the location
             */
            id: string;
            /**
             * Name
             * @description Name given to the location
             */
            name: string;
            /**
             * Timezone
             * @description Indicates the timezone of the location. TZ notation, e.g. Europe/Brussels .
             */
            timezone?: string | null;
            /** @description Address of the location */
            address?: components['schemas']['AddressItem'] | null;
        };
        /** POSOrderItem */
        POSOrderItem: {
            /**
             * Id
             * @description Unique identifier of the order
             */
            id: string;
            /**
             * Order Number
             * @description Order number (often unique reference during the day)
             */
            order_number?: string | null;
            /**
             * Creation Date
             * Format: date-time
             * @description Creation date of the order
             */
            creation_date: string;
            /**
             * Closing Date
             * @description Closing date of the order
             */
            closing_date?: string | null;
            /**
             * Service Date
             * @description Indicates the date of the service to which the order belongs (can be used to group orders by closure date)
             */
            service_date?: string | null;
            /**
             * Device Id
             * @description ID of device that created the order
             */
            device_id?: string | null;
            /**
             * Total
             * @description Total amount including tax of the order
             */
            total: number;
            /**
             * Tax Amount
             * @description Total amount of the taxes of the order
             */
            tax_amount: number;
            /**
             * Total Discount
             * @description Total amount of the discounts of the order
             * @default 0
             */
            total_discount: number | null;
            /**
             * Total Refund
             * @description Total amount of the refunds of the order
             * @default 0
             */
            total_refund: number | null;
            /**
             * Total Tip
             * @description Total amount of the tips of the order. Tips are not part of the total of the order
             * @default 0
             */
            total_tip: number | null;
            /**
             * Delivery Fee
             * @description Total amount of the delivery fees of the order
             * @default 0
             */
            delivery_fee: number | null;
            /**
             * Currency
             * @description Currency of the order
             */
            currency?: string | null;
            /**
             * Country
             * @description Country of the order, format: ISO 3166-1 codes.
             */
            country?: string | null;
            /**
             * Loyalty
             * @description Loyalty points of the order
             */
            loyalty?: number | null;
            /**
             * Customer Id
             * @description Unique identifier of the customer
             */
            customer_id?: string | null;
            /**
             * Location Id
             * @description Unique identifier of the location
             */
            location_id?: string | null;
            /**
             * Taxes
             * @description List of taxes of the order
             * @default []
             */
            taxes: components['schemas']['TotalTaxItem'][] | null;
            /**
             * Guests
             * @description Number of guests linked to the order
             */
            guests?: number | null;
            /**
             * Payments
             * @description List of payments made for the order
             */
            payments: components['schemas']['POSPaymentItem'][];
            /**
             * Items
             * @description List of item lines in the order
             */
            items: components['schemas']['POSItem'][];
        };
        /** POSPaymentItem */
        POSPaymentItem: {
            /**
             * Id
             * @description Unique identifier of the payment
             */
            id?: string | null;
            /**
             * Payment Method Id
             * @description Unique identifier of the payment method used for the payment
             */
            payment_method_id?: string | null;
            /**
             * Payment Method Name
             * @description Chift's name of the payment method used for the payment
             */
            payment_method_name?: string | null;
            /**
             * Total
             * @description Total amount of the payment
             */
            total: number;
            /**
             * Tip
             * @description Total amount of the tips of the payment. Tips are not part of the total of the payment
             * @default 0
             */
            tip: number | null;
            /**
             * @description Status of the payment
             * @default Unknown
             */
            status: components['schemas']['backbone_common__models__pos_pms__PaymentStatus'] | null;
            /**
             * Currency
             * @description Currency of the payment
             */
            currency?: string | null;
            /**
             * Date
             * @description Date of the payment
             */
            date?: string | null;
        };
        /** POSProductItem */
        POSProductItem: {
            /**
             * Id
             * @description Unique identifier of the product
             */
            id: string;
            /**
             * Categories
             * @description List of categories the product belongs to
             * @default []
             */
            categories: string[] | null;
            /**
             * Name
             * @description Name ofthe product
             */
            name: string;
            /**
             * Description
             * @description Description of the product
             */
            description?: string | null;
            /**
             * Prices
             * @description List of prices for the product
             */
            prices: components['schemas']['backbone_common__models__pos__common__ProductPriceItem'][];
            /**
             * Accounting Category Ids
             * @description Used by a POS to give one or more specific accounting categories to a product item. If not available it will use the category ids
             */
            accounting_category_ids?: string[] | null;
        };
        /** Partner */
        Partner: {
            /** External Reference */
            external_reference?: string | null;
            /**
             * First Name
             * @description Only used when the client is an individual (is_company=false). Indicates the first name of the client.
             */
            first_name?: string | null;
            /**
             * Last Name
             * @description Only used when the client is an individual (is_company=false). Indicates the last name of the client.
             */
            last_name?: string | null;
            /** Name */
            name?: string | null;
            /**
             * Function
             * @description Only used when the client is an individual (is_company=false). Indicates the function of the client.
             */
            function?: string | null;
            /**
             * Is Company
             * @description Indicates if the client is an individual or a company.
             * @default true
             */
            is_company: boolean | null;
            /**
             * Company Id
             * @description Only used when the client is an individual (is_company=false). Indicates the id of the company linked to the client.
             */
            company_id?: string | null;
            /** Phone */
            phone?: string | null;
            /** Mobile */
            mobile?: string | null;
            /** Email */
            email?: string | null;
            /**
             * Language
             * @description Format: ISO 639-1 codes.
             */
            language?: string | null;
            /** Internal Notes */
            internal_notes?: string | null;
            /** Website */
            website?: string | null;
            /** Vat */
            vat?: string | null;
            /**
             * Iban
             * @description IBAN Account number of the client.
             */
            iban?: string | null;
            /**
             * Bank Account
             * @description Bank account number of the client.
             */
            bank_account?: string | null;
            /**
             * Currency
             * @description Indicates the currency of the client (e.g. EUR).
             */
            currency?: string | null;
            /**
             * Active
             * @default true
             */
            active: boolean | null;
            /** Account Number */
            account_number?: string | null;
            /** Company Number */
            company_number?: string | null;
            /** Id */
            id?: string | null;
            /**
             * Last Updated On
             * @description The last time the client has been updated.
             */
            last_updated_on?: string | null;
            /**
             * Addresses
             * @default []
             */
            addresses:
                | components['schemas']['backbone_common__models__common__AddressItemOut'][]
                | null;
        };
        /**
         * PartnerType
         * @enum {string}
         */
        PartnerType: 'owner' | 'account';
        /** PatchConnectionItem */
        PatchConnectionItem: {
            /**
             * Redirect
             * @description Indicates whether you want to return to the consumer's redirectUrl after update (true) or whether you want to return on the connection page (false)
             * @default false
             */
            redirect: boolean | null;
            /**
             * Name
             * @description Can be used to update the name of an existing connection
             */
            name?: string | null;
            /**
             * Credentials
             * @description Can be used to update the credentials of an existing connection. Please use the getIntegrations route to see the available credentials for each integration
             */
            credentials?: components['schemas']['CredentialItem-Input'][] | null;
        };
        /** Payment */
        Payment: {
            /** Id */
            id: string;
            /** Name */
            name: string;
            /** Currency */
            currency: string;
            /**
             * Amount
             * @description Total amount of the payment. A part of this amount could be reconciled with another invoice.
             */
            amount: number;
            /**
             * Dedicated Amount
             * @description Amount of the payment dedicated to the invoice. Zero the accounting software doesn't provide the information.
             * @default 0
             */
            dedicated_amount: number;
            /**
             * Payment Date
             * Format: date
             */
            payment_date: string;
            journal_type: components['schemas']['JournalType'];
            /** Journal Id */
            journal_id: string;
            /** Journal Name */
            journal_name: string;
            /**
             * Reconciled
             * @default false
             */
            reconciled: boolean | null;
            /** Communication */
            communication?: string | null;
            /** Matching Number */
            matching_number?: string | null;
        };
        /** PaymentItemOut */
        PaymentItemOut: {
            /**
             * Id
             * @description Technical id in Chift
             */
            id: string;
            /** @description Technical id in the target software */
            source_ref: components['schemas']['Ref'];
            /** @description Payment status */
            status: components['schemas']['backbone_common__models__payment__common__PaymentStatus'];
            /**
             * Description
             * @description Description
             */
            description: string;
            /**
             * Amount
             * @description Amount
             */
            amount: number;
            /**
             * Currency
             * @description Currency
             */
            currency: string;
            /**
             * Payment Date
             * Format: date-time
             * @description Date of creation
             */
            payment_date: string;
            /**
             * Partner Id
             * @description Partner ID
             */
            partner_id?: string | null;
        };
        /** PaymentMethodItem */
        PaymentMethodItem: {
            /**
             * Id
             * @description Technical id in Chift
             */
            id: string;
            /** @description Technical id in the target software */
            source_ref: components['schemas']['Ref'];
            /** Name */
            name: string;
            /** Active */
            active: boolean;
        };
        /** PaymentMethods */
        PaymentMethods: {
            /**
             * Id
             * @description Unique identifier of the payment method
             */
            id: string;
            /**
             * Name
             * @description Chift's name of the payment method (e.g. 'Cash', 'Card', 'Transfer', ...)
             */
            name: string;
            /**
             * Extra
             * @description Original name of the payment method
             */
            extra?: string | null;
        };
        /** PaymentReporting */
        PaymentReporting: {
            /** @description Payment method */
            method?: components['schemas']['PaymentReportingMethod'] | null;
            /** @description Payment conditions */
            conditions?: components['schemas']['PaymentReportingConditions'] | null;
        };
        /**
         * PaymentReportingConditions
         * @enum {string}
         */
        PaymentReportingConditions: 'TP01' | 'TP02' | 'TP03';
        /**
         * PaymentReportingMethod
         * @enum {string}
         */
        PaymentReportingMethod:
            | 'MP01'
            | 'MP02'
            | 'MP03'
            | 'MP04'
            | 'MP05'
            | 'MP06'
            | 'MP07'
            | 'MP08'
            | 'MP09'
            | 'MP10'
            | 'MP11'
            | 'MP12'
            | 'MP13'
            | 'MP14'
            | 'MP15'
            | 'MP16'
            | 'MP17'
            | 'MP18'
            | 'MP19'
            | 'MP20'
            | 'MP21'
            | 'MP22'
            | 'MP23';
        /**
         * PaymentStatus
         * @enum {string}
         */
        'PaymentStatus-Input': 'all' | 'unpaid' | 'paid';
        /** PaymentTermAccountInfo */
        PaymentTermAccountInfo: {
            /** Amount */
            amount: number;
            /** Iban */
            iban: string;
        };
        /** PostAddressItem */
        PostAddressItem: {
            /**
             * Name
             * @description Name given to the address (e.g. 'home')
             */
            name: string;
            /**
             * Street
             * @description Street name
             */
            street?: string | null;
            /**
             * Number
             * @description Number of the address
             */
            number?: string | null;
            /**
             * Box
             * @description Box of the address
             */
            box?: string | null;
            /**
             * City
             * @description City name
             */
            city: string;
            /**
             * Postal Code
             * @description Postal code of the address
             */
            postal_code: string;
            /**
             * Country
             * @description Country, format: ISO 3166-1 codes.
             */
            country?: string | null;
        };
        /** PostConnectionItem */
        'PostConnectionItem-Input': {
            /**
             * Integrationid
             * @description Can be used to specify the integration code of a specific connector. If specified, the url will will point directly to the connection page of the connector and will redirect on save to the redirect url of the consumer if specified.
             */
            integrationid?: number | null;
            /**
             * Name
             * @description Can be used to specify the name of the connection. Must be used in combination with an integrationid.
             */
            name?: string | null;
            /**
             * Credentials
             * @description Can be used to specify the credentials of your connection. Must be used in combination with an integrationid and a name. Please use the getIntegrations route to see the available credentials for each integration
             */
            credentials?: components['schemas']['CredentialItem-Input'][] | null;
            /**
             * Country
             * @description ISO 3166-1 alpha-2 country code to filter connectors by country. Ignored if integrationid is provided.
             */
            country?: string | null;
        };
        /** PostConnectionItem */
        'PostConnectionItem-Output': {
            /** Id */
            id: string;
            /** Title */
            title: string;
            /** Optional */
            optional: boolean;
            /** Resource */
            resource: string;
        };
        /** PostConsumerItem */
        PostConsumerItem: {
            /** Name */
            name: string;
            /** Email */
            email?: string | null;
            /** Internal Reference */
            internal_reference?: string | null;
            /** Redirect Url */
            redirect_url?: string | null;
        };
        /** PostSyncFlowEvent */
        PostSyncFlowEvent: {
            /**
             * Consumers
             * @default []
             */
            consumers: string[] | null;
            /**
             * Data
             * @default {}
             */
            data: {
                [key: string]: unknown;
            } | null;
        };
        /** ProductCostItem */
        ProductCostItem: {
            /** Amount */
            amount: number;
            /** Currency */
            currency: string;
        };
        /** ProductItem */
        'ProductItem-Input': {
            /**
             * Name
             * @description Name
             */
            name: string;
            /**
             * Unit Price
             * @description Unit price
             */
            unit_price?: number | null;
            /**
             * Tax Id
             * @description Technical id of the tax in Chift
             */
            tax_id?: string | null;
            /**
             * Code
             * @description Reference/code
             */
            code?: string | null;
            /**
             * Unit
             * @description Unit of measure matching target software name
             */
            unit?: string | null;
            /**
             * Category
             * @description Category matching target software name
             */
            category?: string | null;
            /**
             * Currency
             * @description Currency matching target software name
             */
            currency?: string | null;
            /**
             * Description
             * @description Description
             */
            description?: string | null;
            /**
             * Cost
             * @description Cost of the product
             * @default 0
             */
            cost: number | null;
        };
        /** ProductItem */
        'ProductItem-Output': {
            /**
             * Id
             * @description Technical id in Chift
             */
            id: string;
            /** @description Technical id in the target software */
            source_ref: components['schemas']['Ref'];
            /** Name */
            name: string;
            /** Description */
            description?: string | null;
            /** Description Html */
            description_html?: string | null;
            /**
             * Categories
             * @default []
             */
            categories:
                | components['schemas']['backbone_common__models__commerce__common__ProductCategoryItem'][]
                | null;
            /** Created On */
            created_on?: string | null;
            /**
             * Variants
             * @default []
             */
            variants: components['schemas']['ProductVariantItem'][] | null;
            status?: components['schemas']['ProductStatus'] | null;
            /**
             * Common Attributes
             * @description List of attributes that are shared by all variants of the product.
             * @default []
             */
            common_attributes: components['schemas']['CommonAttributeItem'][] | null;
            /**
             * Variant Attributes Options
             * @default []
             */
            variant_attributes_options:
                | components['schemas']['VariantAttributeOptionItem'][]
                | null;
            /**
             * Common Images
             * @description List of images that are shared by all variants of the product.
             * @default []
             */
            common_images: components['schemas']['ImageItem'][] | null;
        };
        /** ProductItemOut */
        ProductItemOut: {
            /**
             * Id
             * @description Technical id in Chift
             */
            id: string;
            /** @description Technical id in the target software */
            source_ref: components['schemas']['Ref'];
            /**
             * Name
             * @description Name
             */
            name: string;
            /**
             * Unit Price
             * @description Unit price
             */
            unit_price?: number | null;
            /**
             * Tax Id
             * @description Technical id of the tax in Chift
             */
            tax_id?: string | null;
            /**
             * Code
             * @description Reference/code
             */
            code?: string | null;
            /**
             * Unit
             * @description Unit of measure matching target software name
             */
            unit?: string | null;
            /**
             * Category
             * @description Category matching target software name
             */
            category?: string | null;
            /**
             * Currency
             * @description Currency matching target software name
             */
            currency?: string | null;
            /**
             * Description
             * @description Description
             */
            description?: string | null;
            /**
             * Cost
             * @description Cost of the product
             * @default 0
             */
            cost: number | null;
            /**
             * Available Quantity
             * @description Available quanity of the product in stock. Will only be used for products that have an inventory (services will always be 0)
             * @default 0
             */
            available_quantity: number | null;
        };
        /**
         * ProductStatus
         * @enum {string}
         */
        ProductStatus: 'unknown' | 'archived' | 'unpublished' | 'published';
        /** ProductVariantItem */
        ProductVariantItem: {
            /**
             * Id
             * @description Technical id in Chift
             */
            id: string;
            /** @description Technical id in the target software */
            source_ref: components['schemas']['Ref'];
            /**
             * Parent Id
             * @description Technical id of the parent product in Chift
             */
            parent_id: string;
            /** Name */
            name: string;
            /** Description */
            description?: string | null;
            /** Description Html */
            description_html?: string | null;
            /**
             * Categories
             * @default []
             */
            categories:
                | components['schemas']['backbone_common__models__commerce__common__ProductCategoryItem'][]
                | null;
            /** Created On */
            created_on?: string | null;
            /** Sku */
            sku?: string | null;
            /** Barcode */
            barcode?: string | null;
            /**
             * Available Quantity
             * @default 0
             */
            available_quantity: number | null;
            /**
             * Prices
             * @default []
             */
            prices:
                | components['schemas']['backbone_common__models__commerce__common__ProductPriceItem'][]
                | null;
            unit_cost?: components['schemas']['ProductCostItem'] | null;
            /** Unit Of Measure */
            unit_of_measure?: string | null;
            /**
             * Weight
             * @default 0
             */
            weight: number | null;
            /** Weight Unit */
            weight_unit?: string | null;
            status?: components['schemas']['ProductStatus'] | null;
            /**
             * Variant Attributes
             * @description List of attributes that are specific to the variant of the product.
             * @default []
             */
            variant_attributes: components['schemas']['VariantAttributeItem'][] | null;
            /**
             * Variant Images
             * @description List of images that are specific to the variant of the product.
             * @default []
             */
            variant_images: components['schemas']['ImageItem'][] | null;
        };
        /** ReadFlowConsumerItem */
        ReadFlowConsumerItem: {
            /** Name */
            name: string;
            /** Description */
            description?: string | null;
            /** Id */
            id: string;
            config?: components['schemas']['FlowConfig-Output'] | null;
            /** Values */
            values: {
                [key: string]: unknown;
            };
            /**
             * Enabled On
             * @description Date on which the flow was enabled for this consumer
             */
            enabled_on?: string | null;
            trigger: components['schemas']['ReadFlowTrigger'];
        };
        /** ReadFlowItem */
        ReadFlowItem: {
            /** Name */
            name: string;
            /** Description */
            description?: string | null;
            /** Id */
            id: string;
            execution?: components['schemas']['FlowExecution'] | null;
            /** @default {
             *       "datastores": []
             *     } */
            config: components['schemas']['FlowConfig-Output'] | null;
            /** Triggers */
            triggers?: components['schemas']['FlowTrigger'][] | null;
        };
        /** ReadFlowTrigger */
        ReadFlowTrigger: {
            /** Id */
            id: string;
            type: components['schemas']['TriggerType'];
            /** Cronschedule */
            cronschedule?: string | null;
        };
        /** ReadMappingItem */
        ReadMappingItem: {
            /** Source Id */
            source_id?: string | null;
            /** Target Id */
            target_id?: string | null;
        };
        /** ReadSyncItem */
        ReadSyncItem: {
            /** Name */
            name: string;
            /** Connections */
            connections: components['schemas']['backbone_api__app__routers__syncs__ConnectionItem'][];
            /**
             * Mappings
             * @default []
             */
            mappings: components['schemas']['CreateSyncMappingItem-Output'][];
            /**
             * Syncid
             * Format: uuid
             */
            syncid: string;
            /** Consumers */
            consumers: string[];
            /** Flows */
            flows: components['schemas']['ReadFlowItem'][];
        };
        /** ReadSyncMappingItem */
        ReadSyncMappingItem: {
            /** Name */
            name: string;
            /** Description */
            description?: string | null;
            /**
             * Display Order
             * @default 0
             */
            display_order: number;
            /** Challenge Question */
            challenge_question?: string | null;
            /** Values */
            values: components['schemas']['ReadMappingItem'][];
            /** Sub Mapping Name */
            sub_mapping_name: string;
            /** Sub Mapping Description */
            sub_mapping_description?: string | null;
        };
        /** Ref */
        Ref: {
            /**
             * Id
             * @description Technical id in the target software
             */
            id?: string | null;
            /**
             * Model
             * @description Name of the model/entity in the target software
             */
            model?: string | null;
        };
        /** RefundFeesItem */
        RefundFeesItem: {
            /**
             * Id
             * @description Technical id of the fee in Chift
             */
            id: string;
            /** @description Technical id in the target software */
            source_ref: components['schemas']['Ref'];
            type: components['schemas']['FeesType'];
            /** Untaxed Amount */
            untaxed_amount: number;
            /** Tax Amount */
            tax_amount: number;
            /** Total */
            total: number;
        };
        /** RefundItemOut */
        RefundItemOut: {
            /**
             * Id
             * @description Technical id in Chift
             */
            id: string;
            /** @description Technical id in the target software */
            source_ref: components['schemas']['Ref'];
            /** @description Payment status */
            status: components['schemas']['backbone_common__models__payment__common__PaymentStatus'];
            /**
             * Description
             * @description Description
             */
            description: string;
            /**
             * Amount
             * @description Amount
             */
            amount: number;
            /**
             * Currency
             * @description Currency
             */
            currency: string;
            /**
             * Refund Date
             * Format: date-time
             * @description Date of creation
             */
            refund_date: string;
            /**
             * Payment Id
             * @description ID of the payment being refunded
             */
            payment_id?: string | null;
        };
        /** RefundOrderLineItem */
        RefundOrderLineItem: {
            /**
             * Id
             * @description Technical id of the order line in Chift
             */
            id: string;
            /** @description Product variant */
            variant?: components['schemas']['OrderLineProductVariantItem'] | null;
            /** Quantity */
            quantity: number;
            /**
             * Untaxed Amount
             * @description Untaxed amount refunded (after discount).
             */
            untaxed_amount: number;
            /**
             * Tax Amount
             * @description Total taxes refunded (after discount).
             */
            tax_amount: number;
            /**
             * Total
             * @description Total refunded (after discount).
             */
            total: number;
        };
        /** ReservationItem */
        ReservationItem: {
            /**
             * Id
             * @description Technical id in Chift
             */
            id: string;
            /** @description Technical id in the target software */
            source_ref: components['schemas']['Ref'];
            /**
             * Start Date
             * @description Start date of the reservation
             */
            start_date?: string | null;
            /**
             * End Date
             * @description End date of the reservation
             */
            end_date?: string | null;
            /**
             * Creation Date
             * @description Creation date of the reservation
             */
            creation_date?: string | null;
            /** @description Unique reference to the resource related to the reservation */
            resource_id?: components['schemas']['ChiftId'] | null;
            /**
             * Resource Name
             * @description Name of the resource related to the reservation
             */
            resource_name?: string | null;
            /**
             * Resource Identifier
             * @description Identifier of the resource related to the reservation
             */
            resource_identifier?: string | null;
        };
        /** ReturnFeesItem */
        ReturnFeesItem: {
            /**
             * Id
             * @description Technical id of the fee in Chift
             */
            id: string;
            /** @description Technical id in the target software */
            source_ref: components['schemas']['Ref'];
            type: components['schemas']['FeesType'];
            /** Untaxed Amount */
            untaxed_amount: number;
            /** Tax Amount */
            tax_amount: number;
            /** Total */
            total: number;
        };
        /** ReturnOrderLineItem */
        ReturnOrderLineItem: {
            /**
             * Id
             * @description Technical id of the order line in Chift
             */
            id: string;
            /** @description Product variant */
            variant?: components['schemas']['OrderLineProductVariantItem'] | null;
            /** Quantity */
            quantity: number;
            /**
             * Untaxed Amount
             * @description Untaxed amount refunded (after discount).
             */
            untaxed_amount: number;
            /**
             * Tax Amount
             * @description Total taxes refunded (after discount).
             */
            tax_amount: number;
            /**
             * Total
             * @description Total refunded (after discount).
             */
            total: number;
        };
        /** SalesItem */
        SalesItem: {
            /**
             * Total
             * @description Total amount including tax of the sales
             */
            total: number;
            /**
             * Tax Amount
             * @description Total amount of the taxes
             */
            tax_amount: number;
            /**
             * Taxes
             * @description List of taxes grouped by tax rateapplied to the sales
             * @default []
             */
            taxes: components['schemas']['TotalTaxItem'][] | null;
        };
        /** ShippingRefund */
        ShippingRefund: {
            /**
             * Id
             * @description Technical id in Chift
             */
            id: string;
            /** @description Technical id in the target software */
            source_ref: components['schemas']['Ref'];
            /**
             * Untaxed Amount
             * @description Untaxed amount refunded (after discount).
             */
            untaxed_amount: number;
            /**
             * Tax Amount
             * @description Total taxes refunded (after discount).
             */
            tax_amount: number;
            /**
             * Total
             * @description Total refunded (after discount).
             */
            total: number;
        };
        /**
         * States
         * @enum {string}
         */
        States: 'open' | 'closed' | 'all';
        /**
         * Status
         * @enum {string}
         */
        Status: 'active' | 'inactive';
        /** SupplierItemIn */
        SupplierItemIn: {
            /** External Reference */
            external_reference?: string | null;
            /**
             * First Name
             * @description Only used when the supplier is an individual (is_company=false). Indicates the first name of the supplier.
             */
            first_name?: string | null;
            /**
             * Last Name
             * @description Only used when the supplier is an individual (is_company=false). Indicates the last name of the supplier.
             */
            last_name?: string | null;
            /** Name */
            name: string;
            /**
             * Function
             * @description Only used when the supplier is an individual (is_company=false). Indicates the function of the supplier.
             */
            function?: string | null;
            /**
             * Is Company
             * @description Indicates if the supplier is an individual or a company.
             * @default true
             */
            is_company: boolean | null;
            /**
             * Company Id
             * @description Only used when the supplier is an individual (is_company=false). Indicates the id of the company linked to the supplier.
             */
            company_id?: string | null;
            /** Phone */
            phone?: string | null;
            /** Mobile */
            mobile?: string | null;
            /** Email */
            email?: string | null;
            /**
             * Language
             * @description Format: ISO 639-1 codes.
             */
            language?: string | null;
            /** Internal Notes */
            internal_notes?: string | null;
            /** Website */
            website?: string | null;
            /** Vat */
            vat?: string | null;
            /**
             * Iban
             * @description IBAN Account number of the supplier.
             */
            iban?: string | null;
            /**
             * Bank Account
             * @description Bank account number of the supplier.
             */
            bank_account?: string | null;
            /**
             * Currency
             * @description Indicates the currency of the supplier (e.g. EUR).
             */
            currency?: string | null;
            /**
             * Active
             * @default true
             */
            active: boolean | null;
            /** Addresses */
            addresses: components['schemas']['backbone_common__models__common__AddressItemIn'][];
            /** Account Number */
            account_number?: string | null;
        };
        /** SupplierItemOut */
        SupplierItemOut: {
            /** External Reference */
            external_reference?: string | null;
            /**
             * First Name
             * @description Only used when the supplier is an individual (is_company=false). Indicates the first name of the supplier.
             */
            first_name?: string | null;
            /**
             * Last Name
             * @description Only used when the supplier is an individual (is_company=false). Indicates the last name of the supplier.
             */
            last_name?: string | null;
            /** Name */
            name?: string | null;
            /**
             * Function
             * @description Only used when the supplier is an individual (is_company=false). Indicates the function of the supplier.
             */
            function?: string | null;
            /**
             * Is Company
             * @description Indicates if the supplier is an individual or a company.
             * @default true
             */
            is_company: boolean | null;
            /**
             * Company Id
             * @description Only used when the supplier is an individual (is_company=false). Indicates the id of the company linked to the supplier.
             */
            company_id?: string | null;
            /** Phone */
            phone?: string | null;
            /** Mobile */
            mobile?: string | null;
            /** Email */
            email?: string | null;
            /**
             * Language
             * @description Format: ISO 639-1 codes.
             */
            language?: string | null;
            /** Internal Notes */
            internal_notes?: string | null;
            /** Website */
            website?: string | null;
            /** Vat */
            vat?: string | null;
            /**
             * Iban
             * @description IBAN Account number of the supplier.
             */
            iban?: string | null;
            /**
             * Bank Account
             * @description Bank account number of the supplier.
             */
            bank_account?: string | null;
            /**
             * Currency
             * @description Indicates the currency of the supplier (e.g. EUR).
             */
            currency?: string | null;
            /**
             * Active
             * @default true
             */
            active: boolean | null;
            /** Account Number */
            account_number?: string | null;
            /** Company Number */
            company_number?: string | null;
            /** Id */
            id?: string | null;
            /**
             * Last Updated On
             * @description The last time the supplier has been updated.
             */
            last_updated_on?: string | null;
            /**
             * Addresses
             * @default []
             */
            addresses:
                | components['schemas']['backbone_common__models__common__AddressItemOut'][]
                | null;
        };
        /** SupplierItemUpdate */
        SupplierItemUpdate: {
            /** External Reference */
            external_reference?: string | null;
            /**
             * First Name
             * @description Only used when the supplier is an individual (is_company=false). Indicates the first name of the supplier.
             */
            first_name?: string | null;
            /**
             * Last Name
             * @description Only used when the supplier is an individual (is_company=false). Indicates the last name of the supplier.
             */
            last_name?: string | null;
            /** Name */
            name?: string | null;
            /**
             * Function
             * @description Only used when the supplier is an individual (is_company=false). Indicates the function of the supplier.
             */
            function?: string | null;
            /**
             * Is Company
             * @description Indicates if the supplier is an individual or a company.
             * @default true
             */
            is_company: boolean | null;
            /**
             * Company Id
             * @description Only used when the supplier is an individual (is_company=false). Indicates the id of the company linked to the supplier.
             */
            company_id?: string | null;
            /** Phone */
            phone?: string | null;
            /** Mobile */
            mobile?: string | null;
            /** Email */
            email?: string | null;
            /**
             * Language
             * @description Format: ISO 639-1 codes.
             */
            language?: string | null;
            /** Internal Notes */
            internal_notes?: string | null;
            /** Website */
            website?: string | null;
            /** Vat */
            vat?: string | null;
            /**
             * Iban
             * @description IBAN Account number of the supplier.
             */
            iban?: string | null;
            /**
             * Bank Account
             * @description Bank account number of the supplier.
             */
            bank_account?: string | null;
            /**
             * Currency
             * @description Indicates the currency of the supplier (e.g. EUR).
             */
            currency?: string | null;
            /**
             * Active
             * @default true
             */
            active: boolean | null;
            /**
             * Addresses
             * @default []
             */
            addresses: components['schemas']['AddressItemOut-Input'][] | null;
        };
        /** SyncConsumerItem */
        SyncConsumerItem: {
            /**
             * Syncid
             * Format: uuid
             */
            syncid: string;
            /**
             * Sync Name
             * @description Name of the sync
             */
            sync_name: string;
            /**
             * @description Indicates whether the consumer has setup the sync. If the setup is complete, it will return 'active'. Otherwise 'inactive'.
             * @default inactive
             */
            status: components['schemas']['SyncConsumerStatus'];
            /**
             * Status Details
             * @description Gives additional information if the status is inactive
             */
            status_details?: string | null;
            /**
             * Link Createdon
             * Format: date-time
             * @description Date on which the consumer first navigated to the link to setup the sync
             */
            link_createdon: string;
            /**
             * Link Mappings
             * @description Values of the mappings requested for the sync for the specific consumer
             */
            link_mappings?: components['schemas']['ReadSyncMappingItem'][] | null;
            /**
             * Link Metadata
             * @description Metadata passed during creation
             */
            link_metadata?: {
                [key: string]: unknown;
            } | null;
            /**
             * Enabled Flows
             * @description List of flows that the consumer has enabled
             */
            enabled_flows?: components['schemas']['ReadFlowConsumerItem'][] | null;
        };
        /**
         * SyncConsumerStatus
         * @enum {string}
         */
        SyncConsumerStatus: 'active' | 'inactive';
        /** TaxRateItem */
        TaxRateItem: {
            /**
             * Id
             * @description Technical id in Chift
             */
            id: string;
            /** @description Technical id in the target software */
            source_ref: components['schemas']['Ref'];
            /** Label */
            label: string;
            /** Rate */
            rate: number;
            /** Country */
            country?: string | null;
        };
        /** Token */
        Token: {
            /** Access Token */
            access_token: string;
            /** Token Type */
            token_type: string;
            /** Expires In */
            expires_in: number;
            /** Expires On */
            expires_on: number;
        };
        /** TotalTaxItem */
        TotalTaxItem: {
            /**
             * Tax Rate
             * @description Tax rate
             */
            tax_rate: number;
            /**
             * Tax Amount
             * @description Tax amount
             */
            tax_amount: number;
            /**
             * Total
             * @description Total amount including tax
             */
            total: number;
        };
        /**
         * TransactionAccountingCategory
         * @enum {string}
         */
        TransactionAccountingCategory:
            | 'all'
            | 'unknown'
            | 'payout'
            | 'payout_cancel'
            | 'payment'
            | 'payment_cancel'
            | 'fee'
            | 'fee_cancel'
            | 'invoice'
            | 'internal_move';
        /**
         * TransactionFilterDateType
         * @enum {string}
         */
        TransactionFilterDateType: 'value_date' | 'execution_date';
        /** TransactionItemOut */
        TransactionItemOut: {
            /**
             * Id
             * @description Technical id in Chift
             */
            id: string;
            /** @description Technical id in the target software */
            source_ref: components['schemas']['Ref'];
            /**
             * Total
             * @description Total amount incl. fee
             */
            total: number;
            /**
             * Fee
             * @description Total fee
             */
            fee: number;
            /**
             * Currency
             * @description Currency
             */
            currency: string;
            /**
             * Exchange Rate
             * @description Exchange rate
             */
            exchange_rate: number;
            /**
             * Create Date
             * Format: date-time
             * @description Create Date
             */
            create_date: string;
            /**
             * Application Type
             * @description Type of the transaction as recorded in the target software
             */
            application_type: string;
            /** @description Accounting category */
            accounting_category: components['schemas']['TransactionAccountingCategory'];
            /** Refund Id */
            refund_id?: string | null;
            /** Payment Id */
            payment_id?: string | null;
        };
        /**
         * TransactionStatus
         * @enum {string}
         */
        TransactionStatus: 'failed' | 'pending' | 'success';
        /** TriggerResponse */
        TriggerResponse: {
            /** Status */
            status: string;
            /** Message */
            message: string;
            /** Data */
            data?: {
                [key: string]: unknown;
            } | null;
        };
        /**
         * TriggerType
         * @enum {string}
         */
        TriggerType: 'timer' | 'event';
        /** UpdateConsumerItem */
        UpdateConsumerItem: {
            /** Name */
            name?: string | null;
            /** Email */
            email?: string | null;
            /** Internal Reference */
            internal_reference?: string | null;
            /** Redirect Url */
            redirect_url?: string | null;
        };
        /** UpdateFlowConsumer */
        UpdateFlowConsumer: {
            /**
             * Triggerid
             * @default trigger-1
             */
            triggerid: string | null;
            /**
             * Data
             * @description Object containing the configuration of the flow for the consumer
             * @default {}
             */
            data: {
                [key: string]: unknown;
            } | null;
        };
        /** UpdateOrderItem */
        UpdateOrderItem: {
            /**
             * Customer Id
             * @description Unique identifier of the customer
             */
            customer_id?: string | null;
        };
        /** ValidationError */
        ValidationError: {
            /** Location */
            loc: (string | number)[];
            /** Message */
            msg: string;
            /** Error Type */
            type: string;
        };
        /** VariantAttributeItem */
        VariantAttributeItem: {
            /** Name */
            name: string;
            /** Value */
            value: string;
        };
        /** VariantAttributeOptionItem */
        VariantAttributeOptionItem: {
            /** Name */
            name: string;
            /** Values */
            values: string[];
        };
        /** VariantItem */
        VariantItem: {
            /**
             * Id
             * @description Technical id in Chift
             */
            id: string;
            /** @description Technical id in the target software */
            source_ref: components['schemas']['Ref'];
            /**
             * Parent Id
             * @description Technical id of the parent product in Chift
             */
            parent_id: string;
            /** Name */
            name: string;
            /** Description */
            description?: string | null;
            /** Description Html */
            description_html?: string | null;
            /**
             * Categories
             * @default []
             */
            categories:
                | components['schemas']['backbone_common__models__commerce__common__ProductCategoryItem'][]
                | null;
            /** Created On */
            created_on?: string | null;
            /** Sku */
            sku?: string | null;
            /** Barcode */
            barcode?: string | null;
            /**
             * Available Quantity
             * @default 0
             */
            available_quantity: number | null;
            /**
             * Prices
             * @default []
             */
            prices:
                | components['schemas']['backbone_common__models__commerce__common__ProductPriceItem'][]
                | null;
            unit_cost?: components['schemas']['ProductCostItem'] | null;
            /** Unit Of Measure */
            unit_of_measure?: string | null;
            /**
             * Weight
             * @default 0
             */
            weight: number | null;
            /** Weight Unit */
            weight_unit?: string | null;
            status?: components['schemas']['ProductStatus'] | null;
            /**
             * Inventory Details
             * @default []
             */
            inventory_details: components['schemas']['InventoryDetailsItem'][] | null;
            /**
             * Common Attributes
             * @description List of attributes that are shared by all variants of the product.
             * @default []
             */
            common_attributes: components['schemas']['CommonAttributeItem'][] | null;
            /**
             * Variant Attributes
             * @description List of attributes that are specific to the variant of the product.
             * @default []
             */
            variant_attributes: components['schemas']['VariantAttributeItem'][] | null;
            /**
             * Common Images
             * @description List of images that are shared by all variants of the product.
             * @default []
             */
            common_images: components['schemas']['ImageItem'][] | null;
            /**
             * Variant Images
             * @description List of images that are specific to the variant of the product.
             * @default []
             */
            variant_images: components['schemas']['ImageItem'][] | null;
        };
        /**
         * VatCodeScope
         * @enum {string}
         */
        VatCodeScope: 'nat' | 'eu' | 'int' | 'unknown';
        /**
         * VatCodeType
         * @enum {string}
         */
        VatCodeType: 'sale' | 'purchase' | 'both' | 'unknown';
        /** WebhookInstanceGetItem */
        WebhookInstanceGetItem: {
            /**
             * Webhookid
             * Format: uuid
             */
            webhookid: string;
            /**
             * Accountid
             * Format: uuid
             */
            accountid: string;
            /** Createdby */
            createdby?: string | null;
            /**
             * Createdon
             * Format: date-time
             */
            createdon: string;
            /** Event */
            event: string;
            /** Url */
            url: string;
            status: components['schemas']['Status'];
            /** Integrationid */
            integrationid?: number | null;
        };
        /** WebhookInstancePatchItem */
        WebhookInstancePatchItem: {
            status?: components['schemas']['Status'] | null;
            /** Url */
            url?: string | null;
            /** Signingsecret */
            signingsecret?: string | null;
        };
        /** WebhookInstancePostItem */
        WebhookInstancePostItem: {
            /** Event */
            event: string;
            /** Url */
            url: string;
            /** Signingsecret */
            signingsecret?: string | null;
            /**
             * Integrationid
             * @description Can be used to specify the integration code of a specific connector. This is mandatory in case you create a webhook related to a specific One API.
             */
            integrationid?: number | null;
        };
        /** WebhookItem */
        WebhookItem: {
            /** Event */
            event: string;
            /** Api */
            api?: string | null;
        };
        /** WebhookLogItem */
        WebhookLogItem: {
            /**
             * Webhooklogid
             * Format: uuid
             */
            webhooklogid: string;
            /**
             * Webhookid
             * Format: uuid
             */
            webhookid: string;
            /** Event */
            event: string;
            /** Url */
            url: string;
            /** Accountid */
            accountid: string;
            /**
             * Createdon
             * Format: date-time
             */
            createdon: string;
            /** Httpstatus */
            httpstatus: number;
            /** Integrationid */
            integrationid?: number | null;
        };
        /** WelfareFund */
        WelfareFund: {
            /**
             * Rate
             * @description Rate
             */
            rate: number;
            /**
             * Amount
             * @description Amount
             */
            amount: number;
            /** @description Type */
            type?: components['schemas']['WelfareFundType'] | null;
        };
        /**
         * WelfareFundType
         * @enum {string}
         */
        WelfareFundType:
            | 'TC01'
            | 'TC02'
            | 'TC03'
            | 'TC04'
            | 'TC05'
            | 'TC06'
            | 'TC07'
            | 'TC08'
            | 'TC09'
            | 'TC10'
            | 'TC11'
            | 'TC12'
            | 'TC13'
            | 'TC14'
            | 'TC15'
            | 'TC16'
            | 'TC17'
            | 'TC18'
            | 'TC19'
            | 'TC20'
            | 'TC21'
            | 'TC22';
        /** WithholdingTax */
        WithholdingTax: {
            /**
             * Rate
             * @description Rate
             */
            rate: number;
            /**
             * Amount
             * @description Amount
             */
            amount: number;
            /** @description Reason */
            reason?: components['schemas']['WithholdingTaxReason'] | null;
            /** @description Payment reason */
            payment_reason?: components['schemas']['WithholdingTaxPaymentReason'] | null;
        };
        /**
         * WithholdingTaxPaymentReason
         * @enum {string}
         */
        WithholdingTaxPaymentReason:
            | 'A'
            | 'U'
            | 'R'
            | 'Q'
            | 'H'
            | 'V'
            | 'V2'
            | 'I'
            | 'J'
            | 'K'
            | 'P'
            | 'S'
            | 'T'
            | 'W'
            | 'X'
            | 'Y'
            | 'B'
            | 'C'
            | 'D'
            | 'E'
            | 'F'
            | 'G'
            | 'L'
            | 'L1'
            | 'M'
            | 'M1'
            | 'M2'
            | 'IN'
            | 'O'
            | 'O1'
            | 'V1';
        /**
         * WithholdingTaxReason
         * @enum {string}
         */
        WithholdingTaxReason: 'RT01' | 'RT02' | 'RT03' | 'RT04' | 'RT05' | 'RT06';
        /** ConnectionItem */
        backbone_api__app__routers__connections__ConnectionItem: {
            /**
             * Connectionid
             * Format: uuid
             */
            connectionid: string;
            /** Name */
            name: string;
            /** Integration */
            integration: string;
            /** Integrationid */
            integrationid: number;
            /** Api */
            api: string;
            /** Data */
            data?: {
                [key: string]: unknown;
            } | null;
            status: components['schemas']['Status'];
            /** @description For local agent only. Indicates whether the local agent is up and running */
            agent?: components['schemas']['LocalAgentInfo'] | null;
        };
        /** ConnectionItem */
        backbone_api__app__routers__syncs__ConnectionItem: {
            /** One Api */
            one_api?: number | null;
            /** Connection Type */
            connection_type?: number | null;
            /**
             * Display Order
             * @default 0
             */
            display_order: number;
            /**
             * Display Hidden
             * @default false
             */
            display_hidden: boolean;
        };
        /**
         * InvoiceType
         * @enum {string}
         */
        backbone_common__models__accounting__common__InvoiceType:
            | 'customer_invoice'
            | 'customer_refund'
            | 'supplier_invoice'
            | 'supplier_refund';
        /** AddressItemIn */
        backbone_common__models__commerce__common__AddressItemIn: {
            /** First Name */
            first_name: string;
            /** Last Name */
            last_name: string;
            /** Street */
            street: string;
            /** Number */
            number: string;
            /** Box */
            box?: string | null;
            /** City */
            city: string;
            /** Postal Code */
            postal_code?: string | null;
            /**
             * Country
             * @description Format: ISO 3166-1 codes.
             */
            country: string;
            /** Phone */
            phone?: string | null;
            /** Email */
            email?: string | null;
        };
        /** AddressItemOut */
        backbone_common__models__commerce__common__AddressItemOut: {
            address_type: components['schemas']['AddressType'];
            /** Company Name */
            company_name?: string | null;
            /** First Name */
            first_name?: string | null;
            /** Last Name */
            last_name?: string | null;
            /** Street */
            street?: string | null;
            /** Number */
            number?: string | null;
            /** Box */
            box?: string | null;
            /** City */
            city?: string | null;
            /** Postal Code */
            postal_code?: string | null;
            /**
             * Country
             * @description Format: ISO 3166-1 codes.
             */
            country?: string | null;
            /** Phone */
            phone?: string | null;
            /** Email */
            email?: string | null;
        };
        /** DiscountItem */
        backbone_common__models__commerce__common__DiscountItem: {
            /** Name */
            name: string;
            /** Description */
            description: string;
            /** Amount */
            amount: number;
        };
        /** ProductCategoryItem */
        backbone_common__models__commerce__common__ProductCategoryItem: {
            /**
             * Id
             * @description Technical id of the category in Chift
             */
            id: string;
            /** Name */
            name: string;
        };
        /** ProductPriceItem */
        backbone_common__models__commerce__common__ProductPriceItem: {
            /** Currency */
            currency: string;
            /**
             * Price
             * @default 0
             */
            price: number | null;
        };
        /** AddressItemIn */
        backbone_common__models__common__AddressItemIn: {
            address_type: components['schemas']['AddressType'];
            /** Name */
            name?: string | null;
            /** Number */
            number?: string | null;
            /** Box */
            box?: string | null;
            /** Phone */
            phone?: string | null;
            /** Mobile */
            mobile?: string | null;
            /** Email */
            email?: string | null;
            /** Street */
            street: string;
            /** City */
            city: string;
            /** Postal Code */
            postal_code: string;
            /**
             * Country
             * @description Format: ISO 3166-1 codes.
             */
            country: string;
        };
        /** AddressItemOut */
        backbone_common__models__common__AddressItemOut: {
            address_type: components['schemas']['AddressType'];
            /** Name */
            name?: string | null;
            /** Number */
            number?: string | null;
            /** Box */
            box?: string | null;
            /** Phone */
            phone?: string | null;
            /** Mobile */
            mobile?: string | null;
            /** Email */
            email?: string | null;
            /** Street */
            street?: string | null;
            /** City */
            city?: string | null;
            /** Postal Code */
            postal_code?: string | null;
            /**
             * Country
             * @description Format: ISO 3166-1 codes.
             */
            country?: string | null;
        };
        /**
         * InvoiceType
         * @enum {string}
         */
        backbone_common__models__invoicing__common__InvoiceType:
            | 'customer_invoice'
            | 'customer_refund'
            | 'supplier_invoice'
            | 'supplier_refund'
            | 'all';
        /**
         * PaymentStatus
         * @enum {string}
         */
        backbone_common__models__payment__common__PaymentStatus:
            | 'pending'
            | 'completed'
            | 'partially_completed'
            | 'canceled'
            | 'failed'
            | 'unknown'
            | 'authorized';
        /** ProductCategoryItem */
        backbone_common__models__pos__common__ProductCategoryItem: {
            /**
             * Id
             * @description Unique identifier of the category
             */
            id: string;
            /**
             * Name
             * @description Name given to the category
             */
            name: string;
            /**
             * Description
             * @description Description of the category
             */
            description?: string | null;
            /**
             * Id Parent
             * @description Indicates if the category belongs to a parent category
             */
            id_parent?: string | null;
        };
        /** ProductPriceItem */
        backbone_common__models__pos__common__ProductPriceItem: {
            /**
             * Unit Price
             * @description Unit price (without tax) of the product
             */
            unit_price: number;
            /**
             * Tax Rate
             * @description Tax rate applied to the product
             */
            tax_rate?: number | null;
        };
        /** DiscountItem */
        backbone_common__models__pos_pms__DiscountItem: {
            /**
             * Name
             * @description Name of the discount
             */
            name?: string | null;
            /**
             * Total
             * @description Total amount of the discount
             */
            total: number;
            /**
             * @description Type of the discount
             * @default UNKNOWN
             */
            type: components['schemas']['DiscountType'];
        };
        /**
         * PaymentStatus
         * @enum {string}
         */
        backbone_common__models__pos_pms__PaymentStatus:
            | 'Pending'
            | 'Completed'
            | 'Canceled'
            | 'Failed'
            | 'Unknown'
            | 'Authorised';
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    generate_access_token_token_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['AuthItem'];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Token'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    consumers_get_consumers: {
        parameters: {
            query?: {
                search?: string | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ConsumerItem'][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    consumers_create_consumer: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['PostConsumerItem'];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ConsumerItem'];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "The specified name is not valid",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "The specified redirect url is not valid",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
        };
    };
    consumers_get_consumer: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                consumerid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ConsumerItem'];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "The consumer does not exist",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    consumers_delete_consumer: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                consumerid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "The consumer does not exist",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    consumers_update_consumer: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                consumerid: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['UpdateConsumerItem'];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ConsumerItem'];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "The consumer does not exist",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "The specified redirect url is not valid",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
        };
    };
    connections_get_connections: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                consumerid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['backbone_api__app__routers__connections__ConnectionItem'][];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "The consumer does not exist",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    connections_create_connection: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                consumerid: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': components['schemas']['PostConnectionItem-Input'] | null;
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['LinkItem'];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ChiftError'];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "The consumer does not exist",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "Invalid datetime format in key {key}",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
        };
    };
    connections_delete_connection: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                consumerid: string;
                connectionid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "The specified connectionid is not valid",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "The connection does not exist",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    connections_update_connection: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                consumerid: string;
                connectionid: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': components['schemas']['PatchConnectionItem'] | null;
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['LinkItem'];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ChiftError'];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "The connection does not exist",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "Invalid datetime format in key {key}",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
        };
    };
    integrations_get_integrations: {
        parameters: {
            query?: {
                status?: components['schemas']['Status'] | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['IntegrationItem'][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    integrations_get_integration_logo_json: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                integrationid: number;
                image_type: components['schemas']['ImageType'];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['LogoImage'];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "The {image_type} doesn't exist.",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    webhooks_get_webhook_types: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['WebhookItem'][];
                };
            };
        };
    };
    webhooks_get_webhooks: {
        parameters: {
            query?: {
                status?: components['schemas']['Status'] | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['WebhookInstanceGetItem'][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    webhooks_create_webhook: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['WebhookInstancePostItem'];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['WebhookInstanceGetItem'];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "There is already an existing webhook with the same url and type",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    webhooks_get_webhook: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                webhookid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['WebhookInstanceGetItem'];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "The specified webhook could not be found for this account",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    webhooks_delete_webhook: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                webhookid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "The specified webhook could not be found for this account",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    webhooks_update_webhook: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                webhookid: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['WebhookInstancePatchItem'];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['WebhookInstanceGetItem'];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "The specified url is not valid",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "The specified webhook could not be found for this account",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    webhooks_get_webhook_logs: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                webhookid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['WebhookLogItem'][];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "The specified webhook could not be found for this account",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    syncs_get_syncs: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ReadSyncItem'][];
                };
            };
        };
    };
    syncs_post_sync: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['CreateSyncItem'];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ReadSyncItem'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    syncs_update_sync: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['CreateSyncItem'];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ReadSyncItem'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    syncs_get_sync: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                syncid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ReadSyncItem'];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "The sync does not exist",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    syncs_send_custom_event: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                syncid: string;
                flowid: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['PostSyncFlowEvent'];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['TriggerResponse'];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "You cannot force the execution for all consumers",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "The chain does not exist",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "Error while validating context data; the field {field.get('name')} does not seem to be of type {fieldtype}",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
        };
    };
    syncs_get_consumer_executions: {
        parameters: {
            query?: {
                date_to?: string | null;
                date_from?: string | null;
            };
            header?: never;
            path: {
                consumerid: string;
                syncid: string;
                flowid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ChainExecutionItem'][];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "The flow does not exist",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    syncs_get_execution: {
        parameters: {
            query?: {
                consumerid?: string | null;
            };
            header?: never;
            path: {
                syncid: string;
                flowid: string;
                executionid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ChainExecutionItem'];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "The execution does not exist",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    syncs_create_synctoconsumer: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                consumerid: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['CreateConsumerSyncItem'];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['LinkSyncItem'];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ChiftError'];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ChiftError'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    syncs_get_syncconsumer: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                consumerid: string;
                syncid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['SyncConsumerItem'];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "The consumer is not configured for this sync",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    syncs_update_synctoconsumer: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                syncid: string;
                consumerid: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['ReadSyncMappingItem'][];
            };
        };
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "The flow is not yet activated for this consumer",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "The body should be a list",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
        };
    };
    syncs_enable_syncconsumer: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                syncid: string;
                flowid: string;
                consumerid: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['EnableFlowConsumer'];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': unknown;
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "Impossible to enable the flow as the flow requires configuration fields",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "The consumer does not exist",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "Error while validating context data; the field {field_name} does not seem to be of type {field_type}",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
        };
    };
    syncs_update_flowtoconsumer: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                syncid: string;
                flowid: string;
                consumerid: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['UpdateFlowConsumer'];
            };
        };
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "The flow is not yet activated for this consumer",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "Error while validating context data; the field {field_name} does not seem to be of type {field_type}",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
        };
    };
    datastores_get_datastores: {
        parameters: {
            query?: {
                status?: components['schemas']['Status'] | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['DataStoreItem'][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    datastores_get_consumer_and_datastoredata: {
        parameters: {
            query?: {
                date_to?: string | null;
                date_from?: string | null;
                executionid?: string | null;
            };
            header?: never;
            path: {
                consumerid: string;
                datastoreid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['DataItemOut'][];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "The datastore does not exist",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    datastores_create_consumer_datastoredata: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                consumerid: string;
                datastoreid: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['DataItem'][];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['DataItemOut'][];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "The datastore does not exist",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "The input does not match the definition of the datastore",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
        };
    };
    datastores_delete_consumer_datastoredata: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                consumerid: string;
                datastoreid: string;
                datastoredataid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': unknown;
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "The datastoredata does not exist",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    datastores_update_consumer_datastoredata: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                consumerid: string;
                datastoreid: string;
                datastoredataid: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['DataItem'];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['DataItemOut'];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "The datastoredata does not exist",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "The input does not match the definition of the datastore",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
        };
    };
    issues_get_issues: {
        parameters: {
            query?: {
                /** @description The search query to filter issues by creation date. */
                created_on?: string;
                /** @description The search query to filter issues by last seen date. */
                last_seen_on?: string;
                /** @description The search query to filter issues by error code. */
                error_code?: string;
                /** @description The search query to filter issues by issue status. */
                status?: components['schemas']['IssueStatus'];
                /** @description The search query to filter issues by issue level. */
                level?: components['schemas']['IssueLevel'] | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['IssueItem'][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    issues_get_issues_by_consumer_id: {
        parameters: {
            query?: {
                /** @description The search query to filter issues by creation date. */
                created_on?: string;
                /** @description The search query to filter issues by last seen date. */
                last_seen_on?: string;
                /** @description The search query to filter issues by error code. */
                error_code?: string;
                /** @description The search query to filter issues by issue status. */
                status?: components['schemas']['IssueStatus'];
                /** @description The search query to filter issues by issue level. */
                level?: components['schemas']['IssueLevel'] | null;
            };
            header?: never;
            path: {
                consumer_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['IssueItem'][];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "The consumer does not exist.",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    accounting_get_folders: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                consumer_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['FolderItem'][];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "Error while trying to perform your request",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    accounting_get_bookyears: {
        parameters: {
            query?: {
                /** @description Page number */
                page?: number;
                /** @description Page size */
                size?: number;
                folder_id?: string | null;
            };
            header?: never;
            path: {
                consumer_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ChiftPage_BookYear_'];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "Error while trying to perform your request",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    accounting_get_analytic_plans: {
        parameters: {
            query?: {
                /** @description Page number */
                page?: number;
                /** @description Page size */
                size?: number;
                folder_id?: string | null;
            };
            header?: never;
            path: {
                consumer_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ChiftPage_AnalyticPlanItem_'];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "Error while trying to perform your request",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    accounting_get_clients: {
        parameters: {
            query?: {
                /** @description Page number */
                page?: number;
                /** @description Page size */
                size?: number;
                folder_id?: string | null;
                search?: string | null;
                updated_after?: string | null;
            };
            header?: never;
            path: {
                consumer_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ChiftPage_ClientItemOut_'];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "Error while trying to perform your request",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    accounting_create_client: {
        parameters: {
            query?: {
                folder_id?: string | null;
                force_merge?: string | null;
            };
            header?: never;
            path: {
                consumer_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['ClientItemIn'];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ClientItemOut'];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "A client/supplier already exist with the same code/id in the accounting system.",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    accounting_get_client: {
        parameters: {
            query?: {
                folder_id?: string | null;
            };
            header?: never;
            path: {
                consumer_id: string;
                client_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ClientItemOut'];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "Error while trying to perform your request",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "The client/supplier doesn't exist in the accounting system.",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    accounting_update_client: {
        parameters: {
            query?: {
                folder_id?: string | null;
            };
            header?: never;
            path: {
                consumer_id: string;
                client_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['ClientItemUpdate'];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ClientItemOut'];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "The VAT number doesn't seem to be correct. Please remove dots and whitespaces. The expected format is the following: BE0784930037",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "The client/supplier doesn't exist in the accounting system.",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    accounting_get_suppliers: {
        parameters: {
            query?: {
                /** @description Page number */
                page?: number;
                /** @description Page size */
                size?: number;
                folder_id?: string | null;
                search?: string | null;
                updated_after?: string | null;
            };
            header?: never;
            path: {
                consumer_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ChiftPage_SupplierItemOut_'];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "Error while trying to perform your request",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    accounting_create_supplier: {
        parameters: {
            query?: {
                folder_id?: string | null;
                force_merge?: string | null;
            };
            header?: never;
            path: {
                consumer_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['SupplierItemIn'];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['SupplierItemOut'];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "A client/supplier already exist with the same code/id in the accounting system.",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    accounting_get_supplier: {
        parameters: {
            query?: {
                folder_id?: string | null;
            };
            header?: never;
            path: {
                consumer_id: string;
                supplier_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['SupplierItemOut'];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "Error while trying to perform your request",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "The client/supplier doesn't exist in the accounting system.",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    accounting_update_supplier: {
        parameters: {
            query?: {
                folder_id?: string | null;
            };
            header?: never;
            path: {
                consumer_id: string;
                supplier_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['SupplierItemUpdate'];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['SupplierItemOut'];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "The VAT number doesn't seem to be correct. Please remove dots and whitespaces. The expected format is the following: BE0784930037",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "The client/supplier doesn't exist in the accounting system.",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    accounting_create_invoice: {
        parameters: {
            query?: {
                folder_id?: string | null;
                force_financial_period?: string | null;
                regroup_lines?: components['schemas']['BoolParam'] | null;
            };
            header?: never;
            path: {
                consumer_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['InvoiceItemInMonoAnalyticPlan'];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['InvoiceItemOutMonoAnalyticPlan'];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "The document is not a valid base64 string representing a PDF.",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "The currency 'x' doesn't exist in the accounting system.",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    accounting_create_invoice_multiple_plans: {
        parameters: {
            query?: {
                folder_id?: string | null;
                force_financial_period?: string | null;
                regroup_lines?: components['schemas']['BoolParam'] | null;
            };
            header?: never;
            path: {
                consumer_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['InvoiceItemInMultiAnalyticPlans'];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['InvoiceItemOutMultiAnalyticPlans'];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "The document is not a valid base64 string representing a PDF.",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "The currency 'x' doesn't exist in the accounting system.",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    accounting_get_invoices_by_type: {
        parameters: {
            query?: {
                /** @description Page number */
                page?: number;
                /** @description Page size */
                size?: number;
                folder_id?: string | null;
                date_from?: string | null;
                date_to?: string | null;
                journal_ids?: string | null;
                include_payments?: components['schemas']['BoolParam'] | null;
                payment_status?: components['schemas']['PaymentStatus-Input'] | null;
                updated_after?: string | null;
                include_invoice_lines?: components['schemas']['BoolParam'] | null;
                include_partner_info?: components['schemas']['BoolParam'] | null;
            };
            header?: never;
            path: {
                consumer_id: string;
                invoice_type: components['schemas']['backbone_common__models__accounting__common__InvoiceType'];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ChiftPage_InvoiceItemOutMonoAnalyticPlan_'];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "You must provide an invoice type.",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    accounting_get_invoices_by_type_multi_analytic_plans: {
        parameters: {
            query?: {
                /** @description Page number */
                page?: number;
                /** @description Page size */
                size?: number;
                folder_id?: string | null;
                date_from?: string | null;
                date_to?: string | null;
                journal_ids?: string | null;
                include_payments?: components['schemas']['BoolParam'] | null;
                payment_status?: components['schemas']['PaymentStatus-Input'] | null;
                updated_after?: string | null;
                include_invoice_lines?: components['schemas']['BoolParam'] | null;
                include_partner_info?: components['schemas']['BoolParam'] | null;
            };
            header?: never;
            path: {
                consumer_id: string;
                invoice_type: components['schemas']['backbone_common__models__accounting__common__InvoiceType'];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ChiftPage_InvoiceItemOutMultiAnalyticPlans_'];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "You must provide an invoice type.",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    accounting_get_invoice: {
        parameters: {
            query?: {
                folder_id?: string | null;
                include_payments?: components['schemas']['BoolParam'] | null;
                include_invoice_lines?: components['schemas']['BoolParam'] | null;
                include_partner_info?: components['schemas']['BoolParam'] | null;
            };
            header?: never;
            path: {
                consumer_id: string;
                invoice_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['InvoiceItemOutMonoAnalyticPlan'];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "The ID of the invoice doesn't have the correct format.",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "The invoice doesn't exist in the accounting system.",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    accounting_get_invoice_multi_analytic_plans: {
        parameters: {
            query?: {
                folder_id?: string | null;
                include_payments?: components['schemas']['BoolParam'] | null;
                include_invoice_lines?: components['schemas']['BoolParam'] | null;
                include_partner_info?: components['schemas']['BoolParam'] | null;
            };
            header?: never;
            path: {
                consumer_id: string;
                invoice_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['InvoiceItemOutMultiAnalyticPlans'];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "The ID of the invoice doesn't have the correct format.",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "The invoice doesn't exist in the accounting system.",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    accounting_create_ledger_account: {
        parameters: {
            query?: {
                folder_id?: string | null;
            };
            header?: never;
            path: {
                consumer_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['LedgerAccountItemIn'];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['AccountItem'];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "A ledger account already exists with the same number in the accounting system.",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    accounting_create_bank_account: {
        parameters: {
            query?: {
                folder_id?: string | null;
            };
            header?: never;
            path: {
                consumer_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['BankAccountItemIn'];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['BankAccountItemOut'];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "A bank account/journal already exists with the same code in the accounting system.",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    accounting_get_analytic_accounts: {
        parameters: {
            query?: {
                /** @description Page number */
                page?: number;
                /** @description Page size */
                size?: number;
                folder_id?: string | null;
            };
            header?: never;
            path: {
                consumer_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ChiftPage_AnalyticAccountItemOut_'];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "Error while trying to perform your request",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    accounting_create_analytic_account: {
        parameters: {
            query?: {
                folder_id?: string | null;
            };
            header?: never;
            path: {
                consumer_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['AnalyticAccountItemIn'];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['AnalyticAccountItemOut'];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "An analytic account already exists with the same code in the accounting system.",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    accounting_create_analytic_account_multi_plans: {
        parameters: {
            query?: {
                folder_id?: string | null;
            };
            header?: never;
            path: {
                consumer_id: string;
                analytic_plan: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['AnalyticAccountItemIn'];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['AnalyticAccountItemOutMultiAnalyticPlans'];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "An analytic account already exists with the same code in the accounting system.",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    accounting_get_analytic_account: {
        parameters: {
            query?: {
                folder_id?: string | null;
            };
            header?: never;
            path: {
                consumer_id: string;
                analytic_account_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['AnalyticAccountItemOut'];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "Error while trying to perform your request",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "The analytic account doesn't exist in the accounting system.",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    accounting_update_analytic_account: {
        parameters: {
            query?: {
                folder_id?: string | null;
            };
            header?: never;
            path: {
                consumer_id: string;
                analytic_account_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['AnalyticAccountItemUpdate'];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['AnalyticAccountItemOut'];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "Error while trying to perform your request",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "The analytic account doesn't exist in the accounting system.",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    accounting_get_analytic_account_multi_plans: {
        parameters: {
            query?: {
                folder_id?: string | null;
            };
            header?: never;
            path: {
                consumer_id: string;
                analytic_account_id: string;
                analytic_plan: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['AnalyticAccountItemOutMultiAnalyticPlans'];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "Error while trying to perform your request",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "The analytic account doesn't exist in the accounting system.",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    accounting_update_analytic_account_multi_plans: {
        parameters: {
            query?: {
                folder_id?: string | null;
            };
            header?: never;
            path: {
                consumer_id: string;
                analytic_account_id: string;
                analytic_plan: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['AnalyticAccountItemUpdate'];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['AnalyticAccountItemOutMultiAnalyticPlans'];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "Error while trying to perform your request",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "The analytic account doesn't exist in the accounting system.",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    accounting_get_analytic_accounts_multi_plans: {
        parameters: {
            query?: {
                /** @description Page number */
                page?: number;
                /** @description Page size */
                size?: number;
                folder_id?: string | null;
            };
            header?: never;
            path: {
                consumer_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ChiftPage_AnalyticAccountItemOutMultiAnalyticPlans_'];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "Error while trying to perform your request",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    accounting_get_journal_entries: {
        parameters: {
            query: {
                /** @description Page number */
                page?: number;
                /** @description Page size */
                size?: number;
                folder_id?: string | null;
                unposted_allowed: components['schemas']['BoolParam'];
                journal_id: string;
                date_from?: string | null;
                date_to?: string | null;
                updated_after?: string | null;
                partner_id?: string | null;
            };
            header?: never;
            path: {
                consumer_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ChiftPage_JournalEntryMonoAnalyticPlan_'];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "You can retrieve maximum 3 months of data at once. The difference between 'date_from' and 'date_to' is at maximum 3 months when 'updated_after' parameter is not provided.",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    accounting_create_journal_entry: {
        parameters: {
            query?: {
                folder_id?: string | null;
            };
            header?: never;
            path: {
                consumer_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['JournalEntryIn'];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['JournalEntryMultiAnalyticPlan'];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "A sale/purchase entry cannot be linked to multiple partner accounts.",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "The currency doesn't exist or is not active in the accounting system.",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "Debit and credit cannot be both positive.",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
        };
    };
    accounting_get_journal_entries_multi_plan: {
        parameters: {
            query: {
                /** @description Page number */
                page?: number;
                /** @description Page size */
                size?: number;
                folder_id?: string | null;
                unposted_allowed: components['schemas']['BoolParam'];
                journal_id: string;
                date_from?: string | null;
                date_to?: string | null;
                updated_after?: string | null;
                partner_id?: string | null;
            };
            header?: never;
            path: {
                consumer_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ChiftPage_JournalEntryMultiAnalyticPlan_'];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "You can retrieve maximum 3 months of data at once. The difference between 'date_from' and 'date_to' is at maximum 3 months when 'updated_after' parameter is not provided.",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    accounting_get_journal_entry: {
        parameters: {
            query?: {
                folder_id?: string | null;
            };
            header?: never;
            path: {
                consumer_id: string;
                journal_entry_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['JournalEntryMultiAnalyticPlan'];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "Error while trying to perform your request",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "The entry doesn't exist in the accounting system.",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    accounting_create_generic_journal_entry: {
        parameters: {
            query?: {
                folder_id?: string | null;
                force_currency_exchange?: components['schemas']['BoolParam'] | null;
            };
            header?: never;
            path: {
                consumer_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['GenericJournalEntry'];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['JournalEntryMultiAnalyticPlan'];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "The entry is not balanced.",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "The currency doesn't exist or is not active in the accounting system.",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "Debit and credit cannot be both positive.",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
        };
    };
    accounting_get_payments_by_invoice: {
        parameters: {
            query?: {
                /** @description Page number */
                page?: number;
                /** @description Page size */
                size?: number;
                folder_id?: string | null;
            };
            header?: never;
            path: {
                consumer_id: string;
                invoice_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ChiftPage_Payment_'];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "The ID of the invoice doesn't have the correct format.",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "The given invoice doesn't exist in the accounting system.",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    accounting_get_journals: {
        parameters: {
            query?: {
                /** @description Page number */
                page?: number;
                /** @description Page size */
                size?: number;
                folder_id?: string | null;
            };
            header?: never;
            path: {
                consumer_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ChiftPage_Journal_'];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "Error while trying to perform your request",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    accounting_create_journal: {
        parameters: {
            query?: {
                folder_id?: string | null;
            };
            header?: never;
            path: {
                consumer_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['JournalIn'];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Journal'];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "A journal already exists with the same code in the accounting system.",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "The counterpart account doesn't exist in the accounting system.",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    accounting_get_vat_codes: {
        parameters: {
            query?: {
                /** @description Page number */
                page?: number;
                /** @description Page size */
                size?: number;
                folder_id?: string | null;
            };
            header?: never;
            path: {
                consumer_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ChiftPage_AccountingVatCode_'];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "Error while trying to perform your request",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    accounting_get_miscellaneous_operations: {
        parameters: {
            query?: {
                /** @description Page number */
                page?: number;
                /** @description Page size */
                size?: number;
                folder_id?: string | null;
                date_from?: string | null;
                date_to?: string | null;
                journal_ids?: string | null;
            };
            header?: never;
            path: {
                consumer_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ChiftPage_MiscellaneousOperationOut_'];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "Error while trying to perform your request",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    accounting_create_miscellaneous_operation: {
        parameters: {
            query?: {
                folder_id?: string | null;
            };
            header?: never;
            path: {
                consumer_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['MiscellaneousOperationIn'];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['MiscellaneousOperationOut'];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "The account 'x' cannot be used for this type of line.",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "The currency 'x' doesn't exist in the accounting system.",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    accounting_get_miscellaneous_operation: {
        parameters: {
            query?: {
                folder_id?: string | null;
            };
            header?: never;
            path: {
                consumer_id: string;
                operation_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['MiscellaneousOperationOut'];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "Error while trying to perform your request",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    accounting_match_entries: {
        parameters: {
            query?: {
                folder_id?: string | null;
            };
            header?: never;
            path: {
                consumer_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['MatchingIn'];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['MatchingOut'];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "Entry 'x' doesn't have the correct status.",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "Entry 'x' doesn't exist in the accounting system.",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    accounting_match_entries_multiple: {
        parameters: {
            query?: {
                folder_id?: string | null;
            };
            header?: never;
            path: {
                consumer_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['MultipleMatchingIn'];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['MultipleMatchingOut'][];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "Entry 'x' doesn't have the correct status.",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "Entry 'x' doesn't exist in the accounting system.",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    accounting_add_attachment: {
        parameters: {
            query?: {
                folder_id?: string | null;
                overwrite_existing?: components['schemas']['BoolParam'] | null;
            };
            header?: never;
            path: {
                consumer_id: string;
                invoice_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['AttachmentItem'];
            };
        };
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "An attachment already exists for this invoice.",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "The invoice doesn't exist in the accounting system.",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    accounting_get_attachments: {
        parameters: {
            query: {
                folder_id?: string | null;
                type: components['schemas']['DocumentType'];
                document_id: string;
                /** @description Page number */
                page?: number;
                /** @description Page size */
                size?: number;
            };
            header?: never;
            path: {
                consumer_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ChiftPage_AttachmentItemOut_'];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "Error while trying to perform your request",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    accounting_get_chart_of_accounts: {
        parameters: {
            query?: {
                /** @description Page number */
                page?: number;
                /** @description Page size */
                size?: number;
                folder_id?: string | null;
                classes?: string | null;
                type?: components['schemas']['AccountTypeFilter'] | null;
            };
            header?: never;
            path: {
                consumer_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ChiftPage_AccountItem_'];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "Error while trying to perform your request",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    accounting_get_accounts_balances: {
        parameters: {
            query?: {
                /** @description Page number */
                page?: number;
                /** @description Page size */
                size?: number;
                folder_id?: string | null;
            };
            header?: never;
            path: {
                consumer_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['AccountBalanceFilter'];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ChiftPage_AccountBalance_'];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "Error while trying to perform your request",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    accounting_get_employees: {
        parameters: {
            query?: {
                /** @description Page number */
                page?: number;
                /** @description Page size */
                size?: number;
                folder_id?: string | null;
            };
            header?: never;
            path: {
                consumer_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ChiftPage_EmployeeItem_'];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "Error while trying to perform your request",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    accounting_create_financial_entry: {
        parameters: {
            query?: {
                folder_id?: string | null;
                financial_counterpart_account?: string | null;
            };
            header?: never;
            path: {
                consumer_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['FinancialEntryItemInOld'];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['FinancialEntryItemOutOld'];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "The account 'x' cannot be used for this type of line.",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "The currency 'x' doesn't exist in the accounting system.",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    accounting_create_financial_entries: {
        parameters: {
            query?: {
                folder_id?: string | null;
                financial_counterpart_account?: string | null;
            };
            header?: never;
            path: {
                consumer_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['FinancialEntryItemIn'];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['FinancialEntryItemOut'];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "The account 'x' cannot be used for this type of line.",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "The currency 'x' doesn't exist in the accounting system.",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    accounting_get_outstandings: {
        parameters: {
            query: {
                /** @description Page number */
                page?: number;
                /** @description Page size */
                size?: number;
                folder_id?: string | null;
                type: components['schemas']['OutstandingType'];
                unposted_allowed: components['schemas']['BoolParam'];
            };
            header?: never;
            path: {
                consumer_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ChiftPage_OutstandingItem_'];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "Error while trying to perform your request",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    accounting_export_fec: {
        parameters: {
            query: {
                folder_id?: string | null;
                date_from: string;
                date_to: string;
            };
            header?: never;
            path: {
                consumer_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['FECItemOut'][];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "Error while trying to perform your request",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    pos_get_orders: {
        parameters: {
            query?: {
                /** @description Page number */
                page?: number;
                /** @description Page size */
                size?: number;
                date_from?: string | null;
                date_to?: string | null;
                location_id?: string | null;
                state?: components['schemas']['States'];
                closure_id?: string | null;
            };
            header?: never;
            path: {
                consumer_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ChiftPage_POSOrderItem_'];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "Error while trying to perform your request",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "The resource {Method} - {Resource} is not supported by {ConnectorName}",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
            /** @description Bad Gateway */
            502: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "Error while trying to authenticate to {ConnectorName}",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
        };
    };
    pos_get_order: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                consumer_id: string;
                order_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['POSOrderItem'];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "Error while trying to perform your request",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "The order with id {OrderId} could not be found",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "The resource {Method} - {Resource} is not supported by {ConnectorName}",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
            /** @description Bad Gateway */
            502: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "Error while trying to authenticate to {ConnectorName}",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
        };
    };
    pos_update_pos_customer: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                consumer_id: string;
                order_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['UpdateOrderItem'];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['POSOrderItem'];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "Error while trying to perform your request",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "The resource {Method} - {Resource} is not supported by {ConnectorName}",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
            /** @description Bad Gateway */
            502: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "Error while trying to authenticate to {ConnectorName}",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
        };
    };
    pos_get_locations: {
        parameters: {
            query?: {
                /** @description Page number */
                page?: number;
                /** @description Page size */
                size?: number;
            };
            header?: never;
            path: {
                consumer_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ChiftPage_POSLocationItem_'];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "Error while trying to perform your request",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "The resource {Method} - {Resource} is not supported by {ConnectorName}",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
            /** @description Bad Gateway */
            502: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "Error while trying to authenticate to {ConnectorName}",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
        };
    };
    pos_get_payments: {
        parameters: {
            query: {
                /** @description Page number */
                page?: number;
                /** @description Page size */
                size?: number;
                date_from: string;
                date_to: string;
            };
            header?: never;
            path: {
                consumer_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ChiftPage_POSPaymentItem_'];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "Error while trying to perform your request",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "The resource {Method} - {Resource} is not supported by {ConnectorName}",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
            /** @description Bad Gateway */
            502: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "Error while trying to authenticate to {ConnectorName}",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
        };
    };
    pos_get_sales: {
        parameters: {
            query: {
                date_from: string;
                date_to: string;
                location_id?: string | null;
            };
            header?: never;
            path: {
                consumer_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['SalesItem'];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "Error while trying to perform your request",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "The resource {Method} - {Resource} is not supported by {ConnectorName}",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
            /** @description Bad Gateway */
            502: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "Error while trying to authenticate to {ConnectorName}",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
        };
    };
    pos_get_payments_methods: {
        parameters: {
            query?: {
                /** @description Page number */
                page?: number;
                /** @description Page size */
                size?: number;
                location_id?: string | null;
            };
            header?: never;
            path: {
                consumer_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ChiftPage_PaymentMethods_'];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "Error while trying to perform your request",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "The resource {Method} - {Resource} is not supported by {ConnectorName}",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
            /** @description Bad Gateway */
            502: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "Error while trying to authenticate to {ConnectorName}",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
        };
    };
    pos_get_customers: {
        parameters: {
            query?: {
                /** @description Page number */
                page?: number;
                /** @description Page size */
                size?: number;
                search?: string | null;
                email?: string | null;
                phone?: string | null;
            };
            header?: never;
            path: {
                consumer_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ChiftPage_POSCustomerItem_'];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "Error while trying to perform your request",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "The resource {Method} - {Resource} is not supported by {ConnectorName}",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
            /** @description Bad Gateway */
            502: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "Error while trying to authenticate to {ConnectorName}",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
        };
    };
    pos_create_pos_customer: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                consumer_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['POSCreateCustomerItem'];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['POSCustomerItem'];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "Error while trying to perform your request",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "The resource {Method} - {Resource} is not supported by {ConnectorName}",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
            /** @description Bad Gateway */
            502: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "Error while trying to authenticate to {ConnectorName}",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
        };
    };
    pos_get_customer: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                consumer_id: string;
                customer_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['POSCustomerItem'];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "Error while trying to perform your request",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "The customer with id {CustomerId} could not be found",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "The resource {Method} - {Resource} is not supported by {ConnectorName}",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
            /** @description Bad Gateway */
            502: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "Error while trying to authenticate to {ConnectorName}",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
        };
    };
    pos_get_product_categories: {
        parameters: {
            query?: {
                /** @description Page number */
                page?: number;
                /** @description Page size */
                size?: number;
                location_id?: string | null;
                only_parents?: components['schemas']['BoolParam'];
            };
            header?: never;
            path: {
                consumer_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ChiftPage_ProductCategoryItem_'];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "Error while trying to perform your request",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "The resource {Method} - {Resource} is not supported by {ConnectorName}",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
            /** @description Bad Gateway */
            502: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "Error while trying to authenticate to {ConnectorName}",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
        };
    };
    pos_get_products: {
        parameters: {
            query?: {
                /** @description Page number */
                page?: number;
                /** @description Page size */
                size?: number;
                location_id?: string | null;
            };
            header?: never;
            path: {
                consumer_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ChiftPage_POSProductItem_'];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "Error while trying to perform your request",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "The resource {Method} - {Resource} is not supported by {ConnectorName}",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
            /** @description Bad Gateway */
            502: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "Error while trying to authenticate to {ConnectorName}",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
        };
    };
    pos_get_accounting_categories: {
        parameters: {
            query?: {
                /** @description Page number */
                page?: number;
                /** @description Page size */
                size?: number;
                location_id?: string | null;
            };
            header?: never;
            path: {
                consumer_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ChiftPage_AccountingCategoryItem_'];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "Error while trying to perform your request",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "The resource {Method} - {Resource} is not supported by {ConnectorName}",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
            /** @description Bad Gateway */
            502: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "Error while trying to authenticate to {ConnectorName}",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
        };
    };
    pos_get_closure: {
        parameters: {
            query?: {
                location_id?: string | null;
            };
            header?: never;
            path: {
                consumer_id: string;
                date: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ClosureItem'];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "Error while trying to perform your request",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "The resource {Method} - {Resource} is not supported by {ConnectorName}",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
            /** @description Bad Gateway */
            502: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "Error while trying to authenticate to {ConnectorName}",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
        };
    };
    pos_get_objectives: {
        parameters: {
            query: {
                page?: number;
                size?: number;
                date_from: string;
                date_to: string;
            };
            header?: never;
            path: {
                consumer_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ObjectivesItem'];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "Error while trying to perform your request",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "The resource {Method} - {Resource} is not supported by {ConnectorName}",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
            /** @description Bad Gateway */
            502: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "Error while trying to authenticate to {ConnectorName}",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
        };
    };
    ecommerce_get_customers: {
        parameters: {
            query?: {
                /** @description Page number */
                page?: number;
                /** @description Page size */
                size?: number;
            };
            header?: never;
            path: {
                consumer_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ChiftPage_CommerceCustomerItem_'];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "Error while trying to perform your request",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    ecommerce_get_customer: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                consumer_id: string;
                customer_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['CommerceCustomerItem'];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "Error while trying to perform your request",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "The customer doesn't exist.",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    ecommerce_get_products: {
        parameters: {
            query?: {
                /** @description Page number */
                page?: number;
                /** @description Page size */
                size?: number;
            };
            header?: never;
            path: {
                consumer_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ChiftPage_ProductItem_'];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "Error while trying to perform your request",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    ecommerce_get_product: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                consumer_id: string;
                product_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ProductItem-Output'];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "Error while trying to perform your request",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "The product doesn't exist.",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    ecommerce_get_variant: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                consumer_id: string;
                variant_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['VariantItem'];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "Error while trying to perform your request",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "The variant doesn't exist.",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    ecommerce_update_variant_quantity: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                consumer_id: string;
                variant_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['InventoryDetailsUpdate'];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['InventoryDetailsItem'];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "Error while trying to perform your request",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "The location doesn't exist.",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    ecommerce_get_locations: {
        parameters: {
            query?: {
                /** @description Page number */
                page?: number;
                /** @description Page size */
                size?: number;
            };
            header?: never;
            path: {
                consumer_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ChiftPage_CommerceLocationItemOut_'];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "Error while trying to perform your request",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    ecommerce_get_orders: {
        parameters: {
            query?: {
                /** @description Page number */
                page?: number;
                /** @description Page size */
                size?: number;
                date_from?: string | null;
                date_to?: string | null;
                updated_after?: string | null;
                include_detailed_refunds?: components['schemas']['BoolParam'] | null;
                include_product_categories?: components['schemas']['BoolParam'] | null;
                include_customer_details?: components['schemas']['BoolParam'] | null;
            };
            header?: never;
            path: {
                consumer_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ChiftPage_OrderItemOut_'];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "The date format of the field 'Date To' is not valid. The expected format is the following: YYYY-MM-DD.",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    ecommerce_create_order: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                consumer_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['OrderItemIn'];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['OrderItemOut'];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "The country format is not correct. Please use the ISO 3166-1 codes.",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "The phone number is already used by another client.",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
        };
    };
    ecommerce_get_order: {
        parameters: {
            query?: {
                include_product_categories?: components['schemas']['BoolParam'] | null;
            };
            header?: never;
            path: {
                consumer_id: string;
                order_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['OrderItemOut'];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "Error while trying to perform your request",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "The order doesn't exist.",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    ecommerce_get_payments_methods: {
        parameters: {
            query?: {
                /** @description Page number */
                page?: number;
                /** @description Page size */
                size?: number;
            };
            header?: never;
            path: {
                consumer_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ChiftPage_PaymentMethodItem_'];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "Error while trying to perform your request",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    ecommerce_get_product_categories: {
        parameters: {
            query?: {
                /** @description Page number */
                page?: number;
                /** @description Page size */
                size?: number;
                only_parents?: components['schemas']['BoolParam'];
            };
            header?: never;
            path: {
                consumer_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ChiftPage_CategoryItem_'];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "Error while trying to perform your request",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    ecommerce_get_taxes: {
        parameters: {
            query?: {
                /** @description Page number */
                page?: number;
                /** @description Page size */
                size?: number;
            };
            header?: never;
            path: {
                consumer_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ChiftPage_TaxRateItem_'];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "Error while trying to perform your request",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    ecommerce_get_countries: {
        parameters: {
            query?: {
                /** @description Page number */
                page?: number;
                /** @description Page size */
                size?: number;
            };
            header?: never;
            path: {
                consumer_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ChiftPage_CountryItem_'];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "Error while trying to perform your request",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    invoicing_get_invoices: {
        parameters: {
            query?: {
                /** @description Page number */
                page?: number;
                /** @description Page size */
                size?: number;
                date_from?: string | null;
                date_to?: string | null;
                invoice_type?:
                    | components['schemas']['backbone_common__models__invoicing__common__InvoiceType']
                    | null;
                payment_status?: components['schemas']['PaymentStatus-Input'] | null;
                updated_after?: string | null;
                include_invoice_lines?: components['schemas']['BoolParam'] | null;
            };
            header?: never;
            path: {
                consumer_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ChiftPage_InvoiceItemOut_'];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "You must provide an invoice type.",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    invoicing_post_invoices: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                consumer_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['InvoiceItem-Input'];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['InvoiceItemOut'];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "Error while trying to perform your request",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    invoicing_get_invoice: {
        parameters: {
            query?: {
                include_pdf?: components['schemas']['BoolParam'] | null;
            };
            header?: never;
            path: {
                consumer_id: string;
                invoice_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['InvoiceItemOutSingle'];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "The ID of the invoice doesn't have the correct format.",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "The invoice doesn't exist in the invoicing system.",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    invoicing_get_taxes: {
        parameters: {
            query?: {
                /** @description Page number */
                page?: number;
                /** @description Page size */
                size?: number;
            };
            header?: never;
            path: {
                consumer_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ChiftPage_InvoicingVatCode_'];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "Error while trying to perform your request",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    invoicing_get_tax: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                consumer_id: string;
                tax_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['InvoicingVatCode'];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "Error while trying to perform your request",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "The tax doesn't exist.",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    invoicing_get_products: {
        parameters: {
            query?: {
                /** @description Page number */
                page?: number;
                /** @description Page size */
                size?: number;
            };
            header?: never;
            path: {
                consumer_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ChiftPage_ProductItemOut_'];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "Error while trying to perform your request",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    invoicing_post_products: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                consumer_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['ProductItem-Input'];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ProductItemOut'];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "Error while trying to perform your request",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    invoicing_get_product: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                consumer_id: string;
                product_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ProductItemOut'];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "Error while trying to perform your request",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "The product doesn't exist.",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    invoicing_get_opportunities: {
        parameters: {
            query?: {
                /** @description Page number */
                page?: number;
                /** @description Page size */
                size?: number;
            };
            header?: never;
            path: {
                consumer_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ChiftPage_OpportunityItem_'];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "Error while trying to perform your request",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    invoicing_get_opportunity: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                consumer_id: string;
                opportunity_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['OpportunityItem'];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "Error while trying to perform your request",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "The opportunity doesn't exist.",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    invoicing_get_contacts: {
        parameters: {
            query?: {
                /** @description Page number */
                page?: number;
                /** @description Page size */
                size?: number;
                contact_type?: components['schemas']['ContactType'];
            };
            header?: never;
            path: {
                consumer_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ChiftPage_ContactItemOut_'];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "Error while trying to perform your request",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    invoicing_post_contacts: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                consumer_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['ContactItemIn'];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ContactItemOut'];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "Error while trying to perform your request",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    invoicing_get_contact: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                consumer_id: string;
                contact_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ContactItemOut'];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "Error while trying to perform your request",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "The contact doesn't exist.",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    invoicing_get_payments: {
        parameters: {
            query?: {
                /** @description Page number */
                page?: number;
                /** @description Page size */
                size?: number;
                date_from?: string | null;
                date_to?: string | null;
            };
            header?: never;
            path: {
                consumer_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ChiftPage_InvoicingPaymentItem_'];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "Error while trying to perform your request",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    invoicing_get_payments_methods: {
        parameters: {
            query?: {
                /** @description Page number */
                page?: number;
                /** @description Page size */
                size?: number;
            };
            header?: never;
            path: {
                consumer_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ChiftPage_InvoicingPaymentMethodItem_'];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "Error while trying to perform your request",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    banking_get_financial_institutions: {
        parameters: {
            query?: {
                /** @description Page number */
                page?: number;
                /** @description Page size */
                size?: number;
            };
            header?: never;
            path: {
                consumer_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ChiftPage_BankingFinancialInstitutionItem_'];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "Error while trying to perform your request",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    banking_get_accounts: {
        parameters: {
            query?: {
                /** @description Page number */
                page?: number;
                /** @description Page size */
                size?: number;
            };
            header?: never;
            path: {
                consumer_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ChiftPage_BankingAccountItem_'];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "Error while trying to perform your request",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    banking_get_account_transactions: {
        parameters: {
            query?: {
                /** @description Page number */
                page?: number;
                /** @description Page size */
                size?: number;
                date_from?: string | null;
                date_to?: string | null;
                date_type?: components['schemas']['TransactionFilterDateType'] | null;
            };
            header?: never;
            path: {
                consumer_id: string;
                account_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ChiftPage_BankingTransactionItem_'];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "Error while trying to perform your request",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    banking_get_account_counterparts: {
        parameters: {
            query?: {
                /** @description Page number */
                page?: number;
                /** @description Page size */
                size?: number;
                account_id?: string | null;
                date_from?: string | null;
                date_to?: string | null;
            };
            header?: never;
            path: {
                consumer_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ChiftPage_BankingCounterPartItem_'];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "Error while trying to perform your request",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    payment_get_balances: {
        parameters: {
            query?: {
                /** @description Page number */
                page?: number;
                /** @description Page size */
                size?: number;
            };
            header?: never;
            path: {
                consumer_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ChiftPage_BalanceItemOut_'];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "Error while trying to perform your request",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    payment_get_transaction: {
        parameters: {
            query?: {
                /** @description Page number */
                page?: number;
                /** @description Page size */
                size?: number;
                accounting_category?: components['schemas']['TransactionAccountingCategory'] | null;
                starting_from?: string | null;
                balance_id?: string | null;
                date_from?: string | null;
                date_to?: string | null;
            };
            header?: never;
            path: {
                consumer_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ChiftPage_TransactionItemOut_'];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "You must provide an transaction type.",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    payment_get_payments: {
        parameters: {
            query?: {
                /** @description Page number */
                page?: number;
                /** @description Page size */
                size?: number;
                date_from?: string | null;
                date_to?: string | null;
            };
            header?: never;
            path: {
                consumer_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ChiftPage_PaymentItemOut_'];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "Error while trying to perform your request",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    payment_get_payment: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                consumer_id: string;
                payment_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['PaymentItemOut'];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "Error while trying to perform your request",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "The payment doesn't exist in the system.",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    payment_get_refunds: {
        parameters: {
            query?: {
                /** @description Page number */
                page?: number;
                /** @description Page size */
                size?: number;
                payment_id?: string | null;
                date_from?: string | null;
                date_to?: string | null;
            };
            header?: never;
            path: {
                consumer_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ChiftPage_RefundItemOut_'];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "Error while trying to perform your request",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
        };
    };
    pms_get_orders: {
        parameters: {
            query: {
                /** @description Page number */
                page?: number;
                /** @description Page size */
                size?: number;
                date_from: string;
                date_to: string;
                location_id?: string | null;
                state?: components['schemas']['PMSStates'];
            };
            header?: never;
            path: {
                consumer_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ChiftPage_PMSOrderItem_'];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "Error while trying to perform your request",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "The resource {Method} - {Resource} is not supported by {ConnectorName}",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
            /** @description Bad Gateway */
            502: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "Error while trying to authenticate to {ConnectorName}",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
        };
    };
    pms_get_invoices: {
        parameters: {
            query: {
                /** @description Page number */
                page?: number;
                /** @description Page size */
                size?: number;
                date_from: string;
                date_to: string;
                location_id?: string | null;
            };
            header?: never;
            path: {
                consumer_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ChiftPage_PMSInvoiceFullItem_'];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "Error while trying to perform your request",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "The resource {Method} - {Resource} is not supported by {ConnectorName}",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
            /** @description Bad Gateway */
            502: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "Error while trying to authenticate to {ConnectorName}",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
        };
    };
    pms_get_customers: {
        parameters: {
            query?: {
                /** @description Page number */
                page?: number;
                /** @description Page size */
                size?: number;
            };
            header?: never;
            path: {
                consumer_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ChiftPage_PMSCustomerItem_'];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "Error while trying to perform your request",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "The resource {Method} - {Resource} is not supported by {ConnectorName}",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
            /** @description Bad Gateway */
            502: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "Error while trying to authenticate to {ConnectorName}",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
        };
    };
    pms_get_customer: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                consumer_id: string;
                customer_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['PMSCustomerItem'];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "Error while trying to perform your request",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "The customer with id {CustomerId} could not be found",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "The resource {Method} - {Resource} is not supported by {ConnectorName}",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
            /** @description Bad Gateway */
            502: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "Error while trying to authenticate to {ConnectorName}",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
        };
    };
    pms_get_locations: {
        parameters: {
            query?: {
                /** @description Page number */
                page?: number;
                /** @description Page size */
                size?: number;
            };
            header?: never;
            path: {
                consumer_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ChiftPage_PMSLocationItem_'];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "Error while trying to perform your request",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "The resource {Method} - {Resource} is not supported by {ConnectorName}",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
            /** @description Bad Gateway */
            502: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "Error while trying to authenticate to {ConnectorName}",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
        };
    };
    pms_get_payments: {
        parameters: {
            query: {
                /** @description Page number */
                page?: number;
                /** @description Page size */
                size?: number;
                date_from: string;
                date_to: string;
            };
            header?: never;
            path: {
                consumer_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ChiftPage_PMSPaymentItem_'];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "Error while trying to perform your request",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "The resource {Method} - {Resource} is not supported by {ConnectorName}",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
            /** @description Bad Gateway */
            502: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "Error while trying to authenticate to {ConnectorName}",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
        };
    };
    pms_get_payments_methods: {
        parameters: {
            query?: {
                /** @description Page number */
                page?: number;
                /** @description Page size */
                size?: number;
                location_id?: string | null;
            };
            header?: never;
            path: {
                consumer_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ChiftPage_PMSPaymentMethods_'];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "Error while trying to perform your request",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "The resource {Method} - {Resource} is not supported by {ConnectorName}",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
            /** @description Bad Gateway */
            502: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "Error while trying to authenticate to {ConnectorName}",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
        };
    };
    pms_get_accounting_categories: {
        parameters: {
            query?: {
                /** @description Page number */
                page?: number;
                /** @description Page size */
                size?: number;
            };
            header?: never;
            path: {
                consumer_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ChiftPage_PMSAccountingCategoryItem_'];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "Error while trying to perform your request",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "The resource {Method} - {Resource} is not supported by {ConnectorName}",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
            /** @description Bad Gateway */
            502: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "Error while trying to authenticate to {ConnectorName}",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
        };
    };
    pms_get_closure: {
        parameters: {
            query?: {
                location_id?: string | null;
            };
            header?: never;
            path: {
                consumer_id: string;
                date: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['PMSClosureItem'];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "Error while trying to perform your request",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "The resource {Method} - {Resource} is not supported by {ConnectorName}",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
            /** @description Bad Gateway */
            502: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "Error while trying to authenticate to {ConnectorName}",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
        };
    };
    pms_get_taxes: {
        parameters: {
            query?: {
                /** @description Page number */
                page?: number;
                /** @description Page size */
                size?: number;
            };
            header?: never;
            path: {
                consumer_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ChiftPage_PMSTaxRateItem_'];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "Error while trying to perform your request",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "The resource {Method} - {Resource} is not supported by {ConnectorName}",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HTTPValidationError'];
                };
            };
            /** @description Bad Gateway */
            502: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "Error while trying to authenticate to {ConnectorName}",
                     *       "status": "error"
                     *     } */
                    'application/json': components['schemas']['ChiftError'];
                };
            };
        };
    };
}
