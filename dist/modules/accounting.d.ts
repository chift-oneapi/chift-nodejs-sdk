import { operations, components } from "../types/public-api/schema";
import { RequestData } from "../types/api";
declare const accountingFactory: {
    getAnalyticPlans(params: operations["accounting_get_analytic_plans"]["parameters"]["query"]): RequestData<(components["schemas"]["AnalyticPlanItem"])[]>;
    getClients(params: operations["accounting_get_clients"]["parameters"]["query"]): RequestData<(components["schemas"]["ClientItemOut"])[]>;
    createClient(client: components["schemas"]["ClientItemIn"]): RequestData<(components["schemas"]["ClientItemOut"])>;
    getClient(clientId: string): RequestData<(components["schemas"]["ClientItemOut"])>;
    updateClient(clientId: string, client: components["schemas"]["ClientItemUpdate"]): RequestData<(components["schemas"]["ClientItemOut"])>;
    getSuppliers(params: operations["accounting_get_suppliers"]["parameters"]["query"]): RequestData<(components["schemas"]["SupplierItemOut"])[]>;
    createSupplier(supplier: components["schemas"]["SupplierItemIn"]): RequestData<(components["schemas"]["SupplierItemOut"])>;
    getSupplier(supplierId: string): RequestData<(components["schemas"]["SupplierItemOut"])>;
    updateSupplier(supplierId: string, supplier: components["schemas"]["SupplierItemUpdate"]): RequestData<(components["schemas"]["SupplierItemOut"])>;
    createInvoice(params: operations["accounting_create_invoice"]["parameters"]["query"], invoice: components["schemas"]["InvoiceItemInMonoAnalyticPlan"]): RequestData<(components["schemas"]["InvoiceItemOutMonoAnalyticPlan"])>;
    createInvoiceWithMultiplePlans(params: operations["accounting_create_invoice_multiple_plans"]["parameters"]["query"], invoice: components["schemas"]["InvoiceItemInMultiAnalyticPlans"]): RequestData<(components["schemas"]["InvoiceItemOutMultiAnalyticPlans"])>;
    getInvoicesByType(invoice_type: components["schemas"]["app__routers__accounting__InvoiceType"], params: operations["accounting_get_invoices_by_type"]["parameters"]["query"]): RequestData<(components["schemas"]["InvoiceItemOutMonoAnalyticPlan"])[]>;
    getInvoice(invoiceId: string, params: operations["accounting_get_invoice"]["parameters"]["query"]): RequestData<(components["schemas"]["InvoiceItemOutMonoAnalyticPlan"])>;
    getInvoiceWithMultiplePlans(invoiceId: string, params: operations["accounting_get_invoice_multi_analytic_plans"]["parameters"]["query"]): RequestData<(components["schemas"]["InvoiceItemOutMultiAnalyticPlans"])>;
    getInvoicesByTypeWithMultiplePlans(invoice_type: components["schemas"]["app__routers__accounting__InvoiceType"], params: operations["accounting_get_invoices_by_type_multi_analytic_plans"]["parameters"]["query"]): RequestData<(components["schemas"]["InvoiceItemOutMultiAnalyticPlans"])[]>;
    createAnalyticAccount(analyticAccount: components["schemas"]["AnalyticAccountItemIn"]): RequestData<(components["schemas"]["AnalyticAccountItemOut"])>;
    getAnalyticAccounts(): RequestData<(components["schemas"]["AnalyticAccountItemOut"])[]>;
    createAnalyticAccountWithMultiplePlans(analytic_plan: string, analyticAccount: components["schemas"]["AnalyticAccountItemIn"]): RequestData<(components["schemas"]["AnalyticAccountItemOutMultiAnalyticPlans"])>;
    getAnalyticAccount(analytic_account_id: string): RequestData<(components["schemas"]["AnalyticAccountItemOut"])>;
    updateAnalyticAccount(analytic_account_id: string, analyticAccount: components["schemas"]["AnalyticAccountItemUpdate"]): RequestData<(components["schemas"]["AnalyticAccountItemOut"])>;
    getAnalyticAccountWithMultiplePlans(analytic_account_id: string, analytic_plan: string): RequestData<(components["schemas"]["AnalyticAccountItemOutMultiAnalyticPlans"])>;
    updateAnalyticAccountWithMultiplePlans(analytic_account_id: string, analytic_plan: string, analyticAccount: components["schemas"]["AnalyticAccountItemUpdate"]): RequestData<(components["schemas"]["AnalyticAccountItemOutMultiAnalyticPlans"])>;
    getAnalyticAccountsWithMultiplePlans(): RequestData<(components["schemas"]["AnalyticAccountItemOutMultiAnalyticPlans"])[]>;
    getAnalyticLinesOfAccount(analytic_account_id: string): RequestData<(components["schemas"]["AnalyticAccountLineItemOut"])[]>;
    getJournalEntries(params: operations["accounting_get_journal_entries"]["parameters"]["query"]): RequestData<(components["schemas"]["JournalEntryMonoAnalyticPlan"])[]>;
    getJournalEntriesWithMultiplePlans(params: operations["accounting_get_journal_entries_mutli_plan"]["parameters"]["query"]): RequestData<(components["schemas"]["JournalEntryMultiAnalyticPlan"])[]>;
    getPaymentsByInvoiceId(invoice_id: string): RequestData<(components["schemas"]["Payment"])[]>;
    getJournals(): RequestData<(components["schemas"]["Journal"])[]>;
    getVatCodes(): RequestData<(components["schemas"]["VatCode"])[]>;
    getMiscOperations(params: operations["accounting_get_miscellaneous_operations"]["parameters"]["query"]): RequestData<(components["schemas"]["MiscellaneousOperationOut"])[]>;
    createMiscOperation(operation: components["schemas"]["MiscellaneousOperationIn"]): RequestData<(components["schemas"]["MiscellaneousOperationOut"])>;
    getMiscOperation(operation_id: string): RequestData<(components["schemas"]["MiscellaneousOperationOut"])>;
    attachPDF(invoice_id: string, attachment: components["schemas"]["AttachmentItem"], params: operations["accounting_add_attachment"]["parameters"]["query"]): RequestData<(operations["accounting_add_attachment"]["responses"][201])>;
    getChartOfAccounts(params: operations["accounting_get_chart_of_accounts"]["parameters"]["query"]): RequestData<(components["schemas"]["AccountItem"])[]>;
    getBalanceOfAccounts(params: operations["accounting_get_chart_of_accounts"]["parameters"]["query"], filter: components["schemas"]["AccountBalanceFilter"]): RequestData<(components["schemas"]["AccountBalance"])[]>;
};
export { accountingFactory, };
