import { beforeAll, expect, test } from '@jest/globals';
import * as chift from '../../src/index';
import * as dotenv from 'dotenv';
import { Sync } from '../../src/modules/sync';

dotenv.config();

const client = new chift.API({
    baseUrl: process.env.CHIFT_BACKBONE_API,
    clientId: process.env.CHIFT_TESTING_CLIENTID as string,
    clientSecret: process.env.CHIFT_TESTING_CLIENTSECRET as string,
    accountId: process.env.CHIFT_TESTING_ACCOUNTID as string,
});

const flowName = 'CI GENERATED';

let sync: ReturnType<typeof Sync>;

beforeAll(async () => {
    const syncId = process.env.CHIFT_TEST_SYNC_ID as string;
    sync = await client.Syncs.getSyncById(syncId);
});

test('createFlow', async () => {
    const flow = await sync.createFlow(
        {
            name: flowName,
            description: 'Generated by Chift Node.js sdk',
            execution: {
                type: 'module',
                data: {
                    name: 'POS to accounting',
                },
            },
            triggers: [
                {
                    id: 'trigger1',
                    type: 'event',
                },
            ],
            config: {},
        },
        async (consumer: any, flowContext: any) => {
            console.log(`consumer: ${consumer}`);
            console.log(`flow_id : ${flowContext.flow_id}`);
        }
    );

    expect(flow).toHaveProperty('flowId');
    expect(flow).toHaveProperty('name', flowName);
});

let flows: any = [];
test('getFlows', async () => {
    flows = await sync.getFlows();
    expect(flows).toBeInstanceOf(Array);
});

test('getFlowByName', async () => {
    if (!flows.length) {
        throw new Error('No flows found to test getFlowByName');
    }

    const flowWithName = await sync.getFlowByName(flows[0].name);
    expect(flowWithName).toHaveProperty('name', flows[0].name);
});

test('getFlowById', async () => {
    if (!flows.length) {
        throw new Error('No flows found to test getFlowById');
    }

    const flowWithId = await sync.getFlowById(flows[0].flowId);
    expect(flowWithId).toHaveProperty('flowId', flows[0].flowId);
});
